
MMA8452Q Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090b4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  08009248  08009248  0000a248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009700  08009700  0000b1ec  2**0
                  CONTENTS
  4 .ARM          00000008  08009700  08009700  0000a700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009708  08009708  0000b1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009708  08009708  0000a708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800970c  0800970c  0000a70c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  08009710  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  200001ec  080098fc  0000b1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  080098fc  0000b488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cba3  00000000  00000000  0000b21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d88  00000000  00000000  00017dbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  00019b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000812  00000000  00000000  0001a5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c2d1  00000000  00000000  0001adca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f0a2  00000000  00000000  0003709b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f59a  00000000  00000000  0004613d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e56d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f40  00000000  00000000  000e571c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000e965c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800922c 	.word	0x0800922c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800922c 	.word	0x0800922c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <MMA8452Q_Init>:

/*
 * INITIALIZATION FUNCTION
 */

uint8_t MMA8452Q_Init (MMA8452Q_t *device, I2C_HandleTypeDef *i2c_handle) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
	// Set struct parameters
	device->i2c_handle = i2c_handle;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	683a      	ldr	r2, [r7, #0]
 8000d02:	601a      	str	r2, [r3, #0]
	device->f_read_set = false;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2200      	movs	r2, #0
 8000d08:	711a      	strb	r2, [r3, #4]
	device->range = RANGE_2;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	715a      	strb	r2, [r3, #5]

	device->acc_raw[0] = 0;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2200      	movs	r2, #0
 8000d14:	80da      	strh	r2, [r3, #6]
	device->acc_raw[1] = 0;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	811a      	strh	r2, [r3, #8]
	device->acc_raw[2] = 0;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	815a      	strh	r2, [r3, #10]

	device->acc_g[0] = 0.0f;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f04f 0200 	mov.w	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
	device->acc_g[1] = 0.0f;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f04f 0200 	mov.w	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
	device->acc_g[2] = 0.0f;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f04f 0200 	mov.w	r2, #0
 8000d38:	615a      	str	r2, [r3, #20]

	device->lapo = PORTRAIT_UP;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	761a      	strb	r2, [r3, #24]
	device->bafro = FRONT;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2200      	movs	r2, #0
 8000d44:	765a      	strb	r2, [r3, #25]


	// Store number of transaction errors ( to be returned at the end of the function )
	uint8_t err_num = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;

	// Check WHO_AM_I register (p.23)
	uint8_t reg_data;

	status = MMA8452Q_Byte_Read(device, MMA8452Q_REG_WHO_AM_I, &reg_data);
 8000d4a:	f107 030d 	add.w	r3, r7, #13
 8000d4e:	461a      	mov	r2, r3
 8000d50:	210d      	movs	r1, #13
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f000 f96c 	bl	8001030 <MMA8452Q_Byte_Read>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000d5c:	7bbb      	ldrb	r3, [r7, #14]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	bf14      	ite	ne
 8000d62:	2301      	movne	r3, #1
 8000d64:	2300      	moveq	r3, #0
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	461a      	mov	r2, r3
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	73fb      	strb	r3, [r7, #15]
	if (reg_data != MMA8452Q_ID)	return 255;
 8000d70:	7b7b      	ldrb	r3, [r7, #13]
 8000d72:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d74:	d001      	beq.n	8000d7a <MMA8452Q_Init+0x86>
 8000d76:	23ff      	movs	r3, #255	@ 0xff
 8000d78:	e0cf      	b.n	8000f1a <MMA8452Q_Init+0x226>

	// XYZ_DATA_CFG (p.23)
	reg_data = MMA8452Q_DEFAULT_XYZ_DATA_CFG;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	737b      	strb	r3, [r7, #13]
	status = MMA8452Q_Byte_Write(device, MMA8452Q_REG_XYZ_DATA_CFG, &reg_data);
 8000d7e:	f107 030d 	add.w	r3, r7, #13
 8000d82:	461a      	mov	r2, r3
 8000d84:	210e      	movs	r1, #14
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f000 f98c 	bl	80010a4 <MMA8452Q_Byte_Write>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000d90:	7bbb      	ldrb	r3, [r7, #14]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	bf14      	ite	ne
 8000d96:	2301      	movne	r3, #1
 8000d98:	2300      	moveq	r3, #0
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
 8000da0:	4413      	add	r3, r2
 8000da2:	73fb      	strb	r3, [r7, #15]

	// Set the full scale range to correctly process acceleration data
	device->range = reg_data & 3;
 8000da4:	7b7b      	ldrb	r3, [r7, #13]
 8000da6:	f003 0303 	and.w	r3, r3, #3
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	715a      	strb	r2, [r3, #5]

	// PL_CFG (p.25)
	reg_data = MMA8452Q_DEFAULT_PL_CFG;
 8000db0:	23c0      	movs	r3, #192	@ 0xc0
 8000db2:	737b      	strb	r3, [r7, #13]
	status = MMA8452Q_Byte_Write(device, MMA8452Q_REG_PL_CFG, &reg_data);
 8000db4:	f107 030d 	add.w	r3, r7, #13
 8000db8:	461a      	mov	r2, r3
 8000dba:	2111      	movs	r1, #17
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f000 f971 	bl	80010a4 <MMA8452Q_Byte_Write>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000dc6:	7bbb      	ldrb	r3, [r7, #14]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	bf14      	ite	ne
 8000dcc:	2301      	movne	r3, #1
 8000dce:	2300      	moveq	r3, #0
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	73fb      	strb	r3, [r7, #15]

	// PL_COUNT (p.26)
	reg_data = MMA8452Q_DEFAULT_PL_COUNT;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	737b      	strb	r3, [r7, #13]
	status = MMA8452Q_Byte_Write(device, MMA8452Q_REG_PL_COUNT, &reg_data);
 8000dde:	f107 030d 	add.w	r3, r7, #13
 8000de2:	461a      	mov	r2, r3
 8000de4:	2112      	movs	r1, #18
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f000 f95c 	bl	80010a4 <MMA8452Q_Byte_Write>
 8000dec:	4603      	mov	r3, r0
 8000dee:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000df0:	7bbb      	ldrb	r3, [r7, #14]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	bf14      	ite	ne
 8000df6:	2301      	movne	r3, #1
 8000df8:	2300      	moveq	r3, #0
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
 8000e00:	4413      	add	r3, r2
 8000e02:	73fb      	strb	r3, [r7, #15]

	// ASLP_COUNT (p.39)
	reg_data = MMA8452Q_DEFAULT_ASLP_COUNT;
 8000e04:	230f      	movs	r3, #15
 8000e06:	737b      	strb	r3, [r7, #13]
	status = MMA8452Q_Byte_Write(device, MMA8452Q_REG_ASLP_COUNT, &reg_data);
 8000e08:	f107 030d 	add.w	r3, r7, #13
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	2129      	movs	r1, #41	@ 0x29
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f000 f947 	bl	80010a4 <MMA8452Q_Byte_Write>
 8000e16:	4603      	mov	r3, r0
 8000e18:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000e1a:	7bbb      	ldrb	r3, [r7, #14]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	bf14      	ite	ne
 8000e20:	2301      	movne	r3, #1
 8000e22:	2300      	moveq	r3, #0
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	461a      	mov	r2, r3
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	73fb      	strb	r3, [r7, #15]

	// CTRL_REG1 (p.40)
	reg_data = MMA8452Q_DEFAULT_CTRL_REG1;
 8000e2e:	23d9      	movs	r3, #217	@ 0xd9
 8000e30:	737b      	strb	r3, [r7, #13]
	status = MMA8452Q_Byte_Write(device, MMA8452Q_REG_CTRL_REG1, &reg_data);
 8000e32:	f107 030d 	add.w	r3, r7, #13
 8000e36:	461a      	mov	r2, r3
 8000e38:	212a      	movs	r1, #42	@ 0x2a
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f000 f932 	bl	80010a4 <MMA8452Q_Byte_Write>
 8000e40:	4603      	mov	r3, r0
 8000e42:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000e44:	7bbb      	ldrb	r3, [r7, #14]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	bf14      	ite	ne
 8000e4a:	2301      	movne	r3, #1
 8000e4c:	2300      	moveq	r3, #0
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	461a      	mov	r2, r3
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	4413      	add	r3, r2
 8000e56:	73fb      	strb	r3, [r7, #15]

	// Set f_read_set to correctly read acceleration data
	device->f_read_set = (reg_data >> 1) & 1;
 8000e58:	7b7b      	ldrb	r3, [r7, #13]
 8000e5a:	085b      	lsrs	r3, r3, #1
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	bf14      	ite	ne
 8000e66:	2301      	movne	r3, #1
 8000e68:	2300      	moveq	r3, #0
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	711a      	strb	r2, [r3, #4]

	// CTRL_REG2 (p.41)
	reg_data = MMA8452Q_DEFAULT_CTRL_REG2;
 8000e70:	2304      	movs	r3, #4
 8000e72:	737b      	strb	r3, [r7, #13]
	status = MMA8452Q_Byte_Write(device, MMA8452Q_REG_CTRL_REG2, &reg_data);
 8000e74:	f107 030d 	add.w	r3, r7, #13
 8000e78:	461a      	mov	r2, r3
 8000e7a:	212b      	movs	r1, #43	@ 0x2b
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f000 f911 	bl	80010a4 <MMA8452Q_Byte_Write>
 8000e82:	4603      	mov	r3, r0
 8000e84:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000e86:	7bbb      	ldrb	r3, [r7, #14]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	bf14      	ite	ne
 8000e8c:	2301      	movne	r3, #1
 8000e8e:	2300      	moveq	r3, #0
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	461a      	mov	r2, r3
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	4413      	add	r3, r2
 8000e98:	73fb      	strb	r3, [r7, #15]

	// CTRL_REG3 (p.42)
	reg_data = MMA8452Q_DEFAULT_CTRL_REG3;
 8000e9a:	2322      	movs	r3, #34	@ 0x22
 8000e9c:	737b      	strb	r3, [r7, #13]
	status = MMA8452Q_Byte_Write(device, MMA8452Q_REG_CTRL_REG3, &reg_data);
 8000e9e:	f107 030d 	add.w	r3, r7, #13
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	212c      	movs	r1, #44	@ 0x2c
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f000 f8fc 	bl	80010a4 <MMA8452Q_Byte_Write>
 8000eac:	4603      	mov	r3, r0
 8000eae:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000eb0:	7bbb      	ldrb	r3, [r7, #14]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	bf14      	ite	ne
 8000eb6:	2301      	movne	r3, #1
 8000eb8:	2300      	moveq	r3, #0
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	73fb      	strb	r3, [r7, #15]

	// CTRL_REG4 (p.42)
	reg_data = MMA8452Q_DEFAULT_CTRL_REG4;
 8000ec4:	2381      	movs	r3, #129	@ 0x81
 8000ec6:	737b      	strb	r3, [r7, #13]
	status = MMA8452Q_Byte_Write(device, MMA8452Q_REG_CTRL_REG4, &reg_data);
 8000ec8:	f107 030d 	add.w	r3, r7, #13
 8000ecc:	461a      	mov	r2, r3
 8000ece:	212d      	movs	r1, #45	@ 0x2d
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f000 f8e7 	bl	80010a4 <MMA8452Q_Byte_Write>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000eda:	7bbb      	ldrb	r3, [r7, #14]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	bf14      	ite	ne
 8000ee0:	2301      	movne	r3, #1
 8000ee2:	2300      	moveq	r3, #0
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
 8000eea:	4413      	add	r3, r2
 8000eec:	73fb      	strb	r3, [r7, #15]

	// CTRL_REG5 (p.43)
	reg_data = MMA8452Q_DEFAULT_CTRL_REG5;
 8000eee:	2310      	movs	r3, #16
 8000ef0:	737b      	strb	r3, [r7, #13]
	status = MMA8452Q_Byte_Write(device, MMA8452Q_REG_CTRL_REG5, &reg_data);
 8000ef2:	f107 030d 	add.w	r3, r7, #13
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	212e      	movs	r1, #46	@ 0x2e
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f000 f8d2 	bl	80010a4 <MMA8452Q_Byte_Write>
 8000f00:	4603      	mov	r3, r0
 8000f02:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000f04:	7bbb      	ldrb	r3, [r7, #14]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	bf14      	ite	ne
 8000f0a:	2301      	movne	r3, #1
 8000f0c:	2300      	moveq	r3, #0
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	461a      	mov	r2, r3
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	4413      	add	r3, r2
 8000f16:	73fb      	strb	r3, [r7, #15]

	return err_num;
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <MMA8452Q_ReadAccel>:

/*
 * DATA AQUISITION
 */

HAL_StatusTypeDef MMA8452Q_ReadAccel (MMA8452Q_t *device) {
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b084      	sub	sp, #16
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
	uint8_t raw_data[6] = {0};
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	2300      	movs	r3, #0
 8000f30:	81bb      	strh	r3, [r7, #12]

	HAL_StatusTypeDef status = MMA8452Q_MultiByte_Read (device, MMA8452Q_REG_OUT_X_MSB, raw_data, (device->f_read_set ? 3 : 6));
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	791b      	ldrb	r3, [r3, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MMA8452Q_ReadAccel+0x1c>
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e000      	b.n	8000f40 <MMA8452Q_ReadAccel+0x1e>
 8000f3e:	2306      	movs	r3, #6
 8000f40:	f107 0208 	add.w	r2, r7, #8
 8000f44:	2101      	movs	r1, #1
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f000 f88d 	bl	8001066 <MMA8452Q_MultiByte_Read>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK)	return status;
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MMA8452Q_ReadAccel+0x38>
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	e03f      	b.n	8000fda <MMA8452Q_ReadAccel+0xb8>

	device->acc_raw[0] = (raw_data[0] << 4) | raw_data[1];
 8000f5a:	7a3b      	ldrb	r3, [r7, #8]
 8000f5c:	011b      	lsls	r3, r3, #4
 8000f5e:	b21a      	sxth	r2, r3
 8000f60:	7a7b      	ldrb	r3, [r7, #9]
 8000f62:	b21b      	sxth	r3, r3
 8000f64:	4313      	orrs	r3, r2
 8000f66:	b21b      	sxth	r3, r3
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	80da      	strh	r2, [r3, #6]
	device->acc_raw[1] = (raw_data[2] << 4) | raw_data[3];
 8000f6e:	7abb      	ldrb	r3, [r7, #10]
 8000f70:	011b      	lsls	r3, r3, #4
 8000f72:	b21a      	sxth	r2, r3
 8000f74:	7afb      	ldrb	r3, [r7, #11]
 8000f76:	b21b      	sxth	r3, r3
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	b21b      	sxth	r3, r3
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	811a      	strh	r2, [r3, #8]
	device->acc_raw[2] = (raw_data[4] << 4) | raw_data[5];
 8000f82:	7b3b      	ldrb	r3, [r7, #12]
 8000f84:	011b      	lsls	r3, r3, #4
 8000f86:	b21a      	sxth	r2, r3
 8000f88:	7b7b      	ldrb	r3, [r7, #13]
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	b21b      	sxth	r3, r3
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	815a      	strh	r2, [r3, #10]

	device->acc_g[0] = process_data(device, device->acc_raw[0]);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	88db      	ldrh	r3, [r3, #6]
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f000 f89d 	bl	80010dc <process_data>
 8000fa2:	eef0 7a40 	vmov.f32	s15, s0
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	edc3 7a03 	vstr	s15, [r3, #12]
	device->acc_g[1] = process_data(device, device->acc_raw[1]);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	891b      	ldrh	r3, [r3, #8]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 f892 	bl	80010dc <process_data>
 8000fb8:	eef0 7a40 	vmov.f32	s15, s0
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	edc3 7a04 	vstr	s15, [r3, #16]
	device->acc_g[2] = process_data(device, device->acc_raw[2]);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	895b      	ldrh	r3, [r3, #10]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f000 f887 	bl	80010dc <process_data>
 8000fce:	eef0 7a40 	vmov.f32	s15, s0
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	edc3 7a05 	vstr	s15, [r3, #20]

	return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <MMA8452Q_ReadOrientation>:

HAL_StatusTypeDef MMA8452Q_ReadOrientation (MMA8452Q_t *device) {
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b084      	sub	sp, #16
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
	uint8_t raw_data = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	73bb      	strb	r3, [r7, #14]

	HAL_StatusTypeDef status = MMA8452Q_Byte_Read (device, MMA8452Q_REG_PL_STATUS, &raw_data);
 8000fee:	f107 030e 	add.w	r3, r7, #14
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	2110      	movs	r1, #16
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f000 f81a 	bl	8001030 <MMA8452Q_Byte_Read>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK)	return status;
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MMA8452Q_ReadOrientation+0x28>
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	e00e      	b.n	8001028 <MMA8452Q_ReadOrientation+0x46>

	device->lapo = (raw_data >> 1) & 3;
 800100a:	7bbb      	ldrb	r3, [r7, #14]
 800100c:	085b      	lsrs	r3, r3, #1
 800100e:	b2db      	uxtb	r3, r3
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	b2da      	uxtb	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	761a      	strb	r2, [r3, #24]
	device->bafro = raw_data & 1;
 800101a:	7bbb      	ldrb	r3, [r7, #14]
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	b2da      	uxtb	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	765a      	strb	r2, [r3, #25]

	return HAL_OK;
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <MMA8452Q_Byte_Read>:

/*
 * LOW LEVEL FUNCTIONS
 */

HAL_StatusTypeDef MMA8452Q_Byte_Read (MMA8452Q_t *device, uint8_t reg, uint8_t *data) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af04      	add	r7, sp, #16
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	460b      	mov	r3, r1
 800103a:	607a      	str	r2, [r7, #4]
 800103c:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read (device->i2c_handle, MMA8452Q_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	6818      	ldr	r0, [r3, #0]
 8001042:	7afb      	ldrb	r3, [r7, #11]
 8001044:	b29a      	uxth	r2, r3
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	9302      	str	r3, [sp, #8]
 800104c:	2301      	movs	r3, #1
 800104e:	9301      	str	r3, [sp, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	2301      	movs	r3, #1
 8001056:	213a      	movs	r1, #58	@ 0x3a
 8001058:	f001 f8f4 	bl	8002244 <HAL_I2C_Mem_Read>
 800105c:	4603      	mov	r3, r0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <MMA8452Q_MultiByte_Read>:

HAL_StatusTypeDef MMA8452Q_MultiByte_Read (MMA8452Q_t *device, uint8_t reg, uint8_t *data, uint8_t length) {
 8001066:	b580      	push	{r7, lr}
 8001068:	b088      	sub	sp, #32
 800106a:	af04      	add	r7, sp, #16
 800106c:	60f8      	str	r0, [r7, #12]
 800106e:	607a      	str	r2, [r7, #4]
 8001070:	461a      	mov	r2, r3
 8001072:	460b      	mov	r3, r1
 8001074:	72fb      	strb	r3, [r7, #11]
 8001076:	4613      	mov	r3, r2
 8001078:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read (device->i2c_handle, MMA8452Q_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6818      	ldr	r0, [r3, #0]
 800107e:	7afb      	ldrb	r3, [r7, #11]
 8001080:	b29a      	uxth	r2, r3
 8001082:	7abb      	ldrb	r3, [r7, #10]
 8001084:	b29b      	uxth	r3, r3
 8001086:	f04f 31ff 	mov.w	r1, #4294967295
 800108a:	9102      	str	r1, [sp, #8]
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	2301      	movs	r3, #1
 8001094:	213a      	movs	r1, #58	@ 0x3a
 8001096:	f001 f8d5 	bl	8002244 <HAL_I2C_Mem_Read>
 800109a:	4603      	mov	r3, r0
}
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <MMA8452Q_Byte_Write>:

HAL_StatusTypeDef MMA8452Q_Byte_Write (MMA8452Q_t *device, uint8_t reg, uint8_t *data) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af04      	add	r7, sp, #16
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	460b      	mov	r3, r1
 80010ae:	607a      	str	r2, [r7, #4]
 80010b0:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Write (device->i2c_handle, MMA8452Q_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	6818      	ldr	r0, [r3, #0]
 80010b6:	7afb      	ldrb	r3, [r7, #11]
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
 80010be:	9302      	str	r3, [sp, #8]
 80010c0:	2301      	movs	r3, #1
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2301      	movs	r3, #1
 80010ca:	213a      	movs	r1, #58	@ 0x3a
 80010cc:	f000 ffa6 	bl	800201c <HAL_I2C_Mem_Write>
 80010d0:	4603      	mov	r3, r0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <process_data>:

/*
 * PRIVATE FUNCTIONS
 */

float process_data (MMA8452Q_t *device, uint16_t raw) {
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	807b      	strh	r3, [r7, #2]
	float scale = 0.0f;
 80010e8:	f04f 0300 	mov.w	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]

	if (!device->f_read_set) {
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	791b      	ldrb	r3, [r3, #4]
 80010f2:	f083 0301 	eor.w	r3, r3, #1
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d014      	beq.n	8001126 <process_data+0x4a>
		if (device->range == RANGE_2) 			scale = 0.001f;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	795b      	ldrb	r3, [r3, #5]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d102      	bne.n	800110a <process_data+0x2e>
 8001104:	4b20      	ldr	r3, [pc, #128]	@ (8001188 <process_data+0xac>)
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	e023      	b.n	8001152 <process_data+0x76>
		else if (device->range == RANGE_4) 		scale = 0.002f;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	795b      	ldrb	r3, [r3, #5]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d102      	bne.n	8001118 <process_data+0x3c>
 8001112:	4b1e      	ldr	r3, [pc, #120]	@ (800118c <process_data+0xb0>)
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	e01c      	b.n	8001152 <process_data+0x76>
		else if (device->range == RANGE_8) 		scale = 0.0039f;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	795b      	ldrb	r3, [r3, #5]
 800111c:	2b02      	cmp	r3, #2
 800111e:	d118      	bne.n	8001152 <process_data+0x76>
 8001120:	4b1b      	ldr	r3, [pc, #108]	@ (8001190 <process_data+0xb4>)
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	e015      	b.n	8001152 <process_data+0x76>
	} else {
		if (device->range == RANGE_2) 			scale = 0.0156f;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	795b      	ldrb	r3, [r3, #5]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d102      	bne.n	8001134 <process_data+0x58>
 800112e:	4b19      	ldr	r3, [pc, #100]	@ (8001194 <process_data+0xb8>)
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	e00e      	b.n	8001152 <process_data+0x76>
		else if (device->range == RANGE_4) 		scale = 0.03125f;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	795b      	ldrb	r3, [r3, #5]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d103      	bne.n	8001144 <process_data+0x68>
 800113c:	f04f 5374 	mov.w	r3, #1023410176	@ 0x3d000000
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	e006      	b.n	8001152 <process_data+0x76>
		else if (device->range == RANGE_8)		scale = 0.0625f;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	795b      	ldrb	r3, [r3, #5]
 8001148:	2b02      	cmp	r3, #2
 800114a:	d102      	bne.n	8001152 <process_data+0x76>
 800114c:	f04f 5376 	mov.w	r3, #1031798784	@ 0x3d800000
 8001150:	60fb      	str	r3, [r7, #12]
	}

	if (raw >> 11)	scale *= -1;
 8001152:	887b      	ldrh	r3, [r7, #2]
 8001154:	0adb      	lsrs	r3, r3, #11
 8001156:	b29b      	uxth	r3, r3
 8001158:	2b00      	cmp	r3, #0
 800115a:	d005      	beq.n	8001168 <process_data+0x8c>
 800115c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001160:	eef1 7a67 	vneg.f32	s15, s15
 8001164:	edc7 7a03 	vstr	s15, [r7, #12]

	return (float) (raw) * scale;
 8001168:	887b      	ldrh	r3, [r7, #2]
 800116a:	ee07 3a90 	vmov	s15, r3
 800116e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001172:	edd7 7a03 	vldr	s15, [r7, #12]
 8001176:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800117a:	eeb0 0a67 	vmov.f32	s0, s15
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	3a83126f 	.word	0x3a83126f
 800118c:	3b03126f 	.word	0x3b03126f
 8001190:	3b7f9724 	.word	0x3b7f9724
 8001194:	3c7f9724 	.word	0x3c7f9724

08001198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800119c:	b087      	sub	sp, #28
 800119e:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a0:	f000 fb70 	bl	8001884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a4:	f000 f858 	bl	8001258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a8:	f000 f916 	bl	80013d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80011ac:	f000 f8a4 	bl	80012f8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80011b0:	f000 f8e2 	bl	8001378 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  MMA8452Q_Init (&dev, &hi2c1);
 80011b4:	4921      	ldr	r1, [pc, #132]	@ (800123c <main+0xa4>)
 80011b6:	4822      	ldr	r0, [pc, #136]	@ (8001240 <main+0xa8>)
 80011b8:	f7ff fd9c 	bl	8000cf4 <MMA8452Q_Init>
  HAL_Delay (50);
 80011bc:	2032      	movs	r0, #50	@ 0x32
 80011be:	f000 fbc7 	bl	8001950 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MMA8452Q_ReadAccel (&dev);
 80011c2:	481f      	ldr	r0, [pc, #124]	@ (8001240 <main+0xa8>)
 80011c4:	f7ff fead 	bl	8000f22 <MMA8452Q_ReadAccel>
	  MMA8452Q_ReadOrientation (&dev);
 80011c8:	481d      	ldr	r0, [pc, #116]	@ (8001240 <main+0xa8>)
 80011ca:	f7ff ff0a 	bl	8000fe2 <MMA8452Q_ReadOrientation>

	  sprintf (message, "%.3f %.3f %.3f     %s     %s\r\n", dev.acc_g[0], dev.acc_g[1], dev.acc_g[2], lapo_s[dev.lapo], bafro_s[dev.bafro]);
 80011ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001240 <main+0xa8>)
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f9b8 	bl	8000548 <__aeabi_f2d>
 80011d8:	4680      	mov	r8, r0
 80011da:	4689      	mov	r9, r1
 80011dc:	4b18      	ldr	r3, [pc, #96]	@ (8001240 <main+0xa8>)
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f9b1 	bl	8000548 <__aeabi_f2d>
 80011e6:	4604      	mov	r4, r0
 80011e8:	460d      	mov	r5, r1
 80011ea:	4b15      	ldr	r3, [pc, #84]	@ (8001240 <main+0xa8>)
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff f9aa 	bl	8000548 <__aeabi_f2d>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4911      	ldr	r1, [pc, #68]	@ (8001240 <main+0xa8>)
 80011fa:	7e09      	ldrb	r1, [r1, #24]
 80011fc:	4608      	mov	r0, r1
 80011fe:	4911      	ldr	r1, [pc, #68]	@ (8001244 <main+0xac>)
 8001200:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8001204:	480e      	ldr	r0, [pc, #56]	@ (8001240 <main+0xa8>)
 8001206:	7e40      	ldrb	r0, [r0, #25]
 8001208:	4606      	mov	r6, r0
 800120a:	480f      	ldr	r0, [pc, #60]	@ (8001248 <main+0xb0>)
 800120c:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8001210:	9005      	str	r0, [sp, #20]
 8001212:	9104      	str	r1, [sp, #16]
 8001214:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001218:	e9cd 4500 	strd	r4, r5, [sp]
 800121c:	4642      	mov	r2, r8
 800121e:	464b      	mov	r3, r9
 8001220:	490a      	ldr	r1, [pc, #40]	@ (800124c <main+0xb4>)
 8001222:	480b      	ldr	r0, [pc, #44]	@ (8001250 <main+0xb8>)
 8001224:	f004 fbc8 	bl	80059b8 <siprintf>
	  HAL_UART_Transmit (&huart2, (uint8_t *) message, 50, HAL_MAX_DELAY);
 8001228:	f04f 33ff 	mov.w	r3, #4294967295
 800122c:	2232      	movs	r2, #50	@ 0x32
 800122e:	4908      	ldr	r1, [pc, #32]	@ (8001250 <main+0xb8>)
 8001230:	4808      	ldr	r0, [pc, #32]	@ (8001254 <main+0xbc>)
 8001232:	f003 f8b9 	bl	80043a8 <HAL_UART_Transmit>
	  MMA8452Q_ReadAccel (&dev);
 8001236:	bf00      	nop
 8001238:	e7c3      	b.n	80011c2 <main+0x2a>
 800123a:	bf00      	nop
 800123c:	20000208 	.word	0x20000208
 8001240:	200002e4 	.word	0x200002e4
 8001244:	20000000 	.word	0x20000000
 8001248:	20000010 	.word	0x20000010
 800124c:	08009278 	.word	0x08009278
 8001250:	20000300 	.word	0x20000300
 8001254:	2000025c 	.word	0x2000025c

08001258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b09c      	sub	sp, #112	@ 0x70
 800125c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001262:	2228      	movs	r2, #40	@ 0x28
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f004 fc09 	bl	8005a7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800126c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800127c:	463b      	mov	r3, r7
 800127e:	2234      	movs	r2, #52	@ 0x34
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f004 fbfb 	bl	8005a7e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001288:	2302      	movs	r3, #2
 800128a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800128c:	2301      	movs	r3, #1
 800128e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001290:	2310      	movs	r3, #16
 8001292:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001294:	2300      	movs	r3, #0
 8001296:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001298:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800129c:	4618      	mov	r0, r3
 800129e:	f001 fc45 	bl	8002b2c <HAL_RCC_OscConfig>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <SystemClock_Config+0x54>
  {
    Error_Handler();
 80012a8:	f000 f8de 	bl	8001468 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ac:	230f      	movs	r3, #15
 80012ae:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012b0:	2300      	movs	r3, #0
 80012b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012c0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80012c4:	2100      	movs	r1, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f002 fc6e 	bl	8003ba8 <HAL_RCC_ClockConfig>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80012d2:	f000 f8c9 	bl	8001468 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012d6:	2320      	movs	r3, #32
 80012d8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012de:	463b      	mov	r3, r7
 80012e0:	4618      	mov	r0, r3
 80012e2:	f002 fe81 	bl	8003fe8 <HAL_RCCEx_PeriphCLKConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012ec:	f000 f8bc 	bl	8001468 <Error_Handler>
  }
}
 80012f0:	bf00      	nop
 80012f2:	3770      	adds	r7, #112	@ 0x70
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	@ (800136c <MX_I2C1_Init+0x74>)
 80012fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001370 <MX_I2C1_Init+0x78>)
 8001300:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010020A;
 8001302:	4b1a      	ldr	r3, [pc, #104]	@ (800136c <MX_I2C1_Init+0x74>)
 8001304:	4a1b      	ldr	r2, [pc, #108]	@ (8001374 <MX_I2C1_Init+0x7c>)
 8001306:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001308:	4b18      	ldr	r3, [pc, #96]	@ (800136c <MX_I2C1_Init+0x74>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800130e:	4b17      	ldr	r3, [pc, #92]	@ (800136c <MX_I2C1_Init+0x74>)
 8001310:	2201      	movs	r2, #1
 8001312:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001314:	4b15      	ldr	r3, [pc, #84]	@ (800136c <MX_I2C1_Init+0x74>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800131a:	4b14      	ldr	r3, [pc, #80]	@ (800136c <MX_I2C1_Init+0x74>)
 800131c:	2200      	movs	r2, #0
 800131e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001320:	4b12      	ldr	r3, [pc, #72]	@ (800136c <MX_I2C1_Init+0x74>)
 8001322:	2200      	movs	r2, #0
 8001324:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001326:	4b11      	ldr	r3, [pc, #68]	@ (800136c <MX_I2C1_Init+0x74>)
 8001328:	2200      	movs	r2, #0
 800132a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800132c:	4b0f      	ldr	r3, [pc, #60]	@ (800136c <MX_I2C1_Init+0x74>)
 800132e:	2200      	movs	r2, #0
 8001330:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001332:	480e      	ldr	r0, [pc, #56]	@ (800136c <MX_I2C1_Init+0x74>)
 8001334:	f000 fdd7 	bl	8001ee6 <HAL_I2C_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800133e:	f000 f893 	bl	8001468 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001342:	2100      	movs	r1, #0
 8001344:	4809      	ldr	r0, [pc, #36]	@ (800136c <MX_I2C1_Init+0x74>)
 8001346:	f001 fb59 	bl	80029fc <HAL_I2CEx_ConfigAnalogFilter>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001350:	f000 f88a 	bl	8001468 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001354:	2100      	movs	r1, #0
 8001356:	4805      	ldr	r0, [pc, #20]	@ (800136c <MX_I2C1_Init+0x74>)
 8001358:	f001 fb9b 	bl	8002a92 <HAL_I2CEx_ConfigDigitalFilter>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001362:	f000 f881 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000208 	.word	0x20000208
 8001370:	40005400 	.word	0x40005400
 8001374:	0010020a 	.word	0x0010020a

08001378 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800137c:	4b14      	ldr	r3, [pc, #80]	@ (80013d0 <MX_USART2_UART_Init+0x58>)
 800137e:	4a15      	ldr	r2, [pc, #84]	@ (80013d4 <MX_USART2_UART_Init+0x5c>)
 8001380:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001382:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <MX_USART2_UART_Init+0x58>)
 8001384:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001388:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800138a:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <MX_USART2_UART_Init+0x58>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001390:	4b0f      	ldr	r3, [pc, #60]	@ (80013d0 <MX_USART2_UART_Init+0x58>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001396:	4b0e      	ldr	r3, [pc, #56]	@ (80013d0 <MX_USART2_UART_Init+0x58>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800139c:	4b0c      	ldr	r3, [pc, #48]	@ (80013d0 <MX_USART2_UART_Init+0x58>)
 800139e:	220c      	movs	r2, #12
 80013a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a2:	4b0b      	ldr	r3, [pc, #44]	@ (80013d0 <MX_USART2_UART_Init+0x58>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a8:	4b09      	ldr	r3, [pc, #36]	@ (80013d0 <MX_USART2_UART_Init+0x58>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ae:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <MX_USART2_UART_Init+0x58>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013b4:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <MX_USART2_UART_Init+0x58>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ba:	4805      	ldr	r0, [pc, #20]	@ (80013d0 <MX_USART2_UART_Init+0x58>)
 80013bc:	f002 ffa6 	bl	800430c <HAL_UART_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013c6:	f000 f84f 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2000025c 	.word	0x2000025c
 80013d4:	40004400 	.word	0x40004400

080013d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013de:	f107 030c 	add.w	r3, r7, #12
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001464 <MX_GPIO_Init+0x8c>)
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001464 <MX_GPIO_Init+0x8c>)
 80013f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013f8:	6153      	str	r3, [r2, #20]
 80013fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001464 <MX_GPIO_Init+0x8c>)
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001406:	4b17      	ldr	r3, [pc, #92]	@ (8001464 <MX_GPIO_Init+0x8c>)
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	4a16      	ldr	r2, [pc, #88]	@ (8001464 <MX_GPIO_Init+0x8c>)
 800140c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001410:	6153      	str	r3, [r2, #20]
 8001412:	4b14      	ldr	r3, [pc, #80]	@ (8001464 <MX_GPIO_Init+0x8c>)
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : INT1_Pin INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin;
 800141e:	2303      	movs	r3, #3
 8001420:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001422:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001426:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001428:	2301      	movs	r3, #1
 800142a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	4619      	mov	r1, r3
 8001432:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001436:	f000 fbc1 	bl	8001bbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	2100      	movs	r1, #0
 800143e:	2006      	movs	r0, #6
 8001440:	f000 fb85 	bl	8001b4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001444:	2006      	movs	r0, #6
 8001446:	f000 fb9e 	bl	8001b86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2100      	movs	r1, #0
 800144e:	2007      	movs	r0, #7
 8001450:	f000 fb7d 	bl	8001b4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001454:	2007      	movs	r0, #7
 8001456:	f000 fb96 	bl	8001b86 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800145a:	bf00      	nop
 800145c:	3720      	adds	r7, #32
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40021000 	.word	0x40021000

08001468 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800146c:	b672      	cpsid	i
}
 800146e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <Error_Handler+0x8>

08001474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147a:	4b0f      	ldr	r3, [pc, #60]	@ (80014b8 <HAL_MspInit+0x44>)
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	4a0e      	ldr	r2, [pc, #56]	@ (80014b8 <HAL_MspInit+0x44>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6193      	str	r3, [r2, #24]
 8001486:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <HAL_MspInit+0x44>)
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001492:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <HAL_MspInit+0x44>)
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	4a08      	ldr	r2, [pc, #32]	@ (80014b8 <HAL_MspInit+0x44>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800149c:	61d3      	str	r3, [r2, #28]
 800149e:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <HAL_MspInit+0x44>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000

080014bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	@ 0x28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a26      	ldr	r2, [pc, #152]	@ (8001574 <HAL_I2C_MspInit+0xb8>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d145      	bne.n	800156a <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	4b26      	ldr	r3, [pc, #152]	@ (8001578 <HAL_I2C_MspInit+0xbc>)
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	4a25      	ldr	r2, [pc, #148]	@ (8001578 <HAL_I2C_MspInit+0xbc>)
 80014e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014e8:	6153      	str	r3, [r2, #20]
 80014ea:	4b23      	ldr	r3, [pc, #140]	@ (8001578 <HAL_I2C_MspInit+0xbc>)
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f6:	4b20      	ldr	r3, [pc, #128]	@ (8001578 <HAL_I2C_MspInit+0xbc>)
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	4a1f      	ldr	r2, [pc, #124]	@ (8001578 <HAL_I2C_MspInit+0xbc>)
 80014fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001500:	6153      	str	r3, [r2, #20]
 8001502:	4b1d      	ldr	r3, [pc, #116]	@ (8001578 <HAL_I2C_MspInit+0xbc>)
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800150e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001512:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001514:	2312      	movs	r3, #18
 8001516:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800151c:	2303      	movs	r3, #3
 800151e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001520:	2304      	movs	r3, #4
 8001522:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	4619      	mov	r1, r3
 800152a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800152e:	f000 fb45 	bl	8001bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001532:	2380      	movs	r3, #128	@ 0x80
 8001534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001536:	2312      	movs	r3, #18
 8001538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800153e:	2303      	movs	r3, #3
 8001540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001542:	2304      	movs	r3, #4
 8001544:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001546:	f107 0314 	add.w	r3, r7, #20
 800154a:	4619      	mov	r1, r3
 800154c:	480b      	ldr	r0, [pc, #44]	@ (800157c <HAL_I2C_MspInit+0xc0>)
 800154e:	f000 fb35 	bl	8001bbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001552:	4b09      	ldr	r3, [pc, #36]	@ (8001578 <HAL_I2C_MspInit+0xbc>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	4a08      	ldr	r2, [pc, #32]	@ (8001578 <HAL_I2C_MspInit+0xbc>)
 8001558:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800155c:	61d3      	str	r3, [r2, #28]
 800155e:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <HAL_I2C_MspInit+0xbc>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800156a:	bf00      	nop
 800156c:	3728      	adds	r7, #40	@ 0x28
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40005400 	.word	0x40005400
 8001578:	40021000 	.word	0x40021000
 800157c:	48000400 	.word	0x48000400

08001580 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08a      	sub	sp, #40	@ 0x28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a17      	ldr	r2, [pc, #92]	@ (80015fc <HAL_UART_MspInit+0x7c>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d128      	bne.n	80015f4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015a2:	4b17      	ldr	r3, [pc, #92]	@ (8001600 <HAL_UART_MspInit+0x80>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	4a16      	ldr	r2, [pc, #88]	@ (8001600 <HAL_UART_MspInit+0x80>)
 80015a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015ac:	61d3      	str	r3, [r2, #28]
 80015ae:	4b14      	ldr	r3, [pc, #80]	@ (8001600 <HAL_UART_MspInit+0x80>)
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b6:	613b      	str	r3, [r7, #16]
 80015b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ba:	4b11      	ldr	r3, [pc, #68]	@ (8001600 <HAL_UART_MspInit+0x80>)
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	4a10      	ldr	r2, [pc, #64]	@ (8001600 <HAL_UART_MspInit+0x80>)
 80015c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015c4:	6153      	str	r3, [r2, #20]
 80015c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001600 <HAL_UART_MspInit+0x80>)
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015d2:	230c      	movs	r3, #12
 80015d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015de:	2303      	movs	r3, #3
 80015e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015e2:	2307      	movs	r3, #7
 80015e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	4619      	mov	r1, r3
 80015ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015f0:	f000 fae4 	bl	8001bbc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80015f4:	bf00      	nop
 80015f6:	3728      	adds	r7, #40	@ 0x28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40004400 	.word	0x40004400
 8001600:	40021000 	.word	0x40021000

08001604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <NMI_Handler+0x4>

0800160c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <HardFault_Handler+0x4>

08001614 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001618:	bf00      	nop
 800161a:	e7fd      	b.n	8001618 <MemManage_Handler+0x4>

0800161c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001620:	bf00      	nop
 8001622:	e7fd      	b.n	8001620 <BusFault_Handler+0x4>

08001624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <UsageFault_Handler+0x4>

0800162c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800165a:	f000 f959 	bl	8001910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}

08001662 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_Pin);
 8001666:	2001      	movs	r0, #1
 8001668:	f000 fc1a 	bl	8001ea0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}

08001670 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_Pin);
 8001674:	2002      	movs	r0, #2
 8001676:	f000 fc13 	bl	8001ea0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}

0800167e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0
  return 1;
 8001682:	2301      	movs	r3, #1
}
 8001684:	4618      	mov	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <_kill>:

int _kill(int pid, int sig)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001698:	f004 fa44 	bl	8005b24 <__errno>
 800169c:	4603      	mov	r3, r0
 800169e:	2216      	movs	r2, #22
 80016a0:	601a      	str	r2, [r3, #0]
  return -1;
 80016a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <_exit>:

void _exit (int status)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016b6:	f04f 31ff 	mov.w	r1, #4294967295
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ffe7 	bl	800168e <_kill>
  while (1) {}    /* Make sure we hang here */
 80016c0:	bf00      	nop
 80016c2:	e7fd      	b.n	80016c0 <_exit+0x12>

080016c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	e00a      	b.n	80016ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016d6:	f3af 8000 	nop.w
 80016da:	4601      	mov	r1, r0
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	1c5a      	adds	r2, r3, #1
 80016e0:	60ba      	str	r2, [r7, #8]
 80016e2:	b2ca      	uxtb	r2, r1
 80016e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	3301      	adds	r3, #1
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	dbf0      	blt.n	80016d6 <_read+0x12>
  }

  return len;
 80016f4:	687b      	ldr	r3, [r7, #4]
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b086      	sub	sp, #24
 8001702:	af00      	add	r7, sp, #0
 8001704:	60f8      	str	r0, [r7, #12]
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	e009      	b.n	8001724 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	1c5a      	adds	r2, r3, #1
 8001714:	60ba      	str	r2, [r7, #8]
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	3301      	adds	r3, #1
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	697a      	ldr	r2, [r7, #20]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	429a      	cmp	r2, r3
 800172a:	dbf1      	blt.n	8001710 <_write+0x12>
  }
  return len;
 800172c:	687b      	ldr	r3, [r7, #4]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <_close>:

int _close(int file)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800173e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001742:	4618      	mov	r0, r3
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800175e:	605a      	str	r2, [r3, #4]
  return 0;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <_isatty>:

int _isatty(int file)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001776:	2301      	movs	r3, #1
}
 8001778:	4618      	mov	r0, r3
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a8:	4a14      	ldr	r2, [pc, #80]	@ (80017fc <_sbrk+0x5c>)
 80017aa:	4b15      	ldr	r3, [pc, #84]	@ (8001800 <_sbrk+0x60>)
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b4:	4b13      	ldr	r3, [pc, #76]	@ (8001804 <_sbrk+0x64>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d102      	bne.n	80017c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017bc:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <_sbrk+0x64>)
 80017be:	4a12      	ldr	r2, [pc, #72]	@ (8001808 <_sbrk+0x68>)
 80017c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c2:	4b10      	ldr	r3, [pc, #64]	@ (8001804 <_sbrk+0x64>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d207      	bcs.n	80017e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d0:	f004 f9a8 	bl	8005b24 <__errno>
 80017d4:	4603      	mov	r3, r0
 80017d6:	220c      	movs	r2, #12
 80017d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017da:	f04f 33ff 	mov.w	r3, #4294967295
 80017de:	e009      	b.n	80017f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e0:	4b08      	ldr	r3, [pc, #32]	@ (8001804 <_sbrk+0x64>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017e6:	4b07      	ldr	r3, [pc, #28]	@ (8001804 <_sbrk+0x64>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	4a05      	ldr	r2, [pc, #20]	@ (8001804 <_sbrk+0x64>)
 80017f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017f2:	68fb      	ldr	r3, [r7, #12]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20004000 	.word	0x20004000
 8001800:	00000400 	.word	0x00000400
 8001804:	20000334 	.word	0x20000334
 8001808:	20000488 	.word	0x20000488

0800180c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001810:	4b06      	ldr	r3, [pc, #24]	@ (800182c <SystemInit+0x20>)
 8001812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001816:	4a05      	ldr	r2, [pc, #20]	@ (800182c <SystemInit+0x20>)
 8001818:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800181c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001830:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001868 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001834:	f7ff ffea 	bl	800180c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001838:	480c      	ldr	r0, [pc, #48]	@ (800186c <LoopForever+0x6>)
  ldr r1, =_edata
 800183a:	490d      	ldr	r1, [pc, #52]	@ (8001870 <LoopForever+0xa>)
  ldr r2, =_sidata
 800183c:	4a0d      	ldr	r2, [pc, #52]	@ (8001874 <LoopForever+0xe>)
  movs r3, #0
 800183e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001840:	e002      	b.n	8001848 <LoopCopyDataInit>

08001842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001846:	3304      	adds	r3, #4

08001848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800184a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800184c:	d3f9      	bcc.n	8001842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800184e:	4a0a      	ldr	r2, [pc, #40]	@ (8001878 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001850:	4c0a      	ldr	r4, [pc, #40]	@ (800187c <LoopForever+0x16>)
  movs r3, #0
 8001852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001854:	e001      	b.n	800185a <LoopFillZerobss>

08001856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001858:	3204      	adds	r2, #4

0800185a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800185a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800185c:	d3fb      	bcc.n	8001856 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800185e:	f004 f967 	bl	8005b30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001862:	f7ff fc99 	bl	8001198 <main>

08001866 <LoopForever>:

LoopForever:
    b LoopForever
 8001866:	e7fe      	b.n	8001866 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001868:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800186c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001870:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001874:	08009710 	.word	0x08009710
  ldr r2, =_sbss
 8001878:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 800187c:	20000488 	.word	0x20000488

08001880 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001880:	e7fe      	b.n	8001880 <ADC1_IRQHandler>
	...

08001884 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001888:	4b08      	ldr	r3, [pc, #32]	@ (80018ac <HAL_Init+0x28>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a07      	ldr	r2, [pc, #28]	@ (80018ac <HAL_Init+0x28>)
 800188e:	f043 0310 	orr.w	r3, r3, #16
 8001892:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001894:	2003      	movs	r0, #3
 8001896:	f000 f94f 	bl	8001b38 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800189a:	200f      	movs	r0, #15
 800189c:	f000 f808 	bl	80018b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018a0:	f7ff fde8 	bl	8001474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40022000 	.word	0x40022000

080018b0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b8:	4b12      	ldr	r3, [pc, #72]	@ (8001904 <HAL_InitTick+0x54>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b12      	ldr	r3, [pc, #72]	@ (8001908 <HAL_InitTick+0x58>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 f967 	bl	8001ba2 <HAL_SYSTICK_Config>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e00e      	b.n	80018fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b0f      	cmp	r3, #15
 80018e2:	d80a      	bhi.n	80018fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e4:	2200      	movs	r2, #0
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ec:	f000 f92f 	bl	8001b4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018f0:	4a06      	ldr	r2, [pc, #24]	@ (800190c <HAL_InitTick+0x5c>)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e000      	b.n	80018fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000018 	.word	0x20000018
 8001908:	20000020 	.word	0x20000020
 800190c:	2000001c 	.word	0x2000001c

08001910 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001914:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <HAL_IncTick+0x20>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <HAL_IncTick+0x24>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4413      	add	r3, r2
 8001920:	4a04      	ldr	r2, [pc, #16]	@ (8001934 <HAL_IncTick+0x24>)
 8001922:	6013      	str	r3, [r2, #0]
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20000020 	.word	0x20000020
 8001934:	20000338 	.word	0x20000338

08001938 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return uwTick;  
 800193c:	4b03      	ldr	r3, [pc, #12]	@ (800194c <HAL_GetTick+0x14>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	20000338 	.word	0x20000338

08001950 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001958:	f7ff ffee 	bl	8001938 <HAL_GetTick>
 800195c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001968:	d005      	beq.n	8001976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800196a:	4b0a      	ldr	r3, [pc, #40]	@ (8001994 <HAL_Delay+0x44>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4413      	add	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001976:	bf00      	nop
 8001978:	f7ff ffde 	bl	8001938 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	429a      	cmp	r2, r3
 8001986:	d8f7      	bhi.n	8001978 <HAL_Delay+0x28>
  {
  }
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000020 	.word	0x20000020

08001998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a8:	4b0c      	ldr	r3, [pc, #48]	@ (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019b4:	4013      	ands	r3, r2
 80019b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ca:	4a04      	ldr	r2, [pc, #16]	@ (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	60d3      	str	r3, [r2, #12]
}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e4:	4b04      	ldr	r3, [pc, #16]	@ (80019f8 <__NVIC_GetPriorityGrouping+0x18>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	0a1b      	lsrs	r3, r3, #8
 80019ea:	f003 0307 	and.w	r3, r3, #7
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	db0b      	blt.n	8001a26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	f003 021f 	and.w	r2, r3, #31
 8001a14:	4907      	ldr	r1, [pc, #28]	@ (8001a34 <__NVIC_EnableIRQ+0x38>)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	095b      	lsrs	r3, r3, #5
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000e100 	.word	0xe000e100

08001a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	6039      	str	r1, [r7, #0]
 8001a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	db0a      	blt.n	8001a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	490c      	ldr	r1, [pc, #48]	@ (8001a84 <__NVIC_SetPriority+0x4c>)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	0112      	lsls	r2, r2, #4
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a60:	e00a      	b.n	8001a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4908      	ldr	r1, [pc, #32]	@ (8001a88 <__NVIC_SetPriority+0x50>)
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	3b04      	subs	r3, #4
 8001a70:	0112      	lsls	r2, r2, #4
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	440b      	add	r3, r1
 8001a76:	761a      	strb	r2, [r3, #24]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000e100 	.word	0xe000e100
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	@ 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f1c3 0307 	rsb	r3, r3, #7
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	bf28      	it	cs
 8001aaa:	2304      	movcs	r3, #4
 8001aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	2b06      	cmp	r3, #6
 8001ab4:	d902      	bls.n	8001abc <NVIC_EncodePriority+0x30>
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3b03      	subs	r3, #3
 8001aba:	e000      	b.n	8001abe <NVIC_EncodePriority+0x32>
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43da      	mvns	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	401a      	ands	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	43d9      	mvns	r1, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	4313      	orrs	r3, r2
         );
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3724      	adds	r7, #36	@ 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
	...

08001af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b04:	d301      	bcc.n	8001b0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b06:	2301      	movs	r3, #1
 8001b08:	e00f      	b.n	8001b2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b34 <SysTick_Config+0x40>)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b12:	210f      	movs	r1, #15
 8001b14:	f04f 30ff 	mov.w	r0, #4294967295
 8001b18:	f7ff ff8e 	bl	8001a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b1c:	4b05      	ldr	r3, [pc, #20]	@ (8001b34 <SysTick_Config+0x40>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b22:	4b04      	ldr	r3, [pc, #16]	@ (8001b34 <SysTick_Config+0x40>)
 8001b24:	2207      	movs	r2, #7
 8001b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	e000e010 	.word	0xe000e010

08001b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff ff29 	bl	8001998 <__NVIC_SetPriorityGrouping>
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b086      	sub	sp, #24
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4603      	mov	r3, r0
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b60:	f7ff ff3e 	bl	80019e0 <__NVIC_GetPriorityGrouping>
 8001b64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	68b9      	ldr	r1, [r7, #8]
 8001b6a:	6978      	ldr	r0, [r7, #20]
 8001b6c:	f7ff ff8e 	bl	8001a8c <NVIC_EncodePriority>
 8001b70:	4602      	mov	r2, r0
 8001b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b76:	4611      	mov	r1, r2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff5d 	bl	8001a38 <__NVIC_SetPriority>
}
 8001b7e:	bf00      	nop
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff31 	bl	80019fc <__NVIC_EnableIRQ>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff ffa2 	bl	8001af4 <SysTick_Config>
 8001bb0:	4603      	mov	r3, r0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b087      	sub	sp, #28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bca:	e14e      	b.n	8001e6a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 8140 	beq.w	8001e64 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d005      	beq.n	8001bfc <HAL_GPIO_Init+0x40>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d130      	bne.n	8001c5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	2203      	movs	r2, #3
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4013      	ands	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	68da      	ldr	r2, [r3, #12]
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c32:	2201      	movs	r2, #1
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	091b      	lsrs	r3, r3, #4
 8001c48:	f003 0201 	and.w	r2, r3, #1
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	2b03      	cmp	r3, #3
 8001c68:	d017      	beq.n	8001c9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	2203      	movs	r2, #3
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d123      	bne.n	8001cee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	08da      	lsrs	r2, r3, #3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3208      	adds	r2, #8
 8001cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	220f      	movs	r2, #15
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	691a      	ldr	r2, [r3, #16]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	08da      	lsrs	r2, r3, #3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3208      	adds	r2, #8
 8001ce8:	6939      	ldr	r1, [r7, #16]
 8001cea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	4013      	ands	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0203 	and.w	r2, r3, #3
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 809a 	beq.w	8001e64 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d30:	4b55      	ldr	r3, [pc, #340]	@ (8001e88 <HAL_GPIO_Init+0x2cc>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	4a54      	ldr	r2, [pc, #336]	@ (8001e88 <HAL_GPIO_Init+0x2cc>)
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	6193      	str	r3, [r2, #24]
 8001d3c:	4b52      	ldr	r3, [pc, #328]	@ (8001e88 <HAL_GPIO_Init+0x2cc>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d48:	4a50      	ldr	r2, [pc, #320]	@ (8001e8c <HAL_GPIO_Init+0x2d0>)
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	089b      	lsrs	r3, r3, #2
 8001d4e:	3302      	adds	r3, #2
 8001d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	220f      	movs	r2, #15
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d72:	d013      	beq.n	8001d9c <HAL_GPIO_Init+0x1e0>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a46      	ldr	r2, [pc, #280]	@ (8001e90 <HAL_GPIO_Init+0x2d4>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d00d      	beq.n	8001d98 <HAL_GPIO_Init+0x1dc>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a45      	ldr	r2, [pc, #276]	@ (8001e94 <HAL_GPIO_Init+0x2d8>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d007      	beq.n	8001d94 <HAL_GPIO_Init+0x1d8>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a44      	ldr	r2, [pc, #272]	@ (8001e98 <HAL_GPIO_Init+0x2dc>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d101      	bne.n	8001d90 <HAL_GPIO_Init+0x1d4>
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e006      	b.n	8001d9e <HAL_GPIO_Init+0x1e2>
 8001d90:	2305      	movs	r3, #5
 8001d92:	e004      	b.n	8001d9e <HAL_GPIO_Init+0x1e2>
 8001d94:	2302      	movs	r3, #2
 8001d96:	e002      	b.n	8001d9e <HAL_GPIO_Init+0x1e2>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e000      	b.n	8001d9e <HAL_GPIO_Init+0x1e2>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	f002 0203 	and.w	r2, r2, #3
 8001da4:	0092      	lsls	r2, r2, #2
 8001da6:	4093      	lsls	r3, r2
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dae:	4937      	ldr	r1, [pc, #220]	@ (8001e8c <HAL_GPIO_Init+0x2d0>)
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	089b      	lsrs	r3, r3, #2
 8001db4:	3302      	adds	r3, #2
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dbc:	4b37      	ldr	r3, [pc, #220]	@ (8001e9c <HAL_GPIO_Init+0x2e0>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001de0:	4a2e      	ldr	r2, [pc, #184]	@ (8001e9c <HAL_GPIO_Init+0x2e0>)
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001de6:	4b2d      	ldr	r3, [pc, #180]	@ (8001e9c <HAL_GPIO_Init+0x2e0>)
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	43db      	mvns	r3, r3
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4013      	ands	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e0a:	4a24      	ldr	r2, [pc, #144]	@ (8001e9c <HAL_GPIO_Init+0x2e0>)
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e10:	4b22      	ldr	r3, [pc, #136]	@ (8001e9c <HAL_GPIO_Init+0x2e0>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e34:	4a19      	ldr	r2, [pc, #100]	@ (8001e9c <HAL_GPIO_Init+0x2e0>)
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e3a:	4b18      	ldr	r3, [pc, #96]	@ (8001e9c <HAL_GPIO_Init+0x2e0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	43db      	mvns	r3, r3
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	4013      	ands	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e5e:	4a0f      	ldr	r2, [pc, #60]	@ (8001e9c <HAL_GPIO_Init+0x2e0>)
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	3301      	adds	r3, #1
 8001e68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	fa22 f303 	lsr.w	r3, r2, r3
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f47f aea9 	bne.w	8001bcc <HAL_GPIO_Init+0x10>
  }
}
 8001e7a:	bf00      	nop
 8001e7c:	bf00      	nop
 8001e7e:	371c      	adds	r7, #28
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40010000 	.word	0x40010000
 8001e90:	48000400 	.word	0x48000400
 8001e94:	48000800 	.word	0x48000800
 8001e98:	48000c00 	.word	0x48000c00
 8001e9c:	40010400 	.word	0x40010400

08001ea0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001eaa:	4b08      	ldr	r3, [pc, #32]	@ (8001ecc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001eac:	695a      	ldr	r2, [r3, #20]
 8001eae:	88fb      	ldrh	r3, [r7, #6]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d006      	beq.n	8001ec4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001eb6:	4a05      	ldr	r2, [pc, #20]	@ (8001ecc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001eb8:	88fb      	ldrh	r3, [r7, #6]
 8001eba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ebc:	88fb      	ldrh	r3, [r7, #6]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 f806 	bl	8001ed0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40010400 	.word	0x40010400

08001ed0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b082      	sub	sp, #8
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e08d      	b.n	8002014 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d106      	bne.n	8001f12 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff fad5 	bl	80014bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2224      	movs	r2, #36	@ 0x24
 8001f16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0201 	bic.w	r2, r2, #1
 8001f28:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f36:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f46:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d107      	bne.n	8001f60 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f5c:	609a      	str	r2, [r3, #8]
 8001f5e:	e006      	b.n	8001f6e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001f6c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d108      	bne.n	8001f88 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	e007      	b.n	8001f98 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f96:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6812      	ldr	r2, [r2, #0]
 8001fa2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001fa6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001faa:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fba:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	691a      	ldr	r2, [r3, #16]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69d9      	ldr	r1, [r3, #28]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a1a      	ldr	r2, [r3, #32]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f042 0201 	orr.w	r2, r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2220      	movs	r2, #32
 8002000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b088      	sub	sp, #32
 8002020:	af02      	add	r7, sp, #8
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	4608      	mov	r0, r1
 8002026:	4611      	mov	r1, r2
 8002028:	461a      	mov	r2, r3
 800202a:	4603      	mov	r3, r0
 800202c:	817b      	strh	r3, [r7, #10]
 800202e:	460b      	mov	r3, r1
 8002030:	813b      	strh	r3, [r7, #8]
 8002032:	4613      	mov	r3, r2
 8002034:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b20      	cmp	r3, #32
 8002040:	f040 80f9 	bne.w	8002236 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002044:	6a3b      	ldr	r3, [r7, #32]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d002      	beq.n	8002050 <HAL_I2C_Mem_Write+0x34>
 800204a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800204c:	2b00      	cmp	r3, #0
 800204e:	d105      	bne.n	800205c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002056:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0ed      	b.n	8002238 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002062:	2b01      	cmp	r3, #1
 8002064:	d101      	bne.n	800206a <HAL_I2C_Mem_Write+0x4e>
 8002066:	2302      	movs	r3, #2
 8002068:	e0e6      	b.n	8002238 <HAL_I2C_Mem_Write+0x21c>
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002072:	f7ff fc61 	bl	8001938 <HAL_GetTick>
 8002076:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	2319      	movs	r3, #25
 800207e:	2201      	movs	r2, #1
 8002080:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f000 fac3 	bl	8002610 <I2C_WaitOnFlagUntilTimeout>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0d1      	b.n	8002238 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2221      	movs	r2, #33	@ 0x21
 8002098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2240      	movs	r2, #64	@ 0x40
 80020a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6a3a      	ldr	r2, [r7, #32]
 80020ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80020b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2200      	movs	r2, #0
 80020ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020bc:	88f8      	ldrh	r0, [r7, #6]
 80020be:	893a      	ldrh	r2, [r7, #8]
 80020c0:	8979      	ldrh	r1, [r7, #10]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	9301      	str	r3, [sp, #4]
 80020c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	4603      	mov	r3, r0
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 f9d3 	bl	8002478 <I2C_RequestMemoryWrite>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d005      	beq.n	80020e4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e0a9      	b.n	8002238 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	2bff      	cmp	r3, #255	@ 0xff
 80020ec:	d90e      	bls.n	800210c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	22ff      	movs	r2, #255	@ 0xff
 80020f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	8979      	ldrh	r1, [r7, #10]
 80020fc:	2300      	movs	r3, #0
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f000 fc47 	bl	8002998 <I2C_TransferConfig>
 800210a:	e00f      	b.n	800212c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002110:	b29a      	uxth	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800211a:	b2da      	uxtb	r2, r3
 800211c:	8979      	ldrh	r1, [r7, #10]
 800211e:	2300      	movs	r3, #0
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f000 fc36 	bl	8002998 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f000 fac6 	bl	80026c2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e07b      	b.n	8002238 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002144:	781a      	ldrb	r2, [r3, #0]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002150:	1c5a      	adds	r2, r3, #1
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800215a:	b29b      	uxth	r3, r3
 800215c:	3b01      	subs	r3, #1
 800215e:	b29a      	uxth	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002168:	3b01      	subs	r3, #1
 800216a:	b29a      	uxth	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002174:	b29b      	uxth	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d034      	beq.n	80021e4 <HAL_I2C_Mem_Write+0x1c8>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800217e:	2b00      	cmp	r3, #0
 8002180:	d130      	bne.n	80021e4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002188:	2200      	movs	r2, #0
 800218a:	2180      	movs	r1, #128	@ 0x80
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f000 fa3f 	bl	8002610 <I2C_WaitOnFlagUntilTimeout>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e04d      	b.n	8002238 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	2bff      	cmp	r3, #255	@ 0xff
 80021a4:	d90e      	bls.n	80021c4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	22ff      	movs	r2, #255	@ 0xff
 80021aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	8979      	ldrh	r1, [r7, #10]
 80021b4:	2300      	movs	r3, #0
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f000 fbeb 	bl	8002998 <I2C_TransferConfig>
 80021c2:	e00f      	b.n	80021e4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	8979      	ldrh	r1, [r7, #10]
 80021d6:	2300      	movs	r3, #0
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f000 fbda 	bl	8002998 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d19e      	bne.n	800212c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f000 faac 	bl	8002750 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e01a      	b.n	8002238 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2220      	movs	r2, #32
 8002208:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6859      	ldr	r1, [r3, #4]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	4b0a      	ldr	r3, [pc, #40]	@ (8002240 <HAL_I2C_Mem_Write+0x224>)
 8002216:	400b      	ands	r3, r1
 8002218:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2220      	movs	r2, #32
 800221e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002232:	2300      	movs	r3, #0
 8002234:	e000      	b.n	8002238 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002236:	2302      	movs	r3, #2
  }
}
 8002238:	4618      	mov	r0, r3
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	fe00e800 	.word	0xfe00e800

08002244 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af02      	add	r7, sp, #8
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	4608      	mov	r0, r1
 800224e:	4611      	mov	r1, r2
 8002250:	461a      	mov	r2, r3
 8002252:	4603      	mov	r3, r0
 8002254:	817b      	strh	r3, [r7, #10]
 8002256:	460b      	mov	r3, r1
 8002258:	813b      	strh	r3, [r7, #8]
 800225a:	4613      	mov	r3, r2
 800225c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b20      	cmp	r3, #32
 8002268:	f040 80fd 	bne.w	8002466 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800226c:	6a3b      	ldr	r3, [r7, #32]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d002      	beq.n	8002278 <HAL_I2C_Mem_Read+0x34>
 8002272:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002274:	2b00      	cmp	r3, #0
 8002276:	d105      	bne.n	8002284 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800227e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0f1      	b.n	8002468 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800228a:	2b01      	cmp	r3, #1
 800228c:	d101      	bne.n	8002292 <HAL_I2C_Mem_Read+0x4e>
 800228e:	2302      	movs	r3, #2
 8002290:	e0ea      	b.n	8002468 <HAL_I2C_Mem_Read+0x224>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800229a:	f7ff fb4d 	bl	8001938 <HAL_GetTick>
 800229e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	2319      	movs	r3, #25
 80022a6:	2201      	movs	r2, #1
 80022a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 f9af 	bl	8002610 <I2C_WaitOnFlagUntilTimeout>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0d5      	b.n	8002468 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2222      	movs	r2, #34	@ 0x22
 80022c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2240      	movs	r2, #64	@ 0x40
 80022c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6a3a      	ldr	r2, [r7, #32]
 80022d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80022dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022e4:	88f8      	ldrh	r0, [r7, #6]
 80022e6:	893a      	ldrh	r2, [r7, #8]
 80022e8:	8979      	ldrh	r1, [r7, #10]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	9301      	str	r3, [sp, #4]
 80022ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	4603      	mov	r3, r0
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f000 f913 	bl	8002520 <I2C_RequestMemoryRead>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e0ad      	b.n	8002468 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002310:	b29b      	uxth	r3, r3
 8002312:	2bff      	cmp	r3, #255	@ 0xff
 8002314:	d90e      	bls.n	8002334 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2201      	movs	r2, #1
 800231a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002320:	b2da      	uxtb	r2, r3
 8002322:	8979      	ldrh	r1, [r7, #10]
 8002324:	4b52      	ldr	r3, [pc, #328]	@ (8002470 <HAL_I2C_Mem_Read+0x22c>)
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f000 fb33 	bl	8002998 <I2C_TransferConfig>
 8002332:	e00f      	b.n	8002354 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002338:	b29a      	uxth	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002342:	b2da      	uxtb	r2, r3
 8002344:	8979      	ldrh	r1, [r7, #10]
 8002346:	4b4a      	ldr	r3, [pc, #296]	@ (8002470 <HAL_I2C_Mem_Read+0x22c>)
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f000 fb22 	bl	8002998 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800235a:	2200      	movs	r2, #0
 800235c:	2104      	movs	r1, #4
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 f956 	bl	8002610 <I2C_WaitOnFlagUntilTimeout>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e07c      	b.n	8002468 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002380:	1c5a      	adds	r2, r3, #1
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800238a:	3b01      	subs	r3, #1
 800238c:	b29a      	uxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002396:	b29b      	uxth	r3, r3
 8002398:	3b01      	subs	r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d034      	beq.n	8002414 <HAL_I2C_Mem_Read+0x1d0>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d130      	bne.n	8002414 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b8:	2200      	movs	r2, #0
 80023ba:	2180      	movs	r1, #128	@ 0x80
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f000 f927 	bl	8002610 <I2C_WaitOnFlagUntilTimeout>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e04d      	b.n	8002468 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	2bff      	cmp	r3, #255	@ 0xff
 80023d4:	d90e      	bls.n	80023f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2201      	movs	r2, #1
 80023da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	8979      	ldrh	r1, [r7, #10]
 80023e4:	2300      	movs	r3, #0
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 fad3 	bl	8002998 <I2C_TransferConfig>
 80023f2:	e00f      	b.n	8002414 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002402:	b2da      	uxtb	r2, r3
 8002404:	8979      	ldrh	r1, [r7, #10]
 8002406:	2300      	movs	r3, #0
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 fac2 	bl	8002998 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002418:	b29b      	uxth	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d19a      	bne.n	8002354 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f000 f994 	bl	8002750 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e01a      	b.n	8002468 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2220      	movs	r2, #32
 8002438:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6859      	ldr	r1, [r3, #4]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4b0b      	ldr	r3, [pc, #44]	@ (8002474 <HAL_I2C_Mem_Read+0x230>)
 8002446:	400b      	ands	r3, r1
 8002448:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2220      	movs	r2, #32
 800244e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	e000      	b.n	8002468 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002466:	2302      	movs	r3, #2
  }
}
 8002468:	4618      	mov	r0, r3
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	80002400 	.word	0x80002400
 8002474:	fe00e800 	.word	0xfe00e800

08002478 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af02      	add	r7, sp, #8
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	4608      	mov	r0, r1
 8002482:	4611      	mov	r1, r2
 8002484:	461a      	mov	r2, r3
 8002486:	4603      	mov	r3, r0
 8002488:	817b      	strh	r3, [r7, #10]
 800248a:	460b      	mov	r3, r1
 800248c:	813b      	strh	r3, [r7, #8]
 800248e:	4613      	mov	r3, r2
 8002490:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002492:	88fb      	ldrh	r3, [r7, #6]
 8002494:	b2da      	uxtb	r2, r3
 8002496:	8979      	ldrh	r1, [r7, #10]
 8002498:	4b20      	ldr	r3, [pc, #128]	@ (800251c <I2C_RequestMemoryWrite+0xa4>)
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 fa79 	bl	8002998 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024a6:	69fa      	ldr	r2, [r7, #28]
 80024a8:	69b9      	ldr	r1, [r7, #24]
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f000 f909 	bl	80026c2 <I2C_WaitOnTXISFlagUntilTimeout>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e02c      	b.n	8002514 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024ba:	88fb      	ldrh	r3, [r7, #6]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d105      	bne.n	80024cc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024c0:	893b      	ldrh	r3, [r7, #8]
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80024ca:	e015      	b.n	80024f8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80024cc:	893b      	ldrh	r3, [r7, #8]
 80024ce:	0a1b      	lsrs	r3, r3, #8
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024da:	69fa      	ldr	r2, [r7, #28]
 80024dc:	69b9      	ldr	r1, [r7, #24]
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 f8ef 	bl	80026c2 <I2C_WaitOnTXISFlagUntilTimeout>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e012      	b.n	8002514 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024ee:	893b      	ldrh	r3, [r7, #8]
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	2200      	movs	r2, #0
 8002500:	2180      	movs	r1, #128	@ 0x80
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 f884 	bl	8002610 <I2C_WaitOnFlagUntilTimeout>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	80002000 	.word	0x80002000

08002520 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af02      	add	r7, sp, #8
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	4608      	mov	r0, r1
 800252a:	4611      	mov	r1, r2
 800252c:	461a      	mov	r2, r3
 800252e:	4603      	mov	r3, r0
 8002530:	817b      	strh	r3, [r7, #10]
 8002532:	460b      	mov	r3, r1
 8002534:	813b      	strh	r3, [r7, #8]
 8002536:	4613      	mov	r3, r2
 8002538:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800253a:	88fb      	ldrh	r3, [r7, #6]
 800253c:	b2da      	uxtb	r2, r3
 800253e:	8979      	ldrh	r1, [r7, #10]
 8002540:	4b20      	ldr	r3, [pc, #128]	@ (80025c4 <I2C_RequestMemoryRead+0xa4>)
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	2300      	movs	r3, #0
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 fa26 	bl	8002998 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800254c:	69fa      	ldr	r2, [r7, #28]
 800254e:	69b9      	ldr	r1, [r7, #24]
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f000 f8b6 	bl	80026c2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e02c      	b.n	80025ba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002560:	88fb      	ldrh	r3, [r7, #6]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d105      	bne.n	8002572 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002566:	893b      	ldrh	r3, [r7, #8]
 8002568:	b2da      	uxtb	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002570:	e015      	b.n	800259e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002572:	893b      	ldrh	r3, [r7, #8]
 8002574:	0a1b      	lsrs	r3, r3, #8
 8002576:	b29b      	uxth	r3, r3
 8002578:	b2da      	uxtb	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002580:	69fa      	ldr	r2, [r7, #28]
 8002582:	69b9      	ldr	r1, [r7, #24]
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f000 f89c 	bl	80026c2 <I2C_WaitOnTXISFlagUntilTimeout>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e012      	b.n	80025ba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002594:	893b      	ldrh	r3, [r7, #8]
 8002596:	b2da      	uxtb	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	2200      	movs	r2, #0
 80025a6:	2140      	movs	r1, #64	@ 0x40
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 f831 	bl	8002610 <I2C_WaitOnFlagUntilTimeout>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e000      	b.n	80025ba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	80002000 	.word	0x80002000

080025c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d103      	bne.n	80025e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2200      	movs	r2, #0
 80025e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d007      	beq.n	8002604 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	699a      	ldr	r2, [r3, #24]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 0201 	orr.w	r2, r2, #1
 8002602:	619a      	str	r2, [r3, #24]
  }
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	4613      	mov	r3, r2
 800261e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002620:	e03b      	b.n	800269a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	6839      	ldr	r1, [r7, #0]
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 f8d6 	bl	80027d8 <I2C_IsErrorOccurred>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e041      	b.n	80026ba <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263c:	d02d      	beq.n	800269a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800263e:	f7ff f97b 	bl	8001938 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d302      	bcc.n	8002654 <I2C_WaitOnFlagUntilTimeout+0x44>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d122      	bne.n	800269a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	699a      	ldr	r2, [r3, #24]
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	4013      	ands	r3, r2
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	429a      	cmp	r2, r3
 8002662:	bf0c      	ite	eq
 8002664:	2301      	moveq	r3, #1
 8002666:	2300      	movne	r3, #0
 8002668:	b2db      	uxtb	r3, r3
 800266a:	461a      	mov	r2, r3
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	429a      	cmp	r2, r3
 8002670:	d113      	bne.n	800269a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002676:	f043 0220 	orr.w	r2, r3, #32
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2220      	movs	r2, #32
 8002682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e00f      	b.n	80026ba <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	699a      	ldr	r2, [r3, #24]
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	4013      	ands	r3, r2
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	bf0c      	ite	eq
 80026aa:	2301      	moveq	r3, #1
 80026ac:	2300      	movne	r3, #0
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	461a      	mov	r2, r3
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d0b4      	beq.n	8002622 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b084      	sub	sp, #16
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	60f8      	str	r0, [r7, #12]
 80026ca:	60b9      	str	r1, [r7, #8]
 80026cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026ce:	e033      	b.n	8002738 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	68b9      	ldr	r1, [r7, #8]
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f000 f87f 	bl	80027d8 <I2C_IsErrorOccurred>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e031      	b.n	8002748 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ea:	d025      	beq.n	8002738 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ec:	f7ff f924 	bl	8001938 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d302      	bcc.n	8002702 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d11a      	bne.n	8002738 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b02      	cmp	r3, #2
 800270e:	d013      	beq.n	8002738 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002714:	f043 0220 	orr.w	r2, r3, #32
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2220      	movs	r2, #32
 8002720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e007      	b.n	8002748 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b02      	cmp	r3, #2
 8002744:	d1c4      	bne.n	80026d0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800275c:	e02f      	b.n	80027be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	68b9      	ldr	r1, [r7, #8]
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 f838 	bl	80027d8 <I2C_IsErrorOccurred>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e02d      	b.n	80027ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002772:	f7ff f8e1 	bl	8001938 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	68ba      	ldr	r2, [r7, #8]
 800277e:	429a      	cmp	r2, r3
 8002780:	d302      	bcc.n	8002788 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d11a      	bne.n	80027be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	f003 0320 	and.w	r3, r3, #32
 8002792:	2b20      	cmp	r3, #32
 8002794:	d013      	beq.n	80027be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279a:	f043 0220 	orr.w	r2, r3, #32
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2220      	movs	r2, #32
 80027a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e007      	b.n	80027ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	f003 0320 	and.w	r3, r3, #32
 80027c8:	2b20      	cmp	r3, #32
 80027ca:	d1c8      	bne.n	800275e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08a      	sub	sp, #40	@ 0x28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027e4:	2300      	movs	r3, #0
 80027e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80027f2:	2300      	movs	r3, #0
 80027f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	f003 0310 	and.w	r3, r3, #16
 8002800:	2b00      	cmp	r3, #0
 8002802:	d068      	beq.n	80028d6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2210      	movs	r2, #16
 800280a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800280c:	e049      	b.n	80028a2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002814:	d045      	beq.n	80028a2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002816:	f7ff f88f 	bl	8001938 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	429a      	cmp	r2, r3
 8002824:	d302      	bcc.n	800282c <I2C_IsErrorOccurred+0x54>
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d13a      	bne.n	80028a2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002836:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800283e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800284a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800284e:	d121      	bne.n	8002894 <I2C_IsErrorOccurred+0xbc>
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002856:	d01d      	beq.n	8002894 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002858:	7cfb      	ldrb	r3, [r7, #19]
 800285a:	2b20      	cmp	r3, #32
 800285c:	d01a      	beq.n	8002894 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800286c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800286e:	f7ff f863 	bl	8001938 <HAL_GetTick>
 8002872:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002874:	e00e      	b.n	8002894 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002876:	f7ff f85f 	bl	8001938 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b19      	cmp	r3, #25
 8002882:	d907      	bls.n	8002894 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002884:	6a3b      	ldr	r3, [r7, #32]
 8002886:	f043 0320 	orr.w	r3, r3, #32
 800288a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002892:	e006      	b.n	80028a2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	f003 0320 	and.w	r3, r3, #32
 800289e:	2b20      	cmp	r3, #32
 80028a0:	d1e9      	bne.n	8002876 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	f003 0320 	and.w	r3, r3, #32
 80028ac:	2b20      	cmp	r3, #32
 80028ae:	d003      	beq.n	80028b8 <I2C_IsErrorOccurred+0xe0>
 80028b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0aa      	beq.n	800280e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80028b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d103      	bne.n	80028c8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2220      	movs	r2, #32
 80028c6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	f043 0304 	orr.w	r3, r3, #4
 80028ce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00b      	beq.n	8002900 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80028e8:	6a3b      	ldr	r3, [r7, #32]
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00b      	beq.n	8002922 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	f043 0308 	orr.w	r3, r3, #8
 8002910:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800291a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00b      	beq.n	8002944 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800292c:	6a3b      	ldr	r3, [r7, #32]
 800292e:	f043 0302 	orr.w	r3, r3, #2
 8002932:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800293c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002944:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002948:	2b00      	cmp	r3, #0
 800294a:	d01c      	beq.n	8002986 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f7ff fe3b 	bl	80025c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6859      	ldr	r1, [r3, #4]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	4b0d      	ldr	r3, [pc, #52]	@ (8002994 <I2C_IsErrorOccurred+0x1bc>)
 800295e:	400b      	ands	r3, r1
 8002960:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	431a      	orrs	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2220      	movs	r2, #32
 8002972:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002986:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800298a:	4618      	mov	r0, r3
 800298c:	3728      	adds	r7, #40	@ 0x28
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	fe00e800 	.word	0xfe00e800

08002998 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002998:	b480      	push	{r7}
 800299a:	b087      	sub	sp, #28
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	607b      	str	r3, [r7, #4]
 80029a2:	460b      	mov	r3, r1
 80029a4:	817b      	strh	r3, [r7, #10]
 80029a6:	4613      	mov	r3, r2
 80029a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029aa:	897b      	ldrh	r3, [r7, #10]
 80029ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80029b0:	7a7b      	ldrb	r3, [r7, #9]
 80029b2:	041b      	lsls	r3, r3, #16
 80029b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029b8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80029c6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	6a3b      	ldr	r3, [r7, #32]
 80029d0:	0d5b      	lsrs	r3, r3, #21
 80029d2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80029d6:	4b08      	ldr	r3, [pc, #32]	@ (80029f8 <I2C_TransferConfig+0x60>)
 80029d8:	430b      	orrs	r3, r1
 80029da:	43db      	mvns	r3, r3
 80029dc:	ea02 0103 	and.w	r1, r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80029ea:	bf00      	nop
 80029ec:	371c      	adds	r7, #28
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	03ff63ff 	.word	0x03ff63ff

080029fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b20      	cmp	r3, #32
 8002a10:	d138      	bne.n	8002a84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e032      	b.n	8002a86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2224      	movs	r2, #36	@ 0x24
 8002a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0201 	bic.w	r2, r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6819      	ldr	r1, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0201 	orr.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2220      	movs	r2, #32
 8002a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	e000      	b.n	8002a86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a84:	2302      	movs	r3, #2
  }
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b085      	sub	sp, #20
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b20      	cmp	r3, #32
 8002aa6:	d139      	bne.n	8002b1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d101      	bne.n	8002ab6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e033      	b.n	8002b1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2224      	movs	r2, #36	@ 0x24
 8002ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0201 	bic.w	r2, r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002ae4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	021b      	lsls	r3, r3, #8
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0201 	orr.w	r2, r2, #1
 8002b06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	e000      	b.n	8002b1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b1c:	2302      	movs	r3, #2
  }
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
	...

08002b2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b3c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b42:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d102      	bne.n	8002b52 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	f001 b823 	b.w	8003b98 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f000 817d 	beq.w	8002e62 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b68:	4bbc      	ldr	r3, [pc, #752]	@ (8002e5c <HAL_RCC_OscConfig+0x330>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 030c 	and.w	r3, r3, #12
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d00c      	beq.n	8002b8e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b74:	4bb9      	ldr	r3, [pc, #740]	@ (8002e5c <HAL_RCC_OscConfig+0x330>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 030c 	and.w	r3, r3, #12
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d15c      	bne.n	8002c3a <HAL_RCC_OscConfig+0x10e>
 8002b80:	4bb6      	ldr	r3, [pc, #728]	@ (8002e5c <HAL_RCC_OscConfig+0x330>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b8c:	d155      	bne.n	8002c3a <HAL_RCC_OscConfig+0x10e>
 8002b8e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b92:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b96:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002b9a:	fa93 f3a3 	rbit	r3, r3
 8002b9e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ba2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba6:	fab3 f383 	clz	r3, r3
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	095b      	lsrs	r3, r3, #5
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d102      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x94>
 8002bba:	4ba8      	ldr	r3, [pc, #672]	@ (8002e5c <HAL_RCC_OscConfig+0x330>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	e015      	b.n	8002bec <HAL_RCC_OscConfig+0xc0>
 8002bc0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bc4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002bcc:	fa93 f3a3 	rbit	r3, r3
 8002bd0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002bd4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bd8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002bdc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002be0:	fa93 f3a3 	rbit	r3, r3
 8002be4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002be8:	4b9c      	ldr	r3, [pc, #624]	@ (8002e5c <HAL_RCC_OscConfig+0x330>)
 8002bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002bf0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002bf4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002bf8:	fa92 f2a2 	rbit	r2, r2
 8002bfc:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002c00:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002c04:	fab2 f282 	clz	r2, r2
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	f042 0220 	orr.w	r2, r2, #32
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	f002 021f 	and.w	r2, r2, #31
 8002c14:	2101      	movs	r1, #1
 8002c16:	fa01 f202 	lsl.w	r2, r1, r2
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 811f 	beq.w	8002e60 <HAL_RCC_OscConfig+0x334>
 8002c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f040 8116 	bne.w	8002e60 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	f000 bfaf 	b.w	8003b98 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c4a:	d106      	bne.n	8002c5a <HAL_RCC_OscConfig+0x12e>
 8002c4c:	4b83      	ldr	r3, [pc, #524]	@ (8002e5c <HAL_RCC_OscConfig+0x330>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a82      	ldr	r2, [pc, #520]	@ (8002e5c <HAL_RCC_OscConfig+0x330>)
 8002c52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c56:	6013      	str	r3, [r2, #0]
 8002c58:	e036      	b.n	8002cc8 <HAL_RCC_OscConfig+0x19c>
 8002c5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10c      	bne.n	8002c84 <HAL_RCC_OscConfig+0x158>
 8002c6a:	4b7c      	ldr	r3, [pc, #496]	@ (8002e5c <HAL_RCC_OscConfig+0x330>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a7b      	ldr	r2, [pc, #492]	@ (8002e5c <HAL_RCC_OscConfig+0x330>)
 8002c70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	4b79      	ldr	r3, [pc, #484]	@ (8002e5c <HAL_RCC_OscConfig+0x330>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a78      	ldr	r2, [pc, #480]	@ (8002e5c <HAL_RCC_OscConfig+0x330>)
 8002c7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	e021      	b.n	8002cc8 <HAL_RCC_OscConfig+0x19c>
 8002c84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c88:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c94:	d10c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x184>
 8002c96:	4b71      	ldr	r3, [pc, #452]	@ (8002e5c <HAL_RCC_OscConfig+0x330>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a70      	ldr	r2, [pc, #448]	@ (8002e5c <HAL_RCC_OscConfig+0x330>)
 8002c9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	4b6e      	ldr	r3, [pc, #440]	@ (8002e5c <HAL_RCC_OscConfig+0x330>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a6d      	ldr	r2, [pc, #436]	@ (8002e5c <HAL_RCC_OscConfig+0x330>)
 8002ca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	e00b      	b.n	8002cc8 <HAL_RCC_OscConfig+0x19c>
 8002cb0:	4b6a      	ldr	r3, [pc, #424]	@ (8002e5c <HAL_RCC_OscConfig+0x330>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a69      	ldr	r2, [pc, #420]	@ (8002e5c <HAL_RCC_OscConfig+0x330>)
 8002cb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	4b67      	ldr	r3, [pc, #412]	@ (8002e5c <HAL_RCC_OscConfig+0x330>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a66      	ldr	r2, [pc, #408]	@ (8002e5c <HAL_RCC_OscConfig+0x330>)
 8002cc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cc6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cc8:	4b64      	ldr	r3, [pc, #400]	@ (8002e5c <HAL_RCC_OscConfig+0x330>)
 8002cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ccc:	f023 020f 	bic.w	r2, r3, #15
 8002cd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	495f      	ldr	r1, [pc, #380]	@ (8002e5c <HAL_RCC_OscConfig+0x330>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ce2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d059      	beq.n	8002da6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf2:	f7fe fe21 	bl	8001938 <HAL_GetTick>
 8002cf6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfa:	e00a      	b.n	8002d12 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cfc:	f7fe fe1c 	bl	8001938 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b64      	cmp	r3, #100	@ 0x64
 8002d0a:	d902      	bls.n	8002d12 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	f000 bf43 	b.w	8003b98 <HAL_RCC_OscConfig+0x106c>
 8002d12:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d16:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002d1e:	fa93 f3a3 	rbit	r3, r3
 8002d22:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002d26:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2a:	fab3 f383 	clz	r3, r3
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	095b      	lsrs	r3, r3, #5
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d102      	bne.n	8002d44 <HAL_RCC_OscConfig+0x218>
 8002d3e:	4b47      	ldr	r3, [pc, #284]	@ (8002e5c <HAL_RCC_OscConfig+0x330>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	e015      	b.n	8002d70 <HAL_RCC_OscConfig+0x244>
 8002d44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d48:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002d50:	fa93 f3a3 	rbit	r3, r3
 8002d54:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002d58:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d5c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002d60:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002d64:	fa93 f3a3 	rbit	r3, r3
 8002d68:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002d6c:	4b3b      	ldr	r3, [pc, #236]	@ (8002e5c <HAL_RCC_OscConfig+0x330>)
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d70:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d74:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002d78:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002d7c:	fa92 f2a2 	rbit	r2, r2
 8002d80:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002d84:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002d88:	fab2 f282 	clz	r2, r2
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	f042 0220 	orr.w	r2, r2, #32
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	f002 021f 	and.w	r2, r2, #31
 8002d98:	2101      	movs	r1, #1
 8002d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0ab      	beq.n	8002cfc <HAL_RCC_OscConfig+0x1d0>
 8002da4:	e05d      	b.n	8002e62 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da6:	f7fe fdc7 	bl	8001938 <HAL_GetTick>
 8002daa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dae:	e00a      	b.n	8002dc6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002db0:	f7fe fdc2 	bl	8001938 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b64      	cmp	r3, #100	@ 0x64
 8002dbe:	d902      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	f000 bee9 	b.w	8003b98 <HAL_RCC_OscConfig+0x106c>
 8002dc6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002dca:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dce:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002dd2:	fa93 f3a3 	rbit	r3, r3
 8002dd6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002dda:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dde:	fab3 f383 	clz	r3, r3
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	095b      	lsrs	r3, r3, #5
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d102      	bne.n	8002df8 <HAL_RCC_OscConfig+0x2cc>
 8002df2:	4b1a      	ldr	r3, [pc, #104]	@ (8002e5c <HAL_RCC_OscConfig+0x330>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	e015      	b.n	8002e24 <HAL_RCC_OscConfig+0x2f8>
 8002df8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002dfc:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e00:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002e04:	fa93 f3a3 	rbit	r3, r3
 8002e08:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002e0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e10:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002e14:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002e18:	fa93 f3a3 	rbit	r3, r3
 8002e1c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002e20:	4b0e      	ldr	r3, [pc, #56]	@ (8002e5c <HAL_RCC_OscConfig+0x330>)
 8002e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e24:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e28:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002e2c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002e30:	fa92 f2a2 	rbit	r2, r2
 8002e34:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002e38:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002e3c:	fab2 f282 	clz	r2, r2
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	f042 0220 	orr.w	r2, r2, #32
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	f002 021f 	and.w	r2, r2, #31
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e52:	4013      	ands	r3, r2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1ab      	bne.n	8002db0 <HAL_RCC_OscConfig+0x284>
 8002e58:	e003      	b.n	8002e62 <HAL_RCC_OscConfig+0x336>
 8002e5a:	bf00      	nop
 8002e5c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e66:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 817d 	beq.w	8003172 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e78:	4ba6      	ldr	r3, [pc, #664]	@ (8003114 <HAL_RCC_OscConfig+0x5e8>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f003 030c 	and.w	r3, r3, #12
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00b      	beq.n	8002e9c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e84:	4ba3      	ldr	r3, [pc, #652]	@ (8003114 <HAL_RCC_OscConfig+0x5e8>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 030c 	and.w	r3, r3, #12
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d172      	bne.n	8002f76 <HAL_RCC_OscConfig+0x44a>
 8002e90:	4ba0      	ldr	r3, [pc, #640]	@ (8003114 <HAL_RCC_OscConfig+0x5e8>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d16c      	bne.n	8002f76 <HAL_RCC_OscConfig+0x44a>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002ea6:	fa93 f3a3 	rbit	r3, r3
 8002eaa:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002eae:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eb2:	fab3 f383 	clz	r3, r3
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	095b      	lsrs	r3, r3, #5
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d102      	bne.n	8002ecc <HAL_RCC_OscConfig+0x3a0>
 8002ec6:	4b93      	ldr	r3, [pc, #588]	@ (8003114 <HAL_RCC_OscConfig+0x5e8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	e013      	b.n	8002ef4 <HAL_RCC_OscConfig+0x3c8>
 8002ecc:	2302      	movs	r3, #2
 8002ece:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002ed6:	fa93 f3a3 	rbit	r3, r3
 8002eda:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002ede:	2302      	movs	r3, #2
 8002ee0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002ee4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002ee8:	fa93 f3a3 	rbit	r3, r3
 8002eec:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002ef0:	4b88      	ldr	r3, [pc, #544]	@ (8003114 <HAL_RCC_OscConfig+0x5e8>)
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002efa:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002efe:	fa92 f2a2 	rbit	r2, r2
 8002f02:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002f06:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002f0a:	fab2 f282 	clz	r2, r2
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	f042 0220 	orr.w	r2, r2, #32
 8002f14:	b2d2      	uxtb	r2, r2
 8002f16:	f002 021f 	and.w	r2, r2, #31
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f20:	4013      	ands	r3, r2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00a      	beq.n	8002f3c <HAL_RCC_OscConfig+0x410>
 8002f26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d002      	beq.n	8002f3c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	f000 be2e 	b.w	8003b98 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f3c:	4b75      	ldr	r3, [pc, #468]	@ (8003114 <HAL_RCC_OscConfig+0x5e8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f48:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	21f8      	movs	r1, #248	@ 0xf8
 8002f52:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f56:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002f5a:	fa91 f1a1 	rbit	r1, r1
 8002f5e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002f62:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002f66:	fab1 f181 	clz	r1, r1
 8002f6a:	b2c9      	uxtb	r1, r1
 8002f6c:	408b      	lsls	r3, r1
 8002f6e:	4969      	ldr	r1, [pc, #420]	@ (8003114 <HAL_RCC_OscConfig+0x5e8>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f74:	e0fd      	b.n	8003172 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 8088 	beq.w	8003098 <HAL_RCC_OscConfig+0x56c>
 8002f88:	2301      	movs	r3, #1
 8002f8a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002f92:	fa93 f3a3 	rbit	r3, r3
 8002f96:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002f9a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f9e:	fab3 f383 	clz	r3, r3
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002fa8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	461a      	mov	r2, r3
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb4:	f7fe fcc0 	bl	8001938 <HAL_GetTick>
 8002fb8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fbc:	e00a      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fbe:	f7fe fcbb 	bl	8001938 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d902      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	f000 bde2 	b.w	8003b98 <HAL_RCC_OscConfig+0x106c>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fda:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002fde:	fa93 f3a3 	rbit	r3, r3
 8002fe2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002fe6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fea:	fab3 f383 	clz	r3, r3
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	095b      	lsrs	r3, r3, #5
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d102      	bne.n	8003004 <HAL_RCC_OscConfig+0x4d8>
 8002ffe:	4b45      	ldr	r3, [pc, #276]	@ (8003114 <HAL_RCC_OscConfig+0x5e8>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	e013      	b.n	800302c <HAL_RCC_OscConfig+0x500>
 8003004:	2302      	movs	r3, #2
 8003006:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800300e:	fa93 f3a3 	rbit	r3, r3
 8003012:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003016:	2302      	movs	r3, #2
 8003018:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800301c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003020:	fa93 f3a3 	rbit	r3, r3
 8003024:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003028:	4b3a      	ldr	r3, [pc, #232]	@ (8003114 <HAL_RCC_OscConfig+0x5e8>)
 800302a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302c:	2202      	movs	r2, #2
 800302e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003032:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003036:	fa92 f2a2 	rbit	r2, r2
 800303a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800303e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003042:	fab2 f282 	clz	r2, r2
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	f042 0220 	orr.w	r2, r2, #32
 800304c:	b2d2      	uxtb	r2, r2
 800304e:	f002 021f 	and.w	r2, r2, #31
 8003052:	2101      	movs	r1, #1
 8003054:	fa01 f202 	lsl.w	r2, r1, r2
 8003058:	4013      	ands	r3, r2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0af      	beq.n	8002fbe <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305e:	4b2d      	ldr	r3, [pc, #180]	@ (8003114 <HAL_RCC_OscConfig+0x5e8>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003066:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800306a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	21f8      	movs	r1, #248	@ 0xf8
 8003074:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003078:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800307c:	fa91 f1a1 	rbit	r1, r1
 8003080:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003084:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003088:	fab1 f181 	clz	r1, r1
 800308c:	b2c9      	uxtb	r1, r1
 800308e:	408b      	lsls	r3, r1
 8003090:	4920      	ldr	r1, [pc, #128]	@ (8003114 <HAL_RCC_OscConfig+0x5e8>)
 8003092:	4313      	orrs	r3, r2
 8003094:	600b      	str	r3, [r1, #0]
 8003096:	e06c      	b.n	8003172 <HAL_RCC_OscConfig+0x646>
 8003098:	2301      	movs	r3, #1
 800309a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80030a2:	fa93 f3a3 	rbit	r3, r3
 80030a6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80030aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ae:	fab3 f383 	clz	r3, r3
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80030b8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	461a      	mov	r2, r3
 80030c0:	2300      	movs	r3, #0
 80030c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c4:	f7fe fc38 	bl	8001938 <HAL_GetTick>
 80030c8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030cc:	e00a      	b.n	80030e4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ce:	f7fe fc33 	bl	8001938 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d902      	bls.n	80030e4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	f000 bd5a 	b.w	8003b98 <HAL_RCC_OscConfig+0x106c>
 80030e4:	2302      	movs	r3, #2
 80030e6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80030ee:	fa93 f3a3 	rbit	r3, r3
 80030f2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80030f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030fa:	fab3 f383 	clz	r3, r3
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	095b      	lsrs	r3, r3, #5
 8003102:	b2db      	uxtb	r3, r3
 8003104:	f043 0301 	orr.w	r3, r3, #1
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b01      	cmp	r3, #1
 800310c:	d104      	bne.n	8003118 <HAL_RCC_OscConfig+0x5ec>
 800310e:	4b01      	ldr	r3, [pc, #4]	@ (8003114 <HAL_RCC_OscConfig+0x5e8>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	e015      	b.n	8003140 <HAL_RCC_OscConfig+0x614>
 8003114:	40021000 	.word	0x40021000
 8003118:	2302      	movs	r3, #2
 800311a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003122:	fa93 f3a3 	rbit	r3, r3
 8003126:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800312a:	2302      	movs	r3, #2
 800312c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003130:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003134:	fa93 f3a3 	rbit	r3, r3
 8003138:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800313c:	4bc8      	ldr	r3, [pc, #800]	@ (8003460 <HAL_RCC_OscConfig+0x934>)
 800313e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003140:	2202      	movs	r2, #2
 8003142:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003146:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800314a:	fa92 f2a2 	rbit	r2, r2
 800314e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003152:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003156:	fab2 f282 	clz	r2, r2
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	f042 0220 	orr.w	r2, r2, #32
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	f002 021f 	and.w	r2, r2, #31
 8003166:	2101      	movs	r1, #1
 8003168:	fa01 f202 	lsl.w	r2, r1, r2
 800316c:	4013      	ands	r3, r2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1ad      	bne.n	80030ce <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003172:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003176:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 8110 	beq.w	80033a8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003188:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800318c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d079      	beq.n	800328c <HAL_RCC_OscConfig+0x760>
 8003198:	2301      	movs	r3, #1
 800319a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80031a2:	fa93 f3a3 	rbit	r3, r3
 80031a6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80031aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ae:	fab3 f383 	clz	r3, r3
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	461a      	mov	r2, r3
 80031b6:	4bab      	ldr	r3, [pc, #684]	@ (8003464 <HAL_RCC_OscConfig+0x938>)
 80031b8:	4413      	add	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	461a      	mov	r2, r3
 80031be:	2301      	movs	r3, #1
 80031c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c2:	f7fe fbb9 	bl	8001938 <HAL_GetTick>
 80031c6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ca:	e00a      	b.n	80031e2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031cc:	f7fe fbb4 	bl	8001938 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d902      	bls.n	80031e2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	f000 bcdb 	b.w	8003b98 <HAL_RCC_OscConfig+0x106c>
 80031e2:	2302      	movs	r3, #2
 80031e4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80031ec:	fa93 f3a3 	rbit	r3, r3
 80031f0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80031f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80031fc:	2202      	movs	r2, #2
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003204:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	fa93 f2a3 	rbit	r2, r3
 800320e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003212:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800321c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003220:	2202      	movs	r2, #2
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003228:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	fa93 f2a3 	rbit	r2, r3
 8003232:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003236:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800323a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800323c:	4b88      	ldr	r3, [pc, #544]	@ (8003460 <HAL_RCC_OscConfig+0x934>)
 800323e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003240:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003244:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003248:	2102      	movs	r1, #2
 800324a:	6019      	str	r1, [r3, #0]
 800324c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003250:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	fa93 f1a3 	rbit	r1, r3
 800325a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800325e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003262:	6019      	str	r1, [r3, #0]
  return result;
 8003264:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003268:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	fab3 f383 	clz	r3, r3
 8003272:	b2db      	uxtb	r3, r3
 8003274:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003278:	b2db      	uxtb	r3, r3
 800327a:	f003 031f 	and.w	r3, r3, #31
 800327e:	2101      	movs	r1, #1
 8003280:	fa01 f303 	lsl.w	r3, r1, r3
 8003284:	4013      	ands	r3, r2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0a0      	beq.n	80031cc <HAL_RCC_OscConfig+0x6a0>
 800328a:	e08d      	b.n	80033a8 <HAL_RCC_OscConfig+0x87c>
 800328c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003290:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003294:	2201      	movs	r2, #1
 8003296:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003298:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800329c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	fa93 f2a3 	rbit	r2, r3
 80032a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032aa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80032ae:	601a      	str	r2, [r3, #0]
  return result;
 80032b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032b4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80032b8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032ba:	fab3 f383 	clz	r3, r3
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	461a      	mov	r2, r3
 80032c2:	4b68      	ldr	r3, [pc, #416]	@ (8003464 <HAL_RCC_OscConfig+0x938>)
 80032c4:	4413      	add	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	461a      	mov	r2, r3
 80032ca:	2300      	movs	r3, #0
 80032cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ce:	f7fe fb33 	bl	8001938 <HAL_GetTick>
 80032d2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d6:	e00a      	b.n	80032ee <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032d8:	f7fe fb2e 	bl	8001938 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d902      	bls.n	80032ee <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	f000 bc55 	b.w	8003b98 <HAL_RCC_OscConfig+0x106c>
 80032ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80032f6:	2202      	movs	r2, #2
 80032f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032fe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	fa93 f2a3 	rbit	r2, r3
 8003308:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800330c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003316:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800331a:	2202      	movs	r2, #2
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003322:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	fa93 f2a3 	rbit	r2, r3
 800332c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003330:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800333a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800333e:	2202      	movs	r2, #2
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003346:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	fa93 f2a3 	rbit	r2, r3
 8003350:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003354:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003358:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800335a:	4b41      	ldr	r3, [pc, #260]	@ (8003460 <HAL_RCC_OscConfig+0x934>)
 800335c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800335e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003362:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003366:	2102      	movs	r1, #2
 8003368:	6019      	str	r1, [r3, #0]
 800336a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800336e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	fa93 f1a3 	rbit	r1, r3
 8003378:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800337c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003380:	6019      	str	r1, [r3, #0]
  return result;
 8003382:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003386:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	fab3 f383 	clz	r3, r3
 8003390:	b2db      	uxtb	r3, r3
 8003392:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003396:	b2db      	uxtb	r3, r3
 8003398:	f003 031f 	and.w	r3, r3, #31
 800339c:	2101      	movs	r1, #1
 800339e:	fa01 f303 	lsl.w	r3, r1, r3
 80033a2:	4013      	ands	r3, r2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d197      	bne.n	80032d8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 81a1 	beq.w	8003700 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033be:	2300      	movs	r3, #0
 80033c0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033c4:	4b26      	ldr	r3, [pc, #152]	@ (8003460 <HAL_RCC_OscConfig+0x934>)
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d116      	bne.n	80033fe <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033d0:	4b23      	ldr	r3, [pc, #140]	@ (8003460 <HAL_RCC_OscConfig+0x934>)
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	4a22      	ldr	r2, [pc, #136]	@ (8003460 <HAL_RCC_OscConfig+0x934>)
 80033d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033da:	61d3      	str	r3, [r2, #28]
 80033dc:	4b20      	ldr	r3, [pc, #128]	@ (8003460 <HAL_RCC_OscConfig+0x934>)
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80033e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80033f6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80033f8:	2301      	movs	r3, #1
 80033fa:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003468 <HAL_RCC_OscConfig+0x93c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003406:	2b00      	cmp	r3, #0
 8003408:	d11a      	bne.n	8003440 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800340a:	4b17      	ldr	r3, [pc, #92]	@ (8003468 <HAL_RCC_OscConfig+0x93c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a16      	ldr	r2, [pc, #88]	@ (8003468 <HAL_RCC_OscConfig+0x93c>)
 8003410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003414:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003416:	f7fe fa8f 	bl	8001938 <HAL_GetTick>
 800341a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341e:	e009      	b.n	8003434 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003420:	f7fe fa8a 	bl	8001938 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b64      	cmp	r3, #100	@ 0x64
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e3b1      	b.n	8003b98 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003434:	4b0c      	ldr	r3, [pc, #48]	@ (8003468 <HAL_RCC_OscConfig+0x93c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800343c:	2b00      	cmp	r3, #0
 800343e:	d0ef      	beq.n	8003420 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003440:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003444:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d10d      	bne.n	800346c <HAL_RCC_OscConfig+0x940>
 8003450:	4b03      	ldr	r3, [pc, #12]	@ (8003460 <HAL_RCC_OscConfig+0x934>)
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	4a02      	ldr	r2, [pc, #8]	@ (8003460 <HAL_RCC_OscConfig+0x934>)
 8003456:	f043 0301 	orr.w	r3, r3, #1
 800345a:	6213      	str	r3, [r2, #32]
 800345c:	e03c      	b.n	80034d8 <HAL_RCC_OscConfig+0x9ac>
 800345e:	bf00      	nop
 8003460:	40021000 	.word	0x40021000
 8003464:	10908120 	.word	0x10908120
 8003468:	40007000 	.word	0x40007000
 800346c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003470:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10c      	bne.n	8003496 <HAL_RCC_OscConfig+0x96a>
 800347c:	4bc1      	ldr	r3, [pc, #772]	@ (8003784 <HAL_RCC_OscConfig+0xc58>)
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	4ac0      	ldr	r2, [pc, #768]	@ (8003784 <HAL_RCC_OscConfig+0xc58>)
 8003482:	f023 0301 	bic.w	r3, r3, #1
 8003486:	6213      	str	r3, [r2, #32]
 8003488:	4bbe      	ldr	r3, [pc, #760]	@ (8003784 <HAL_RCC_OscConfig+0xc58>)
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	4abd      	ldr	r2, [pc, #756]	@ (8003784 <HAL_RCC_OscConfig+0xc58>)
 800348e:	f023 0304 	bic.w	r3, r3, #4
 8003492:	6213      	str	r3, [r2, #32]
 8003494:	e020      	b.n	80034d8 <HAL_RCC_OscConfig+0x9ac>
 8003496:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800349a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	2b05      	cmp	r3, #5
 80034a4:	d10c      	bne.n	80034c0 <HAL_RCC_OscConfig+0x994>
 80034a6:	4bb7      	ldr	r3, [pc, #732]	@ (8003784 <HAL_RCC_OscConfig+0xc58>)
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	4ab6      	ldr	r2, [pc, #728]	@ (8003784 <HAL_RCC_OscConfig+0xc58>)
 80034ac:	f043 0304 	orr.w	r3, r3, #4
 80034b0:	6213      	str	r3, [r2, #32]
 80034b2:	4bb4      	ldr	r3, [pc, #720]	@ (8003784 <HAL_RCC_OscConfig+0xc58>)
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	4ab3      	ldr	r2, [pc, #716]	@ (8003784 <HAL_RCC_OscConfig+0xc58>)
 80034b8:	f043 0301 	orr.w	r3, r3, #1
 80034bc:	6213      	str	r3, [r2, #32]
 80034be:	e00b      	b.n	80034d8 <HAL_RCC_OscConfig+0x9ac>
 80034c0:	4bb0      	ldr	r3, [pc, #704]	@ (8003784 <HAL_RCC_OscConfig+0xc58>)
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	4aaf      	ldr	r2, [pc, #700]	@ (8003784 <HAL_RCC_OscConfig+0xc58>)
 80034c6:	f023 0301 	bic.w	r3, r3, #1
 80034ca:	6213      	str	r3, [r2, #32]
 80034cc:	4bad      	ldr	r3, [pc, #692]	@ (8003784 <HAL_RCC_OscConfig+0xc58>)
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	4aac      	ldr	r2, [pc, #688]	@ (8003784 <HAL_RCC_OscConfig+0xc58>)
 80034d2:	f023 0304 	bic.w	r3, r3, #4
 80034d6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 8081 	beq.w	80035ec <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ea:	f7fe fa25 	bl	8001938 <HAL_GetTick>
 80034ee:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f2:	e00b      	b.n	800350c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034f4:	f7fe fa20 	bl	8001938 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003504:	4293      	cmp	r3, r2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e345      	b.n	8003b98 <HAL_RCC_OscConfig+0x106c>
 800350c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003510:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003514:	2202      	movs	r2, #2
 8003516:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003518:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800351c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	fa93 f2a3 	rbit	r2, r3
 8003526:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800352a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003534:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003538:	2202      	movs	r2, #2
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003540:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	fa93 f2a3 	rbit	r2, r3
 800354a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800354e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003552:	601a      	str	r2, [r3, #0]
  return result;
 8003554:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003558:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800355c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355e:	fab3 f383 	clz	r3, r3
 8003562:	b2db      	uxtb	r3, r3
 8003564:	095b      	lsrs	r3, r3, #5
 8003566:	b2db      	uxtb	r3, r3
 8003568:	f043 0302 	orr.w	r3, r3, #2
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d102      	bne.n	8003578 <HAL_RCC_OscConfig+0xa4c>
 8003572:	4b84      	ldr	r3, [pc, #528]	@ (8003784 <HAL_RCC_OscConfig+0xc58>)
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	e013      	b.n	80035a0 <HAL_RCC_OscConfig+0xa74>
 8003578:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800357c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003580:	2202      	movs	r2, #2
 8003582:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003584:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003588:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	fa93 f2a3 	rbit	r2, r3
 8003592:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003596:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	4b79      	ldr	r3, [pc, #484]	@ (8003784 <HAL_RCC_OscConfig+0xc58>)
 800359e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035a4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80035a8:	2102      	movs	r1, #2
 80035aa:	6011      	str	r1, [r2, #0]
 80035ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035b0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80035b4:	6812      	ldr	r2, [r2, #0]
 80035b6:	fa92 f1a2 	rbit	r1, r2
 80035ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035be:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80035c2:	6011      	str	r1, [r2, #0]
  return result;
 80035c4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035c8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80035cc:	6812      	ldr	r2, [r2, #0]
 80035ce:	fab2 f282 	clz	r2, r2
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	f002 021f 	and.w	r2, r2, #31
 80035de:	2101      	movs	r1, #1
 80035e0:	fa01 f202 	lsl.w	r2, r1, r2
 80035e4:	4013      	ands	r3, r2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d084      	beq.n	80034f4 <HAL_RCC_OscConfig+0x9c8>
 80035ea:	e07f      	b.n	80036ec <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ec:	f7fe f9a4 	bl	8001938 <HAL_GetTick>
 80035f0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035f4:	e00b      	b.n	800360e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035f6:	f7fe f99f 	bl	8001938 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003606:	4293      	cmp	r3, r2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e2c4      	b.n	8003b98 <HAL_RCC_OscConfig+0x106c>
 800360e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003612:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003616:	2202      	movs	r2, #2
 8003618:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800361e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	fa93 f2a3 	rbit	r2, r3
 8003628:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800362c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003636:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800363a:	2202      	movs	r2, #2
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003642:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	fa93 f2a3 	rbit	r2, r3
 800364c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003650:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003654:	601a      	str	r2, [r3, #0]
  return result;
 8003656:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800365a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800365e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003660:	fab3 f383 	clz	r3, r3
 8003664:	b2db      	uxtb	r3, r3
 8003666:	095b      	lsrs	r3, r3, #5
 8003668:	b2db      	uxtb	r3, r3
 800366a:	f043 0302 	orr.w	r3, r3, #2
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d102      	bne.n	800367a <HAL_RCC_OscConfig+0xb4e>
 8003674:	4b43      	ldr	r3, [pc, #268]	@ (8003784 <HAL_RCC_OscConfig+0xc58>)
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	e013      	b.n	80036a2 <HAL_RCC_OscConfig+0xb76>
 800367a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800367e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003682:	2202      	movs	r2, #2
 8003684:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003686:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800368a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	fa93 f2a3 	rbit	r2, r3
 8003694:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003698:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	4b39      	ldr	r3, [pc, #228]	@ (8003784 <HAL_RCC_OscConfig+0xc58>)
 80036a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036a6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80036aa:	2102      	movs	r1, #2
 80036ac:	6011      	str	r1, [r2, #0]
 80036ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036b2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80036b6:	6812      	ldr	r2, [r2, #0]
 80036b8:	fa92 f1a2 	rbit	r1, r2
 80036bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036c0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80036c4:	6011      	str	r1, [r2, #0]
  return result;
 80036c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036ca:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80036ce:	6812      	ldr	r2, [r2, #0]
 80036d0:	fab2 f282 	clz	r2, r2
 80036d4:	b2d2      	uxtb	r2, r2
 80036d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	f002 021f 	and.w	r2, r2, #31
 80036e0:	2101      	movs	r1, #1
 80036e2:	fa01 f202 	lsl.w	r2, r1, r2
 80036e6:	4013      	ands	r3, r2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d184      	bne.n	80035f6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036ec:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d105      	bne.n	8003700 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036f4:	4b23      	ldr	r3, [pc, #140]	@ (8003784 <HAL_RCC_OscConfig+0xc58>)
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	4a22      	ldr	r2, [pc, #136]	@ (8003784 <HAL_RCC_OscConfig+0xc58>)
 80036fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036fe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003700:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003704:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	69db      	ldr	r3, [r3, #28]
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 8242 	beq.w	8003b96 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003712:	4b1c      	ldr	r3, [pc, #112]	@ (8003784 <HAL_RCC_OscConfig+0xc58>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f003 030c 	and.w	r3, r3, #12
 800371a:	2b08      	cmp	r3, #8
 800371c:	f000 8213 	beq.w	8003b46 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003720:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003724:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	2b02      	cmp	r3, #2
 800372e:	f040 8162 	bne.w	80039f6 <HAL_RCC_OscConfig+0xeca>
 8003732:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003736:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800373a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800373e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003740:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003744:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	fa93 f2a3 	rbit	r2, r3
 800374e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003752:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003756:	601a      	str	r2, [r3, #0]
  return result;
 8003758:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800375c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003760:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003762:	fab3 f383 	clz	r3, r3
 8003766:	b2db      	uxtb	r3, r3
 8003768:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800376c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	461a      	mov	r2, r3
 8003774:	2300      	movs	r3, #0
 8003776:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003778:	f7fe f8de 	bl	8001938 <HAL_GetTick>
 800377c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003780:	e00c      	b.n	800379c <HAL_RCC_OscConfig+0xc70>
 8003782:	bf00      	nop
 8003784:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003788:	f7fe f8d6 	bl	8001938 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e1fd      	b.n	8003b98 <HAL_RCC_OscConfig+0x106c>
 800379c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037a0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80037a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ae:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	fa93 f2a3 	rbit	r2, r3
 80037b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037bc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80037c0:	601a      	str	r2, [r3, #0]
  return result;
 80037c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037c6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80037ca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037cc:	fab3 f383 	clz	r3, r3
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	095b      	lsrs	r3, r3, #5
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	f043 0301 	orr.w	r3, r3, #1
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d102      	bne.n	80037e6 <HAL_RCC_OscConfig+0xcba>
 80037e0:	4bb0      	ldr	r3, [pc, #704]	@ (8003aa4 <HAL_RCC_OscConfig+0xf78>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	e027      	b.n	8003836 <HAL_RCC_OscConfig+0xd0a>
 80037e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ea:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80037ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037f8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	fa93 f2a3 	rbit	r2, r3
 8003802:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003806:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003810:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003814:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800381e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	fa93 f2a3 	rbit	r2, r3
 8003828:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800382c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	4b9c      	ldr	r3, [pc, #624]	@ (8003aa4 <HAL_RCC_OscConfig+0xf78>)
 8003834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003836:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800383a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800383e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003842:	6011      	str	r1, [r2, #0]
 8003844:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003848:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800384c:	6812      	ldr	r2, [r2, #0]
 800384e:	fa92 f1a2 	rbit	r1, r2
 8003852:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003856:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800385a:	6011      	str	r1, [r2, #0]
  return result;
 800385c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003860:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003864:	6812      	ldr	r2, [r2, #0]
 8003866:	fab2 f282 	clz	r2, r2
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	f042 0220 	orr.w	r2, r2, #32
 8003870:	b2d2      	uxtb	r2, r2
 8003872:	f002 021f 	and.w	r2, r2, #31
 8003876:	2101      	movs	r1, #1
 8003878:	fa01 f202 	lsl.w	r2, r1, r2
 800387c:	4013      	ands	r3, r2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d182      	bne.n	8003788 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003882:	4b88      	ldr	r3, [pc, #544]	@ (8003aa4 <HAL_RCC_OscConfig+0xf78>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800388a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800388e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003896:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800389a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	430b      	orrs	r3, r1
 80038a4:	497f      	ldr	r1, [pc, #508]	@ (8003aa4 <HAL_RCC_OscConfig+0xf78>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	604b      	str	r3, [r1, #4]
 80038aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ae:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80038b2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80038b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038bc:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	fa93 f2a3 	rbit	r2, r3
 80038c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ca:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80038ce:	601a      	str	r2, [r3, #0]
  return result;
 80038d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038d4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80038d8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038da:	fab3 f383 	clz	r3, r3
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80038e4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	461a      	mov	r2, r3
 80038ec:	2301      	movs	r3, #1
 80038ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f0:	f7fe f822 	bl	8001938 <HAL_GetTick>
 80038f4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038f8:	e009      	b.n	800390e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038fa:	f7fe f81d 	bl	8001938 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e144      	b.n	8003b98 <HAL_RCC_OscConfig+0x106c>
 800390e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003912:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003916:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800391a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003920:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	fa93 f2a3 	rbit	r2, r3
 800392a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800392e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003932:	601a      	str	r2, [r3, #0]
  return result;
 8003934:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003938:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800393c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800393e:	fab3 f383 	clz	r3, r3
 8003942:	b2db      	uxtb	r3, r3
 8003944:	095b      	lsrs	r3, r3, #5
 8003946:	b2db      	uxtb	r3, r3
 8003948:	f043 0301 	orr.w	r3, r3, #1
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b01      	cmp	r3, #1
 8003950:	d102      	bne.n	8003958 <HAL_RCC_OscConfig+0xe2c>
 8003952:	4b54      	ldr	r3, [pc, #336]	@ (8003aa4 <HAL_RCC_OscConfig+0xf78>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	e027      	b.n	80039a8 <HAL_RCC_OscConfig+0xe7c>
 8003958:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800395c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003960:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003964:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003966:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800396a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	fa93 f2a3 	rbit	r2, r3
 8003974:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003978:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003982:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003986:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003990:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	fa93 f2a3 	rbit	r2, r3
 800399a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800399e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	4b3f      	ldr	r3, [pc, #252]	@ (8003aa4 <HAL_RCC_OscConfig+0xf78>)
 80039a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039ac:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80039b0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80039b4:	6011      	str	r1, [r2, #0]
 80039b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039ba:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80039be:	6812      	ldr	r2, [r2, #0]
 80039c0:	fa92 f1a2 	rbit	r1, r2
 80039c4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039c8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80039cc:	6011      	str	r1, [r2, #0]
  return result;
 80039ce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039d2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80039d6:	6812      	ldr	r2, [r2, #0]
 80039d8:	fab2 f282 	clz	r2, r2
 80039dc:	b2d2      	uxtb	r2, r2
 80039de:	f042 0220 	orr.w	r2, r2, #32
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	f002 021f 	and.w	r2, r2, #31
 80039e8:	2101      	movs	r1, #1
 80039ea:	fa01 f202 	lsl.w	r2, r1, r2
 80039ee:	4013      	ands	r3, r2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d082      	beq.n	80038fa <HAL_RCC_OscConfig+0xdce>
 80039f4:	e0cf      	b.n	8003b96 <HAL_RCC_OscConfig+0x106a>
 80039f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039fa:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80039fe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a08:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	fa93 f2a3 	rbit	r2, r3
 8003a12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a16:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003a1a:	601a      	str	r2, [r3, #0]
  return result;
 8003a1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a20:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003a24:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a26:	fab3 f383 	clz	r3, r3
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003a30:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	461a      	mov	r2, r3
 8003a38:	2300      	movs	r3, #0
 8003a3a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3c:	f7fd ff7c 	bl	8001938 <HAL_GetTick>
 8003a40:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a44:	e009      	b.n	8003a5a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a46:	f7fd ff77 	bl	8001938 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e09e      	b.n	8003b98 <HAL_RCC_OscConfig+0x106c>
 8003a5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a5e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003a62:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a6c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	fa93 f2a3 	rbit	r2, r3
 8003a76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a7a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003a7e:	601a      	str	r2, [r3, #0]
  return result;
 8003a80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a84:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003a88:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a8a:	fab3 f383 	clz	r3, r3
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	095b      	lsrs	r3, r3, #5
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	f043 0301 	orr.w	r3, r3, #1
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d104      	bne.n	8003aa8 <HAL_RCC_OscConfig+0xf7c>
 8003a9e:	4b01      	ldr	r3, [pc, #4]	@ (8003aa4 <HAL_RCC_OscConfig+0xf78>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	e029      	b.n	8003af8 <HAL_RCC_OscConfig+0xfcc>
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aac:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003ab0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ab4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aba:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	fa93 f2a3 	rbit	r2, r3
 8003ac4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ac8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ad2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003ad6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ae0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	fa93 f2a3 	rbit	r2, r3
 8003aea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aee:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	4b2b      	ldr	r3, [pc, #172]	@ (8003ba4 <HAL_RCC_OscConfig+0x1078>)
 8003af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003afc:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003b00:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003b04:	6011      	str	r1, [r2, #0]
 8003b06:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b0a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003b0e:	6812      	ldr	r2, [r2, #0]
 8003b10:	fa92 f1a2 	rbit	r1, r2
 8003b14:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b18:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003b1c:	6011      	str	r1, [r2, #0]
  return result;
 8003b1e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b22:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003b26:	6812      	ldr	r2, [r2, #0]
 8003b28:	fab2 f282 	clz	r2, r2
 8003b2c:	b2d2      	uxtb	r2, r2
 8003b2e:	f042 0220 	orr.w	r2, r2, #32
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	f002 021f 	and.w	r2, r2, #31
 8003b38:	2101      	movs	r1, #1
 8003b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b3e:	4013      	ands	r3, r2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d180      	bne.n	8003a46 <HAL_RCC_OscConfig+0xf1a>
 8003b44:	e027      	b.n	8003b96 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d101      	bne.n	8003b5a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e01e      	b.n	8003b98 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b5a:	4b12      	ldr	r3, [pc, #72]	@ (8003ba4 <HAL_RCC_OscConfig+0x1078>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b62:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003b66:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003b6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d10b      	bne.n	8003b92 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003b7a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003b7e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003b82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d001      	beq.n	8003b96 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e000      	b.n	8003b98 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40021000 	.word	0x40021000

08003ba8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b09e      	sub	sp, #120	@ 0x78
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e162      	b.n	8003e86 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bc0:	4b90      	ldr	r3, [pc, #576]	@ (8003e04 <HAL_RCC_ClockConfig+0x25c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d910      	bls.n	8003bf0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bce:	4b8d      	ldr	r3, [pc, #564]	@ (8003e04 <HAL_RCC_ClockConfig+0x25c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f023 0207 	bic.w	r2, r3, #7
 8003bd6:	498b      	ldr	r1, [pc, #556]	@ (8003e04 <HAL_RCC_ClockConfig+0x25c>)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bde:	4b89      	ldr	r3, [pc, #548]	@ (8003e04 <HAL_RCC_ClockConfig+0x25c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d001      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e14a      	b.n	8003e86 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d008      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bfc:	4b82      	ldr	r3, [pc, #520]	@ (8003e08 <HAL_RCC_ClockConfig+0x260>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	497f      	ldr	r1, [pc, #508]	@ (8003e08 <HAL_RCC_ClockConfig+0x260>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 80dc 	beq.w	8003dd4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d13c      	bne.n	8003c9e <HAL_RCC_ClockConfig+0xf6>
 8003c24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c28:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c2c:	fa93 f3a3 	rbit	r3, r3
 8003c30:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003c32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c34:	fab3 f383 	clz	r3, r3
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	095b      	lsrs	r3, r3, #5
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	f043 0301 	orr.w	r3, r3, #1
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d102      	bne.n	8003c4e <HAL_RCC_ClockConfig+0xa6>
 8003c48:	4b6f      	ldr	r3, [pc, #444]	@ (8003e08 <HAL_RCC_ClockConfig+0x260>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	e00f      	b.n	8003c6e <HAL_RCC_ClockConfig+0xc6>
 8003c4e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c52:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c56:	fa93 f3a3 	rbit	r3, r3
 8003c5a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c60:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c64:	fa93 f3a3 	rbit	r3, r3
 8003c68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c6a:	4b67      	ldr	r3, [pc, #412]	@ (8003e08 <HAL_RCC_ClockConfig+0x260>)
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003c72:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003c74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c76:	fa92 f2a2 	rbit	r2, r2
 8003c7a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003c7c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003c7e:	fab2 f282 	clz	r2, r2
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	f042 0220 	orr.w	r2, r2, #32
 8003c88:	b2d2      	uxtb	r2, r2
 8003c8a:	f002 021f 	and.w	r2, r2, #31
 8003c8e:	2101      	movs	r1, #1
 8003c90:	fa01 f202 	lsl.w	r2, r1, r2
 8003c94:	4013      	ands	r3, r2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d17b      	bne.n	8003d92 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e0f3      	b.n	8003e86 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d13c      	bne.n	8003d20 <HAL_RCC_ClockConfig+0x178>
 8003ca6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003caa:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cae:	fa93 f3a3 	rbit	r3, r3
 8003cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003cb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cb6:	fab3 f383 	clz	r3, r3
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	095b      	lsrs	r3, r3, #5
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	f043 0301 	orr.w	r3, r3, #1
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d102      	bne.n	8003cd0 <HAL_RCC_ClockConfig+0x128>
 8003cca:	4b4f      	ldr	r3, [pc, #316]	@ (8003e08 <HAL_RCC_ClockConfig+0x260>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	e00f      	b.n	8003cf0 <HAL_RCC_ClockConfig+0x148>
 8003cd0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cd8:	fa93 f3a3 	rbit	r3, r3
 8003cdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cde:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ce2:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ce4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ce6:	fa93 f3a3 	rbit	r3, r3
 8003cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cec:	4b46      	ldr	r3, [pc, #280]	@ (8003e08 <HAL_RCC_ClockConfig+0x260>)
 8003cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003cf4:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003cf6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003cf8:	fa92 f2a2 	rbit	r2, r2
 8003cfc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003cfe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d00:	fab2 f282 	clz	r2, r2
 8003d04:	b2d2      	uxtb	r2, r2
 8003d06:	f042 0220 	orr.w	r2, r2, #32
 8003d0a:	b2d2      	uxtb	r2, r2
 8003d0c:	f002 021f 	and.w	r2, r2, #31
 8003d10:	2101      	movs	r1, #1
 8003d12:	fa01 f202 	lsl.w	r2, r1, r2
 8003d16:	4013      	ands	r3, r2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d13a      	bne.n	8003d92 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e0b2      	b.n	8003e86 <HAL_RCC_ClockConfig+0x2de>
 8003d20:	2302      	movs	r3, #2
 8003d22:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d26:	fa93 f3a3 	rbit	r3, r3
 8003d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d2e:	fab3 f383 	clz	r3, r3
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	095b      	lsrs	r3, r3, #5
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	f043 0301 	orr.w	r3, r3, #1
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d102      	bne.n	8003d48 <HAL_RCC_ClockConfig+0x1a0>
 8003d42:	4b31      	ldr	r3, [pc, #196]	@ (8003e08 <HAL_RCC_ClockConfig+0x260>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	e00d      	b.n	8003d64 <HAL_RCC_ClockConfig+0x1bc>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d4e:	fa93 f3a3 	rbit	r3, r3
 8003d52:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d54:	2302      	movs	r3, #2
 8003d56:	623b      	str	r3, [r7, #32]
 8003d58:	6a3b      	ldr	r3, [r7, #32]
 8003d5a:	fa93 f3a3 	rbit	r3, r3
 8003d5e:	61fb      	str	r3, [r7, #28]
 8003d60:	4b29      	ldr	r3, [pc, #164]	@ (8003e08 <HAL_RCC_ClockConfig+0x260>)
 8003d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d64:	2202      	movs	r2, #2
 8003d66:	61ba      	str	r2, [r7, #24]
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	fa92 f2a2 	rbit	r2, r2
 8003d6e:	617a      	str	r2, [r7, #20]
  return result;
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	fab2 f282 	clz	r2, r2
 8003d76:	b2d2      	uxtb	r2, r2
 8003d78:	f042 0220 	orr.w	r2, r2, #32
 8003d7c:	b2d2      	uxtb	r2, r2
 8003d7e:	f002 021f 	and.w	r2, r2, #31
 8003d82:	2101      	movs	r1, #1
 8003d84:	fa01 f202 	lsl.w	r2, r1, r2
 8003d88:	4013      	ands	r3, r2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e079      	b.n	8003e86 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d92:	4b1d      	ldr	r3, [pc, #116]	@ (8003e08 <HAL_RCC_ClockConfig+0x260>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f023 0203 	bic.w	r2, r3, #3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	491a      	ldr	r1, [pc, #104]	@ (8003e08 <HAL_RCC_ClockConfig+0x260>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003da4:	f7fd fdc8 	bl	8001938 <HAL_GetTick>
 8003da8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003daa:	e00a      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dac:	f7fd fdc4 	bl	8001938 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e061      	b.n	8003e86 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dc2:	4b11      	ldr	r3, [pc, #68]	@ (8003e08 <HAL_RCC_ClockConfig+0x260>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f003 020c 	and.w	r2, r3, #12
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d1eb      	bne.n	8003dac <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003e04 <HAL_RCC_ClockConfig+0x25c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d214      	bcs.n	8003e0c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003de2:	4b08      	ldr	r3, [pc, #32]	@ (8003e04 <HAL_RCC_ClockConfig+0x25c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f023 0207 	bic.w	r2, r3, #7
 8003dea:	4906      	ldr	r1, [pc, #24]	@ (8003e04 <HAL_RCC_ClockConfig+0x25c>)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003df2:	4b04      	ldr	r3, [pc, #16]	@ (8003e04 <HAL_RCC_ClockConfig+0x25c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d005      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e040      	b.n	8003e86 <HAL_RCC_ClockConfig+0x2de>
 8003e04:	40022000 	.word	0x40022000
 8003e08:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d008      	beq.n	8003e2a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e18:	4b1d      	ldr	r3, [pc, #116]	@ (8003e90 <HAL_RCC_ClockConfig+0x2e8>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	491a      	ldr	r1, [pc, #104]	@ (8003e90 <HAL_RCC_ClockConfig+0x2e8>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d009      	beq.n	8003e4a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e36:	4b16      	ldr	r3, [pc, #88]	@ (8003e90 <HAL_RCC_ClockConfig+0x2e8>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	4912      	ldr	r1, [pc, #72]	@ (8003e90 <HAL_RCC_ClockConfig+0x2e8>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003e4a:	f000 f829 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 8003e4e:	4601      	mov	r1, r0
 8003e50:	4b0f      	ldr	r3, [pc, #60]	@ (8003e90 <HAL_RCC_ClockConfig+0x2e8>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e58:	22f0      	movs	r2, #240	@ 0xf0
 8003e5a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	fa92 f2a2 	rbit	r2, r2
 8003e62:	60fa      	str	r2, [r7, #12]
  return result;
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	fab2 f282 	clz	r2, r2
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	40d3      	lsrs	r3, r2
 8003e6e:	4a09      	ldr	r2, [pc, #36]	@ (8003e94 <HAL_RCC_ClockConfig+0x2ec>)
 8003e70:	5cd3      	ldrb	r3, [r2, r3]
 8003e72:	fa21 f303 	lsr.w	r3, r1, r3
 8003e76:	4a08      	ldr	r2, [pc, #32]	@ (8003e98 <HAL_RCC_ClockConfig+0x2f0>)
 8003e78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003e7a:	4b08      	ldr	r3, [pc, #32]	@ (8003e9c <HAL_RCC_ClockConfig+0x2f4>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7fd fd16 	bl	80018b0 <HAL_InitTick>
  
  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3778      	adds	r7, #120	@ 0x78
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	40021000 	.word	0x40021000
 8003e94:	08009298 	.word	0x08009298
 8003e98:	20000018 	.word	0x20000018
 8003e9c:	2000001c 	.word	0x2000001c

08003ea0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60fb      	str	r3, [r7, #12]
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60bb      	str	r3, [r7, #8]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	617b      	str	r3, [r7, #20]
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003eba:	4b1e      	ldr	r3, [pc, #120]	@ (8003f34 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f003 030c 	and.w	r3, r3, #12
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d002      	beq.n	8003ed0 <HAL_RCC_GetSysClockFreq+0x30>
 8003eca:	2b08      	cmp	r3, #8
 8003ecc:	d003      	beq.n	8003ed6 <HAL_RCC_GetSysClockFreq+0x36>
 8003ece:	e026      	b.n	8003f1e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ed0:	4b19      	ldr	r3, [pc, #100]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ed2:	613b      	str	r3, [r7, #16]
      break;
 8003ed4:	e026      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	0c9b      	lsrs	r3, r3, #18
 8003eda:	f003 030f 	and.w	r3, r3, #15
 8003ede:	4a17      	ldr	r2, [pc, #92]	@ (8003f3c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ee0:	5cd3      	ldrb	r3, [r2, r3]
 8003ee2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003ee4:	4b13      	ldr	r3, [pc, #76]	@ (8003f34 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee8:	f003 030f 	and.w	r3, r3, #15
 8003eec:	4a14      	ldr	r2, [pc, #80]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003eee:	5cd3      	ldrb	r3, [r2, r3]
 8003ef0:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d008      	beq.n	8003f0e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003efc:	4a0e      	ldr	r2, [pc, #56]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0x98>)
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	fb02 f303 	mul.w	r3, r2, r3
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	e004      	b.n	8003f18 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a0c      	ldr	r2, [pc, #48]	@ (8003f44 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f12:	fb02 f303 	mul.w	r3, r2, r3
 8003f16:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	613b      	str	r3, [r7, #16]
      break;
 8003f1c:	e002      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f1e:	4b06      	ldr	r3, [pc, #24]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f20:	613b      	str	r3, [r7, #16]
      break;
 8003f22:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f24:	693b      	ldr	r3, [r7, #16]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	371c      	adds	r7, #28
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	40021000 	.word	0x40021000
 8003f38:	007a1200 	.word	0x007a1200
 8003f3c:	080092b0 	.word	0x080092b0
 8003f40:	080092c0 	.word	0x080092c0
 8003f44:	003d0900 	.word	0x003d0900

08003f48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f4c:	4b03      	ldr	r3, [pc, #12]	@ (8003f5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	20000018 	.word	0x20000018

08003f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003f66:	f7ff ffef 	bl	8003f48 <HAL_RCC_GetHCLKFreq>
 8003f6a:	4601      	mov	r1, r0
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f9c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003f74:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003f78:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	fa92 f2a2 	rbit	r2, r2
 8003f80:	603a      	str	r2, [r7, #0]
  return result;
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	fab2 f282 	clz	r2, r2
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	40d3      	lsrs	r3, r2
 8003f8c:	4a04      	ldr	r2, [pc, #16]	@ (8003fa0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003f8e:	5cd3      	ldrb	r3, [r2, r3]
 8003f90:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003f94:	4618      	mov	r0, r3
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	080092a8 	.word	0x080092a8

08003fa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003faa:	f7ff ffcd 	bl	8003f48 <HAL_RCC_GetHCLKFreq>
 8003fae:	4601      	mov	r1, r0
 8003fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003fb8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003fbc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	fa92 f2a2 	rbit	r2, r2
 8003fc4:	603a      	str	r2, [r7, #0]
  return result;
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	fab2 f282 	clz	r2, r2
 8003fcc:	b2d2      	uxtb	r2, r2
 8003fce:	40d3      	lsrs	r3, r2
 8003fd0:	4a04      	ldr	r2, [pc, #16]	@ (8003fe4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003fd2:	5cd3      	ldrb	r3, [r2, r3]
 8003fd4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	080092a8 	.word	0x080092a8

08003fe8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b092      	sub	sp, #72	@ 0x48
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004006:	2b00      	cmp	r3, #0
 8004008:	f000 80d4 	beq.w	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800400c:	4b4e      	ldr	r3, [pc, #312]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10e      	bne.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004018:	4b4b      	ldr	r3, [pc, #300]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	4a4a      	ldr	r2, [pc, #296]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800401e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004022:	61d3      	str	r3, [r2, #28]
 8004024:	4b48      	ldr	r3, [pc, #288]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800402c:	60bb      	str	r3, [r7, #8]
 800402e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004030:	2301      	movs	r3, #1
 8004032:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004036:	4b45      	ldr	r3, [pc, #276]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800403e:	2b00      	cmp	r3, #0
 8004040:	d118      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004042:	4b42      	ldr	r3, [pc, #264]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a41      	ldr	r2, [pc, #260]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004048:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800404c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800404e:	f7fd fc73 	bl	8001938 <HAL_GetTick>
 8004052:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004054:	e008      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004056:	f7fd fc6f 	bl	8001938 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b64      	cmp	r3, #100	@ 0x64
 8004062:	d901      	bls.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e14b      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004068:	4b38      	ldr	r3, [pc, #224]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0f0      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004074:	4b34      	ldr	r3, [pc, #208]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800407c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800407e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 8084 	beq.w	800418e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800408e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004090:	429a      	cmp	r2, r3
 8004092:	d07c      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004094:	4b2c      	ldr	r3, [pc, #176]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800409c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800409e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80040a2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a6:	fa93 f3a3 	rbit	r3, r3
 80040aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80040ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040ae:	fab3 f383 	clz	r3, r3
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	461a      	mov	r2, r3
 80040b6:	4b26      	ldr	r3, [pc, #152]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040b8:	4413      	add	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	461a      	mov	r2, r3
 80040be:	2301      	movs	r3, #1
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80040c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ca:	fa93 f3a3 	rbit	r3, r3
 80040ce:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80040d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040d2:	fab3 f383 	clz	r3, r3
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	461a      	mov	r2, r3
 80040da:	4b1d      	ldr	r3, [pc, #116]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040dc:	4413      	add	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	461a      	mov	r2, r3
 80040e2:	2300      	movs	r3, #0
 80040e4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80040e6:	4a18      	ldr	r2, [pc, #96]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040ea:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80040ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d04b      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f6:	f7fd fc1f 	bl	8001938 <HAL_GetTick>
 80040fa:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040fc:	e00a      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040fe:	f7fd fc1b 	bl	8001938 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	f241 3288 	movw	r2, #5000	@ 0x1388
 800410c:	4293      	cmp	r3, r2
 800410e:	d901      	bls.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e0f5      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004114:	2302      	movs	r3, #2
 8004116:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411a:	fa93 f3a3 	rbit	r3, r3
 800411e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004120:	2302      	movs	r3, #2
 8004122:	623b      	str	r3, [r7, #32]
 8004124:	6a3b      	ldr	r3, [r7, #32]
 8004126:	fa93 f3a3 	rbit	r3, r3
 800412a:	61fb      	str	r3, [r7, #28]
  return result;
 800412c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800412e:	fab3 f383 	clz	r3, r3
 8004132:	b2db      	uxtb	r3, r3
 8004134:	095b      	lsrs	r3, r3, #5
 8004136:	b2db      	uxtb	r3, r3
 8004138:	f043 0302 	orr.w	r3, r3, #2
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d108      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004142:	4b01      	ldr	r3, [pc, #4]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	e00d      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004148:	40021000 	.word	0x40021000
 800414c:	40007000 	.word	0x40007000
 8004150:	10908100 	.word	0x10908100
 8004154:	2302      	movs	r3, #2
 8004156:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	fa93 f3a3 	rbit	r3, r3
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	4b69      	ldr	r3, [pc, #420]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004164:	2202      	movs	r2, #2
 8004166:	613a      	str	r2, [r7, #16]
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	fa92 f2a2 	rbit	r2, r2
 800416e:	60fa      	str	r2, [r7, #12]
  return result;
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	fab2 f282 	clz	r2, r2
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800417c:	b2d2      	uxtb	r2, r2
 800417e:	f002 021f 	and.w	r2, r2, #31
 8004182:	2101      	movs	r1, #1
 8004184:	fa01 f202 	lsl.w	r2, r1, r2
 8004188:	4013      	ands	r3, r2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0b7      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800418e:	4b5e      	ldr	r3, [pc, #376]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	495b      	ldr	r1, [pc, #364]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800419c:	4313      	orrs	r3, r2
 800419e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041a0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d105      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041a8:	4b57      	ldr	r3, [pc, #348]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041aa:	69db      	ldr	r3, [r3, #28]
 80041ac:	4a56      	ldr	r2, [pc, #344]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d008      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041c0:	4b51      	ldr	r3, [pc, #324]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c4:	f023 0203 	bic.w	r2, r3, #3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	494e      	ldr	r1, [pc, #312]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0320 	and.w	r3, r3, #32
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d008      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041de:	4b4a      	ldr	r3, [pc, #296]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e2:	f023 0210 	bic.w	r2, r3, #16
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	4947      	ldr	r1, [pc, #284]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d008      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80041fc:	4b42      	ldr	r3, [pc, #264]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004208:	493f      	ldr	r1, [pc, #252]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800420a:	4313      	orrs	r3, r2
 800420c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004216:	2b00      	cmp	r3, #0
 8004218:	d008      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800421a:	4b3b      	ldr	r3, [pc, #236]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800421c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421e:	f023 0220 	bic.w	r2, r3, #32
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	4938      	ldr	r1, [pc, #224]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004228:	4313      	orrs	r3, r2
 800422a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d008      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004238:	4b33      	ldr	r3, [pc, #204]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800423a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	4930      	ldr	r1, [pc, #192]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004246:	4313      	orrs	r3, r2
 8004248:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004252:	2b00      	cmp	r3, #0
 8004254:	d008      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004256:	4b2c      	ldr	r3, [pc, #176]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	4929      	ldr	r1, [pc, #164]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004264:	4313      	orrs	r3, r2
 8004266:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004270:	2b00      	cmp	r3, #0
 8004272:	d008      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004274:	4b24      	ldr	r3, [pc, #144]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004278:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	4921      	ldr	r1, [pc, #132]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004282:	4313      	orrs	r3, r2
 8004284:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d008      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004292:	4b1d      	ldr	r3, [pc, #116]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004296:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	491a      	ldr	r1, [pc, #104]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d008      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80042b0:	4b15      	ldr	r3, [pc, #84]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042bc:	4912      	ldr	r1, [pc, #72]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d008      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80042ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042da:	490b      	ldr	r1, [pc, #44]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d008      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80042ec:	4b06      	ldr	r3, [pc, #24]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f8:	4903      	ldr	r1, [pc, #12]	@ (8004308 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3748      	adds	r7, #72	@ 0x48
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40021000 	.word	0x40021000

0800430c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e040      	b.n	80043a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004322:	2b00      	cmp	r3, #0
 8004324:	d106      	bne.n	8004334 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7fd f926 	bl	8001580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2224      	movs	r2, #36	@ 0x24
 8004338:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0201 	bic.w	r2, r2, #1
 8004348:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434e:	2b00      	cmp	r3, #0
 8004350:	d002      	beq.n	8004358 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f9e8 	bl	8004728 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f8af 	bl	80044bc <UART_SetConfig>
 800435e:	4603      	mov	r3, r0
 8004360:	2b01      	cmp	r3, #1
 8004362:	d101      	bne.n	8004368 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e01b      	b.n	80043a0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004376:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004386:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0201 	orr.w	r2, r2, #1
 8004396:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 fa67 	bl	800486c <UART_CheckIdleState>
 800439e:	4603      	mov	r3, r0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3708      	adds	r7, #8
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b08a      	sub	sp, #40	@ 0x28
 80043ac:	af02      	add	r7, sp, #8
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	603b      	str	r3, [r7, #0]
 80043b4:	4613      	mov	r3, r2
 80043b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043bc:	2b20      	cmp	r3, #32
 80043be:	d177      	bne.n	80044b0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <HAL_UART_Transmit+0x24>
 80043c6:	88fb      	ldrh	r3, [r7, #6]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d101      	bne.n	80043d0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e070      	b.n	80044b2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2221      	movs	r2, #33	@ 0x21
 80043dc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043de:	f7fd faab 	bl	8001938 <HAL_GetTick>
 80043e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	88fa      	ldrh	r2, [r7, #6]
 80043e8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	88fa      	ldrh	r2, [r7, #6]
 80043f0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043fc:	d108      	bne.n	8004410 <HAL_UART_Transmit+0x68>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d104      	bne.n	8004410 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004406:	2300      	movs	r3, #0
 8004408:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	61bb      	str	r3, [r7, #24]
 800440e:	e003      	b.n	8004418 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004414:	2300      	movs	r3, #0
 8004416:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004418:	e02f      	b.n	800447a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	2200      	movs	r2, #0
 8004422:	2180      	movs	r1, #128	@ 0x80
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f000 fac9 	bl	80049bc <UART_WaitOnFlagUntilTimeout>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d004      	beq.n	800443a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2220      	movs	r2, #32
 8004434:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e03b      	b.n	80044b2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10b      	bne.n	8004458 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	881a      	ldrh	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800444c:	b292      	uxth	r2, r2
 800444e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	3302      	adds	r3, #2
 8004454:	61bb      	str	r3, [r7, #24]
 8004456:	e007      	b.n	8004468 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	781a      	ldrb	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	3301      	adds	r3, #1
 8004466:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800446e:	b29b      	uxth	r3, r3
 8004470:	3b01      	subs	r3, #1
 8004472:	b29a      	uxth	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004480:	b29b      	uxth	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1c9      	bne.n	800441a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2200      	movs	r2, #0
 800448e:	2140      	movs	r1, #64	@ 0x40
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 fa93 	bl	80049bc <UART_WaitOnFlagUntilTimeout>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d004      	beq.n	80044a6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2220      	movs	r2, #32
 80044a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e005      	b.n	80044b2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2220      	movs	r2, #32
 80044aa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80044ac:	2300      	movs	r3, #0
 80044ae:	e000      	b.n	80044b2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80044b0:	2302      	movs	r3, #2
  }
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3720      	adds	r7, #32
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
	...

080044bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b088      	sub	sp, #32
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	4313      	orrs	r3, r2
 80044de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	4b8a      	ldr	r3, [pc, #552]	@ (8004710 <UART_SetConfig+0x254>)
 80044e8:	4013      	ands	r3, r2
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	6812      	ldr	r2, [r2, #0]
 80044ee:	6979      	ldr	r1, [r7, #20]
 80044f0:	430b      	orrs	r3, r1
 80044f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	4313      	orrs	r3, r2
 8004518:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	430a      	orrs	r2, r1
 800452c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a78      	ldr	r2, [pc, #480]	@ (8004714 <UART_SetConfig+0x258>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d120      	bne.n	800457a <UART_SetConfig+0xbe>
 8004538:	4b77      	ldr	r3, [pc, #476]	@ (8004718 <UART_SetConfig+0x25c>)
 800453a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453c:	f003 0303 	and.w	r3, r3, #3
 8004540:	2b03      	cmp	r3, #3
 8004542:	d817      	bhi.n	8004574 <UART_SetConfig+0xb8>
 8004544:	a201      	add	r2, pc, #4	@ (adr r2, 800454c <UART_SetConfig+0x90>)
 8004546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454a:	bf00      	nop
 800454c:	0800455d 	.word	0x0800455d
 8004550:	08004569 	.word	0x08004569
 8004554:	0800456f 	.word	0x0800456f
 8004558:	08004563 	.word	0x08004563
 800455c:	2300      	movs	r3, #0
 800455e:	77fb      	strb	r3, [r7, #31]
 8004560:	e01d      	b.n	800459e <UART_SetConfig+0xe2>
 8004562:	2302      	movs	r3, #2
 8004564:	77fb      	strb	r3, [r7, #31]
 8004566:	e01a      	b.n	800459e <UART_SetConfig+0xe2>
 8004568:	2304      	movs	r3, #4
 800456a:	77fb      	strb	r3, [r7, #31]
 800456c:	e017      	b.n	800459e <UART_SetConfig+0xe2>
 800456e:	2308      	movs	r3, #8
 8004570:	77fb      	strb	r3, [r7, #31]
 8004572:	e014      	b.n	800459e <UART_SetConfig+0xe2>
 8004574:	2310      	movs	r3, #16
 8004576:	77fb      	strb	r3, [r7, #31]
 8004578:	e011      	b.n	800459e <UART_SetConfig+0xe2>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a67      	ldr	r2, [pc, #412]	@ (800471c <UART_SetConfig+0x260>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d102      	bne.n	800458a <UART_SetConfig+0xce>
 8004584:	2300      	movs	r3, #0
 8004586:	77fb      	strb	r3, [r7, #31]
 8004588:	e009      	b.n	800459e <UART_SetConfig+0xe2>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a64      	ldr	r2, [pc, #400]	@ (8004720 <UART_SetConfig+0x264>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d102      	bne.n	800459a <UART_SetConfig+0xde>
 8004594:	2300      	movs	r3, #0
 8004596:	77fb      	strb	r3, [r7, #31]
 8004598:	e001      	b.n	800459e <UART_SetConfig+0xe2>
 800459a:	2310      	movs	r3, #16
 800459c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045a6:	d15a      	bne.n	800465e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80045a8:	7ffb      	ldrb	r3, [r7, #31]
 80045aa:	2b08      	cmp	r3, #8
 80045ac:	d827      	bhi.n	80045fe <UART_SetConfig+0x142>
 80045ae:	a201      	add	r2, pc, #4	@ (adr r2, 80045b4 <UART_SetConfig+0xf8>)
 80045b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b4:	080045d9 	.word	0x080045d9
 80045b8:	080045e1 	.word	0x080045e1
 80045bc:	080045e9 	.word	0x080045e9
 80045c0:	080045ff 	.word	0x080045ff
 80045c4:	080045ef 	.word	0x080045ef
 80045c8:	080045ff 	.word	0x080045ff
 80045cc:	080045ff 	.word	0x080045ff
 80045d0:	080045ff 	.word	0x080045ff
 80045d4:	080045f7 	.word	0x080045f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045d8:	f7ff fcc2 	bl	8003f60 <HAL_RCC_GetPCLK1Freq>
 80045dc:	61b8      	str	r0, [r7, #24]
        break;
 80045de:	e013      	b.n	8004608 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045e0:	f7ff fce0 	bl	8003fa4 <HAL_RCC_GetPCLK2Freq>
 80045e4:	61b8      	str	r0, [r7, #24]
        break;
 80045e6:	e00f      	b.n	8004608 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045e8:	4b4e      	ldr	r3, [pc, #312]	@ (8004724 <UART_SetConfig+0x268>)
 80045ea:	61bb      	str	r3, [r7, #24]
        break;
 80045ec:	e00c      	b.n	8004608 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ee:	f7ff fc57 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 80045f2:	61b8      	str	r0, [r7, #24]
        break;
 80045f4:	e008      	b.n	8004608 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045fa:	61bb      	str	r3, [r7, #24]
        break;
 80045fc:	e004      	b.n	8004608 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80045fe:	2300      	movs	r3, #0
 8004600:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	77bb      	strb	r3, [r7, #30]
        break;
 8004606:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d074      	beq.n	80046f8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	005a      	lsls	r2, r3, #1
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	085b      	lsrs	r3, r3, #1
 8004618:	441a      	add	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004622:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	2b0f      	cmp	r3, #15
 8004628:	d916      	bls.n	8004658 <UART_SetConfig+0x19c>
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004630:	d212      	bcs.n	8004658 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	b29b      	uxth	r3, r3
 8004636:	f023 030f 	bic.w	r3, r3, #15
 800463a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	085b      	lsrs	r3, r3, #1
 8004640:	b29b      	uxth	r3, r3
 8004642:	f003 0307 	and.w	r3, r3, #7
 8004646:	b29a      	uxth	r2, r3
 8004648:	89fb      	ldrh	r3, [r7, #14]
 800464a:	4313      	orrs	r3, r2
 800464c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	89fa      	ldrh	r2, [r7, #14]
 8004654:	60da      	str	r2, [r3, #12]
 8004656:	e04f      	b.n	80046f8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	77bb      	strb	r3, [r7, #30]
 800465c:	e04c      	b.n	80046f8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800465e:	7ffb      	ldrb	r3, [r7, #31]
 8004660:	2b08      	cmp	r3, #8
 8004662:	d828      	bhi.n	80046b6 <UART_SetConfig+0x1fa>
 8004664:	a201      	add	r2, pc, #4	@ (adr r2, 800466c <UART_SetConfig+0x1b0>)
 8004666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466a:	bf00      	nop
 800466c:	08004691 	.word	0x08004691
 8004670:	08004699 	.word	0x08004699
 8004674:	080046a1 	.word	0x080046a1
 8004678:	080046b7 	.word	0x080046b7
 800467c:	080046a7 	.word	0x080046a7
 8004680:	080046b7 	.word	0x080046b7
 8004684:	080046b7 	.word	0x080046b7
 8004688:	080046b7 	.word	0x080046b7
 800468c:	080046af 	.word	0x080046af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004690:	f7ff fc66 	bl	8003f60 <HAL_RCC_GetPCLK1Freq>
 8004694:	61b8      	str	r0, [r7, #24]
        break;
 8004696:	e013      	b.n	80046c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004698:	f7ff fc84 	bl	8003fa4 <HAL_RCC_GetPCLK2Freq>
 800469c:	61b8      	str	r0, [r7, #24]
        break;
 800469e:	e00f      	b.n	80046c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046a0:	4b20      	ldr	r3, [pc, #128]	@ (8004724 <UART_SetConfig+0x268>)
 80046a2:	61bb      	str	r3, [r7, #24]
        break;
 80046a4:	e00c      	b.n	80046c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046a6:	f7ff fbfb 	bl	8003ea0 <HAL_RCC_GetSysClockFreq>
 80046aa:	61b8      	str	r0, [r7, #24]
        break;
 80046ac:	e008      	b.n	80046c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046b2:	61bb      	str	r3, [r7, #24]
        break;
 80046b4:	e004      	b.n	80046c0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	77bb      	strb	r3, [r7, #30]
        break;
 80046be:	bf00      	nop
    }

    if (pclk != 0U)
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d018      	beq.n	80046f8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	085a      	lsrs	r2, r3, #1
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	441a      	add	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	2b0f      	cmp	r3, #15
 80046de:	d909      	bls.n	80046f4 <UART_SetConfig+0x238>
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046e6:	d205      	bcs.n	80046f4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	60da      	str	r2, [r3, #12]
 80046f2:	e001      	b.n	80046f8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004704:	7fbb      	ldrb	r3, [r7, #30]
}
 8004706:	4618      	mov	r0, r3
 8004708:	3720      	adds	r7, #32
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	efff69f3 	.word	0xefff69f3
 8004714:	40013800 	.word	0x40013800
 8004718:	40021000 	.word	0x40021000
 800471c:	40004400 	.word	0x40004400
 8004720:	40004800 	.word	0x40004800
 8004724:	007a1200 	.word	0x007a1200

08004728 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004734:	f003 0308 	and.w	r3, r3, #8
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00a      	beq.n	8004752 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	430a      	orrs	r2, r1
 8004750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00a      	beq.n	8004774 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	430a      	orrs	r2, r1
 8004772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00a      	beq.n	8004796 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479a:	f003 0304 	and.w	r3, r3, #4
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00a      	beq.n	80047b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047bc:	f003 0310 	and.w	r3, r3, #16
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00a      	beq.n	80047da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047de:	f003 0320 	and.w	r3, r3, #32
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	430a      	orrs	r2, r1
 80047fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004804:	2b00      	cmp	r3, #0
 8004806:	d01a      	beq.n	800483e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004822:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004826:	d10a      	bne.n	800483e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	605a      	str	r2, [r3, #4]
  }
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b098      	sub	sp, #96	@ 0x60
 8004870:	af02      	add	r7, sp, #8
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800487c:	f7fd f85c 	bl	8001938 <HAL_GetTick>
 8004880:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0308 	and.w	r3, r3, #8
 800488c:	2b08      	cmp	r3, #8
 800488e:	d12e      	bne.n	80048ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004890:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004898:	2200      	movs	r2, #0
 800489a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f88c 	bl	80049bc <UART_WaitOnFlagUntilTimeout>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d021      	beq.n	80048ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048b2:	e853 3f00 	ldrex	r3, [r3]
 80048b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80048b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048be:	653b      	str	r3, [r7, #80]	@ 0x50
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	461a      	mov	r2, r3
 80048c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80048ca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048d0:	e841 2300 	strex	r3, r2, [r1]
 80048d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1e6      	bne.n	80048aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2220      	movs	r2, #32
 80048e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e062      	b.n	80049b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0304 	and.w	r3, r3, #4
 80048f8:	2b04      	cmp	r3, #4
 80048fa:	d149      	bne.n	8004990 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004904:	2200      	movs	r2, #0
 8004906:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f856 	bl	80049bc <UART_WaitOnFlagUntilTimeout>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d03c      	beq.n	8004990 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491e:	e853 3f00 	ldrex	r3, [r3]
 8004922:	623b      	str	r3, [r7, #32]
   return(result);
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800492a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	461a      	mov	r2, r3
 8004932:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004934:	633b      	str	r3, [r7, #48]	@ 0x30
 8004936:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004938:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800493a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800493c:	e841 2300 	strex	r3, r2, [r1]
 8004940:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1e6      	bne.n	8004916 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	3308      	adds	r3, #8
 800494e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	e853 3f00 	ldrex	r3, [r3]
 8004956:	60fb      	str	r3, [r7, #12]
   return(result);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 0301 	bic.w	r3, r3, #1
 800495e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3308      	adds	r3, #8
 8004966:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004968:	61fa      	str	r2, [r7, #28]
 800496a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496c:	69b9      	ldr	r1, [r7, #24]
 800496e:	69fa      	ldr	r2, [r7, #28]
 8004970:	e841 2300 	strex	r3, r2, [r1]
 8004974:	617b      	str	r3, [r7, #20]
   return(result);
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1e5      	bne.n	8004948 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2220      	movs	r2, #32
 8004980:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e011      	b.n	80049b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2220      	movs	r2, #32
 8004994:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2220      	movs	r2, #32
 800499a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3758      	adds	r7, #88	@ 0x58
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	603b      	str	r3, [r7, #0]
 80049c8:	4613      	mov	r3, r2
 80049ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049cc:	e04f      	b.n	8004a6e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d4:	d04b      	beq.n	8004a6e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049d6:	f7fc ffaf 	bl	8001938 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d302      	bcc.n	80049ec <UART_WaitOnFlagUntilTimeout+0x30>
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d101      	bne.n	80049f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e04e      	b.n	8004a8e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0304 	and.w	r3, r3, #4
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d037      	beq.n	8004a6e <UART_WaitOnFlagUntilTimeout+0xb2>
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	2b80      	cmp	r3, #128	@ 0x80
 8004a02:	d034      	beq.n	8004a6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b40      	cmp	r3, #64	@ 0x40
 8004a08:	d031      	beq.n	8004a6e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	69db      	ldr	r3, [r3, #28]
 8004a10:	f003 0308 	and.w	r3, r3, #8
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d110      	bne.n	8004a3a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2208      	movs	r2, #8
 8004a1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 f838 	bl	8004a96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2208      	movs	r2, #8
 8004a2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e029      	b.n	8004a8e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a48:	d111      	bne.n	8004a6e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 f81e 	bl	8004a96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2220      	movs	r2, #32
 8004a5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e00f      	b.n	8004a8e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	69da      	ldr	r2, [r3, #28]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	4013      	ands	r3, r2
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	bf0c      	ite	eq
 8004a7e:	2301      	moveq	r3, #1
 8004a80:	2300      	movne	r3, #0
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	461a      	mov	r2, r3
 8004a86:	79fb      	ldrb	r3, [r7, #7]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d0a0      	beq.n	80049ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b095      	sub	sp, #84	@ 0x54
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aa6:	e853 3f00 	ldrex	r3, [r3]
 8004aaa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	461a      	mov	r2, r3
 8004aba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004abc:	643b      	str	r3, [r7, #64]	@ 0x40
 8004abe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ac2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ac4:	e841 2300 	strex	r3, r2, [r1]
 8004ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1e6      	bne.n	8004a9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3308      	adds	r3, #8
 8004ad6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	e853 3f00 	ldrex	r3, [r3]
 8004ade:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	f023 0301 	bic.w	r3, r3, #1
 8004ae6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	3308      	adds	r3, #8
 8004aee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004af0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004af2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004af6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004af8:	e841 2300 	strex	r3, r2, [r1]
 8004afc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1e5      	bne.n	8004ad0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d118      	bne.n	8004b3e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	e853 3f00 	ldrex	r3, [r3]
 8004b18:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	f023 0310 	bic.w	r3, r3, #16
 8004b20:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	461a      	mov	r2, r3
 8004b28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b2a:	61bb      	str	r3, [r7, #24]
 8004b2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2e:	6979      	ldr	r1, [r7, #20]
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	e841 2300 	strex	r3, r2, [r1]
 8004b36:	613b      	str	r3, [r7, #16]
   return(result);
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1e6      	bne.n	8004b0c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2220      	movs	r2, #32
 8004b42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004b52:	bf00      	nop
 8004b54:	3754      	adds	r7, #84	@ 0x54
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <__cvt>:
 8004b5e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b62:	ec57 6b10 	vmov	r6, r7, d0
 8004b66:	2f00      	cmp	r7, #0
 8004b68:	460c      	mov	r4, r1
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	463b      	mov	r3, r7
 8004b6e:	bfbb      	ittet	lt
 8004b70:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004b74:	461f      	movlt	r7, r3
 8004b76:	2300      	movge	r3, #0
 8004b78:	232d      	movlt	r3, #45	@ 0x2d
 8004b7a:	700b      	strb	r3, [r1, #0]
 8004b7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004b7e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004b82:	4691      	mov	r9, r2
 8004b84:	f023 0820 	bic.w	r8, r3, #32
 8004b88:	bfbc      	itt	lt
 8004b8a:	4632      	movlt	r2, r6
 8004b8c:	4616      	movlt	r6, r2
 8004b8e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004b92:	d005      	beq.n	8004ba0 <__cvt+0x42>
 8004b94:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004b98:	d100      	bne.n	8004b9c <__cvt+0x3e>
 8004b9a:	3401      	adds	r4, #1
 8004b9c:	2102      	movs	r1, #2
 8004b9e:	e000      	b.n	8004ba2 <__cvt+0x44>
 8004ba0:	2103      	movs	r1, #3
 8004ba2:	ab03      	add	r3, sp, #12
 8004ba4:	9301      	str	r3, [sp, #4]
 8004ba6:	ab02      	add	r3, sp, #8
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	ec47 6b10 	vmov	d0, r6, r7
 8004bae:	4653      	mov	r3, sl
 8004bb0:	4622      	mov	r2, r4
 8004bb2:	f001 f875 	bl	8005ca0 <_dtoa_r>
 8004bb6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004bba:	4605      	mov	r5, r0
 8004bbc:	d119      	bne.n	8004bf2 <__cvt+0x94>
 8004bbe:	f019 0f01 	tst.w	r9, #1
 8004bc2:	d00e      	beq.n	8004be2 <__cvt+0x84>
 8004bc4:	eb00 0904 	add.w	r9, r0, r4
 8004bc8:	2200      	movs	r2, #0
 8004bca:	2300      	movs	r3, #0
 8004bcc:	4630      	mov	r0, r6
 8004bce:	4639      	mov	r1, r7
 8004bd0:	f7fb ff7a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004bd4:	b108      	cbz	r0, 8004bda <__cvt+0x7c>
 8004bd6:	f8cd 900c 	str.w	r9, [sp, #12]
 8004bda:	2230      	movs	r2, #48	@ 0x30
 8004bdc:	9b03      	ldr	r3, [sp, #12]
 8004bde:	454b      	cmp	r3, r9
 8004be0:	d31e      	bcc.n	8004c20 <__cvt+0xc2>
 8004be2:	9b03      	ldr	r3, [sp, #12]
 8004be4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004be6:	1b5b      	subs	r3, r3, r5
 8004be8:	4628      	mov	r0, r5
 8004bea:	6013      	str	r3, [r2, #0]
 8004bec:	b004      	add	sp, #16
 8004bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bf2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004bf6:	eb00 0904 	add.w	r9, r0, r4
 8004bfa:	d1e5      	bne.n	8004bc8 <__cvt+0x6a>
 8004bfc:	7803      	ldrb	r3, [r0, #0]
 8004bfe:	2b30      	cmp	r3, #48	@ 0x30
 8004c00:	d10a      	bne.n	8004c18 <__cvt+0xba>
 8004c02:	2200      	movs	r2, #0
 8004c04:	2300      	movs	r3, #0
 8004c06:	4630      	mov	r0, r6
 8004c08:	4639      	mov	r1, r7
 8004c0a:	f7fb ff5d 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c0e:	b918      	cbnz	r0, 8004c18 <__cvt+0xba>
 8004c10:	f1c4 0401 	rsb	r4, r4, #1
 8004c14:	f8ca 4000 	str.w	r4, [sl]
 8004c18:	f8da 3000 	ldr.w	r3, [sl]
 8004c1c:	4499      	add	r9, r3
 8004c1e:	e7d3      	b.n	8004bc8 <__cvt+0x6a>
 8004c20:	1c59      	adds	r1, r3, #1
 8004c22:	9103      	str	r1, [sp, #12]
 8004c24:	701a      	strb	r2, [r3, #0]
 8004c26:	e7d9      	b.n	8004bdc <__cvt+0x7e>

08004c28 <__exponent>:
 8004c28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c2a:	2900      	cmp	r1, #0
 8004c2c:	bfba      	itte	lt
 8004c2e:	4249      	neglt	r1, r1
 8004c30:	232d      	movlt	r3, #45	@ 0x2d
 8004c32:	232b      	movge	r3, #43	@ 0x2b
 8004c34:	2909      	cmp	r1, #9
 8004c36:	7002      	strb	r2, [r0, #0]
 8004c38:	7043      	strb	r3, [r0, #1]
 8004c3a:	dd29      	ble.n	8004c90 <__exponent+0x68>
 8004c3c:	f10d 0307 	add.w	r3, sp, #7
 8004c40:	461d      	mov	r5, r3
 8004c42:	270a      	movs	r7, #10
 8004c44:	461a      	mov	r2, r3
 8004c46:	fbb1 f6f7 	udiv	r6, r1, r7
 8004c4a:	fb07 1416 	mls	r4, r7, r6, r1
 8004c4e:	3430      	adds	r4, #48	@ 0x30
 8004c50:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004c54:	460c      	mov	r4, r1
 8004c56:	2c63      	cmp	r4, #99	@ 0x63
 8004c58:	f103 33ff 	add.w	r3, r3, #4294967295
 8004c5c:	4631      	mov	r1, r6
 8004c5e:	dcf1      	bgt.n	8004c44 <__exponent+0x1c>
 8004c60:	3130      	adds	r1, #48	@ 0x30
 8004c62:	1e94      	subs	r4, r2, #2
 8004c64:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004c68:	1c41      	adds	r1, r0, #1
 8004c6a:	4623      	mov	r3, r4
 8004c6c:	42ab      	cmp	r3, r5
 8004c6e:	d30a      	bcc.n	8004c86 <__exponent+0x5e>
 8004c70:	f10d 0309 	add.w	r3, sp, #9
 8004c74:	1a9b      	subs	r3, r3, r2
 8004c76:	42ac      	cmp	r4, r5
 8004c78:	bf88      	it	hi
 8004c7a:	2300      	movhi	r3, #0
 8004c7c:	3302      	adds	r3, #2
 8004c7e:	4403      	add	r3, r0
 8004c80:	1a18      	subs	r0, r3, r0
 8004c82:	b003      	add	sp, #12
 8004c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c86:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004c8a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004c8e:	e7ed      	b.n	8004c6c <__exponent+0x44>
 8004c90:	2330      	movs	r3, #48	@ 0x30
 8004c92:	3130      	adds	r1, #48	@ 0x30
 8004c94:	7083      	strb	r3, [r0, #2]
 8004c96:	70c1      	strb	r1, [r0, #3]
 8004c98:	1d03      	adds	r3, r0, #4
 8004c9a:	e7f1      	b.n	8004c80 <__exponent+0x58>

08004c9c <_printf_float>:
 8004c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca0:	b08d      	sub	sp, #52	@ 0x34
 8004ca2:	460c      	mov	r4, r1
 8004ca4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004ca8:	4616      	mov	r6, r2
 8004caa:	461f      	mov	r7, r3
 8004cac:	4605      	mov	r5, r0
 8004cae:	f000 feef 	bl	8005a90 <_localeconv_r>
 8004cb2:	6803      	ldr	r3, [r0, #0]
 8004cb4:	9304      	str	r3, [sp, #16]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fb fada 	bl	8000270 <strlen>
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8004cc0:	f8d8 3000 	ldr.w	r3, [r8]
 8004cc4:	9005      	str	r0, [sp, #20]
 8004cc6:	3307      	adds	r3, #7
 8004cc8:	f023 0307 	bic.w	r3, r3, #7
 8004ccc:	f103 0208 	add.w	r2, r3, #8
 8004cd0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004cd4:	f8d4 b000 	ldr.w	fp, [r4]
 8004cd8:	f8c8 2000 	str.w	r2, [r8]
 8004cdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004ce0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004ce4:	9307      	str	r3, [sp, #28]
 8004ce6:	f8cd 8018 	str.w	r8, [sp, #24]
 8004cea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004cee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004cf2:	4b9c      	ldr	r3, [pc, #624]	@ (8004f64 <_printf_float+0x2c8>)
 8004cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8004cf8:	f7fb ff18 	bl	8000b2c <__aeabi_dcmpun>
 8004cfc:	bb70      	cbnz	r0, 8004d5c <_printf_float+0xc0>
 8004cfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d02:	4b98      	ldr	r3, [pc, #608]	@ (8004f64 <_printf_float+0x2c8>)
 8004d04:	f04f 32ff 	mov.w	r2, #4294967295
 8004d08:	f7fb fef2 	bl	8000af0 <__aeabi_dcmple>
 8004d0c:	bb30      	cbnz	r0, 8004d5c <_printf_float+0xc0>
 8004d0e:	2200      	movs	r2, #0
 8004d10:	2300      	movs	r3, #0
 8004d12:	4640      	mov	r0, r8
 8004d14:	4649      	mov	r1, r9
 8004d16:	f7fb fee1 	bl	8000adc <__aeabi_dcmplt>
 8004d1a:	b110      	cbz	r0, 8004d22 <_printf_float+0x86>
 8004d1c:	232d      	movs	r3, #45	@ 0x2d
 8004d1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d22:	4a91      	ldr	r2, [pc, #580]	@ (8004f68 <_printf_float+0x2cc>)
 8004d24:	4b91      	ldr	r3, [pc, #580]	@ (8004f6c <_printf_float+0x2d0>)
 8004d26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004d2a:	bf94      	ite	ls
 8004d2c:	4690      	movls	r8, r2
 8004d2e:	4698      	movhi	r8, r3
 8004d30:	2303      	movs	r3, #3
 8004d32:	6123      	str	r3, [r4, #16]
 8004d34:	f02b 0304 	bic.w	r3, fp, #4
 8004d38:	6023      	str	r3, [r4, #0]
 8004d3a:	f04f 0900 	mov.w	r9, #0
 8004d3e:	9700      	str	r7, [sp, #0]
 8004d40:	4633      	mov	r3, r6
 8004d42:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004d44:	4621      	mov	r1, r4
 8004d46:	4628      	mov	r0, r5
 8004d48:	f000 f9d2 	bl	80050f0 <_printf_common>
 8004d4c:	3001      	adds	r0, #1
 8004d4e:	f040 808d 	bne.w	8004e6c <_printf_float+0x1d0>
 8004d52:	f04f 30ff 	mov.w	r0, #4294967295
 8004d56:	b00d      	add	sp, #52	@ 0x34
 8004d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d5c:	4642      	mov	r2, r8
 8004d5e:	464b      	mov	r3, r9
 8004d60:	4640      	mov	r0, r8
 8004d62:	4649      	mov	r1, r9
 8004d64:	f7fb fee2 	bl	8000b2c <__aeabi_dcmpun>
 8004d68:	b140      	cbz	r0, 8004d7c <_printf_float+0xe0>
 8004d6a:	464b      	mov	r3, r9
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	bfbc      	itt	lt
 8004d70:	232d      	movlt	r3, #45	@ 0x2d
 8004d72:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004d76:	4a7e      	ldr	r2, [pc, #504]	@ (8004f70 <_printf_float+0x2d4>)
 8004d78:	4b7e      	ldr	r3, [pc, #504]	@ (8004f74 <_printf_float+0x2d8>)
 8004d7a:	e7d4      	b.n	8004d26 <_printf_float+0x8a>
 8004d7c:	6863      	ldr	r3, [r4, #4]
 8004d7e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004d82:	9206      	str	r2, [sp, #24]
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	d13b      	bne.n	8004e00 <_printf_float+0x164>
 8004d88:	2306      	movs	r3, #6
 8004d8a:	6063      	str	r3, [r4, #4]
 8004d8c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004d90:	2300      	movs	r3, #0
 8004d92:	6022      	str	r2, [r4, #0]
 8004d94:	9303      	str	r3, [sp, #12]
 8004d96:	ab0a      	add	r3, sp, #40	@ 0x28
 8004d98:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004d9c:	ab09      	add	r3, sp, #36	@ 0x24
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	6861      	ldr	r1, [r4, #4]
 8004da2:	ec49 8b10 	vmov	d0, r8, r9
 8004da6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004daa:	4628      	mov	r0, r5
 8004dac:	f7ff fed7 	bl	8004b5e <__cvt>
 8004db0:	9b06      	ldr	r3, [sp, #24]
 8004db2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004db4:	2b47      	cmp	r3, #71	@ 0x47
 8004db6:	4680      	mov	r8, r0
 8004db8:	d129      	bne.n	8004e0e <_printf_float+0x172>
 8004dba:	1cc8      	adds	r0, r1, #3
 8004dbc:	db02      	blt.n	8004dc4 <_printf_float+0x128>
 8004dbe:	6863      	ldr	r3, [r4, #4]
 8004dc0:	4299      	cmp	r1, r3
 8004dc2:	dd41      	ble.n	8004e48 <_printf_float+0x1ac>
 8004dc4:	f1aa 0a02 	sub.w	sl, sl, #2
 8004dc8:	fa5f fa8a 	uxtb.w	sl, sl
 8004dcc:	3901      	subs	r1, #1
 8004dce:	4652      	mov	r2, sl
 8004dd0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004dd4:	9109      	str	r1, [sp, #36]	@ 0x24
 8004dd6:	f7ff ff27 	bl	8004c28 <__exponent>
 8004dda:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004ddc:	1813      	adds	r3, r2, r0
 8004dde:	2a01      	cmp	r2, #1
 8004de0:	4681      	mov	r9, r0
 8004de2:	6123      	str	r3, [r4, #16]
 8004de4:	dc02      	bgt.n	8004dec <_printf_float+0x150>
 8004de6:	6822      	ldr	r2, [r4, #0]
 8004de8:	07d2      	lsls	r2, r2, #31
 8004dea:	d501      	bpl.n	8004df0 <_printf_float+0x154>
 8004dec:	3301      	adds	r3, #1
 8004dee:	6123      	str	r3, [r4, #16]
 8004df0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d0a2      	beq.n	8004d3e <_printf_float+0xa2>
 8004df8:	232d      	movs	r3, #45	@ 0x2d
 8004dfa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dfe:	e79e      	b.n	8004d3e <_printf_float+0xa2>
 8004e00:	9a06      	ldr	r2, [sp, #24]
 8004e02:	2a47      	cmp	r2, #71	@ 0x47
 8004e04:	d1c2      	bne.n	8004d8c <_printf_float+0xf0>
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1c0      	bne.n	8004d8c <_printf_float+0xf0>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e7bd      	b.n	8004d8a <_printf_float+0xee>
 8004e0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004e12:	d9db      	bls.n	8004dcc <_printf_float+0x130>
 8004e14:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004e18:	d118      	bne.n	8004e4c <_printf_float+0x1b0>
 8004e1a:	2900      	cmp	r1, #0
 8004e1c:	6863      	ldr	r3, [r4, #4]
 8004e1e:	dd0b      	ble.n	8004e38 <_printf_float+0x19c>
 8004e20:	6121      	str	r1, [r4, #16]
 8004e22:	b913      	cbnz	r3, 8004e2a <_printf_float+0x18e>
 8004e24:	6822      	ldr	r2, [r4, #0]
 8004e26:	07d0      	lsls	r0, r2, #31
 8004e28:	d502      	bpl.n	8004e30 <_printf_float+0x194>
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	440b      	add	r3, r1
 8004e2e:	6123      	str	r3, [r4, #16]
 8004e30:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004e32:	f04f 0900 	mov.w	r9, #0
 8004e36:	e7db      	b.n	8004df0 <_printf_float+0x154>
 8004e38:	b913      	cbnz	r3, 8004e40 <_printf_float+0x1a4>
 8004e3a:	6822      	ldr	r2, [r4, #0]
 8004e3c:	07d2      	lsls	r2, r2, #31
 8004e3e:	d501      	bpl.n	8004e44 <_printf_float+0x1a8>
 8004e40:	3302      	adds	r3, #2
 8004e42:	e7f4      	b.n	8004e2e <_printf_float+0x192>
 8004e44:	2301      	movs	r3, #1
 8004e46:	e7f2      	b.n	8004e2e <_printf_float+0x192>
 8004e48:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004e4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e4e:	4299      	cmp	r1, r3
 8004e50:	db05      	blt.n	8004e5e <_printf_float+0x1c2>
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	6121      	str	r1, [r4, #16]
 8004e56:	07d8      	lsls	r0, r3, #31
 8004e58:	d5ea      	bpl.n	8004e30 <_printf_float+0x194>
 8004e5a:	1c4b      	adds	r3, r1, #1
 8004e5c:	e7e7      	b.n	8004e2e <_printf_float+0x192>
 8004e5e:	2900      	cmp	r1, #0
 8004e60:	bfd4      	ite	le
 8004e62:	f1c1 0202 	rsble	r2, r1, #2
 8004e66:	2201      	movgt	r2, #1
 8004e68:	4413      	add	r3, r2
 8004e6a:	e7e0      	b.n	8004e2e <_printf_float+0x192>
 8004e6c:	6823      	ldr	r3, [r4, #0]
 8004e6e:	055a      	lsls	r2, r3, #21
 8004e70:	d407      	bmi.n	8004e82 <_printf_float+0x1e6>
 8004e72:	6923      	ldr	r3, [r4, #16]
 8004e74:	4642      	mov	r2, r8
 8004e76:	4631      	mov	r1, r6
 8004e78:	4628      	mov	r0, r5
 8004e7a:	47b8      	blx	r7
 8004e7c:	3001      	adds	r0, #1
 8004e7e:	d12b      	bne.n	8004ed8 <_printf_float+0x23c>
 8004e80:	e767      	b.n	8004d52 <_printf_float+0xb6>
 8004e82:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004e86:	f240 80dd 	bls.w	8005044 <_printf_float+0x3a8>
 8004e8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004e8e:	2200      	movs	r2, #0
 8004e90:	2300      	movs	r3, #0
 8004e92:	f7fb fe19 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e96:	2800      	cmp	r0, #0
 8004e98:	d033      	beq.n	8004f02 <_printf_float+0x266>
 8004e9a:	4a37      	ldr	r2, [pc, #220]	@ (8004f78 <_printf_float+0x2dc>)
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	4631      	mov	r1, r6
 8004ea0:	4628      	mov	r0, r5
 8004ea2:	47b8      	blx	r7
 8004ea4:	3001      	adds	r0, #1
 8004ea6:	f43f af54 	beq.w	8004d52 <_printf_float+0xb6>
 8004eaa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004eae:	4543      	cmp	r3, r8
 8004eb0:	db02      	blt.n	8004eb8 <_printf_float+0x21c>
 8004eb2:	6823      	ldr	r3, [r4, #0]
 8004eb4:	07d8      	lsls	r0, r3, #31
 8004eb6:	d50f      	bpl.n	8004ed8 <_printf_float+0x23c>
 8004eb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ebc:	4631      	mov	r1, r6
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	47b8      	blx	r7
 8004ec2:	3001      	adds	r0, #1
 8004ec4:	f43f af45 	beq.w	8004d52 <_printf_float+0xb6>
 8004ec8:	f04f 0900 	mov.w	r9, #0
 8004ecc:	f108 38ff 	add.w	r8, r8, #4294967295
 8004ed0:	f104 0a1a 	add.w	sl, r4, #26
 8004ed4:	45c8      	cmp	r8, r9
 8004ed6:	dc09      	bgt.n	8004eec <_printf_float+0x250>
 8004ed8:	6823      	ldr	r3, [r4, #0]
 8004eda:	079b      	lsls	r3, r3, #30
 8004edc:	f100 8103 	bmi.w	80050e6 <_printf_float+0x44a>
 8004ee0:	68e0      	ldr	r0, [r4, #12]
 8004ee2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ee4:	4298      	cmp	r0, r3
 8004ee6:	bfb8      	it	lt
 8004ee8:	4618      	movlt	r0, r3
 8004eea:	e734      	b.n	8004d56 <_printf_float+0xba>
 8004eec:	2301      	movs	r3, #1
 8004eee:	4652      	mov	r2, sl
 8004ef0:	4631      	mov	r1, r6
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	47b8      	blx	r7
 8004ef6:	3001      	adds	r0, #1
 8004ef8:	f43f af2b 	beq.w	8004d52 <_printf_float+0xb6>
 8004efc:	f109 0901 	add.w	r9, r9, #1
 8004f00:	e7e8      	b.n	8004ed4 <_printf_float+0x238>
 8004f02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	dc39      	bgt.n	8004f7c <_printf_float+0x2e0>
 8004f08:	4a1b      	ldr	r2, [pc, #108]	@ (8004f78 <_printf_float+0x2dc>)
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	4631      	mov	r1, r6
 8004f0e:	4628      	mov	r0, r5
 8004f10:	47b8      	blx	r7
 8004f12:	3001      	adds	r0, #1
 8004f14:	f43f af1d 	beq.w	8004d52 <_printf_float+0xb6>
 8004f18:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004f1c:	ea59 0303 	orrs.w	r3, r9, r3
 8004f20:	d102      	bne.n	8004f28 <_printf_float+0x28c>
 8004f22:	6823      	ldr	r3, [r4, #0]
 8004f24:	07d9      	lsls	r1, r3, #31
 8004f26:	d5d7      	bpl.n	8004ed8 <_printf_float+0x23c>
 8004f28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f2c:	4631      	mov	r1, r6
 8004f2e:	4628      	mov	r0, r5
 8004f30:	47b8      	blx	r7
 8004f32:	3001      	adds	r0, #1
 8004f34:	f43f af0d 	beq.w	8004d52 <_printf_float+0xb6>
 8004f38:	f04f 0a00 	mov.w	sl, #0
 8004f3c:	f104 0b1a 	add.w	fp, r4, #26
 8004f40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f42:	425b      	negs	r3, r3
 8004f44:	4553      	cmp	r3, sl
 8004f46:	dc01      	bgt.n	8004f4c <_printf_float+0x2b0>
 8004f48:	464b      	mov	r3, r9
 8004f4a:	e793      	b.n	8004e74 <_printf_float+0x1d8>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	465a      	mov	r2, fp
 8004f50:	4631      	mov	r1, r6
 8004f52:	4628      	mov	r0, r5
 8004f54:	47b8      	blx	r7
 8004f56:	3001      	adds	r0, #1
 8004f58:	f43f aefb 	beq.w	8004d52 <_printf_float+0xb6>
 8004f5c:	f10a 0a01 	add.w	sl, sl, #1
 8004f60:	e7ee      	b.n	8004f40 <_printf_float+0x2a4>
 8004f62:	bf00      	nop
 8004f64:	7fefffff 	.word	0x7fefffff
 8004f68:	080092d0 	.word	0x080092d0
 8004f6c:	080092d4 	.word	0x080092d4
 8004f70:	080092d8 	.word	0x080092d8
 8004f74:	080092dc 	.word	0x080092dc
 8004f78:	080092e0 	.word	0x080092e0
 8004f7c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004f7e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004f82:	4553      	cmp	r3, sl
 8004f84:	bfa8      	it	ge
 8004f86:	4653      	movge	r3, sl
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	4699      	mov	r9, r3
 8004f8c:	dc36      	bgt.n	8004ffc <_printf_float+0x360>
 8004f8e:	f04f 0b00 	mov.w	fp, #0
 8004f92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f96:	f104 021a 	add.w	r2, r4, #26
 8004f9a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004f9c:	9306      	str	r3, [sp, #24]
 8004f9e:	eba3 0309 	sub.w	r3, r3, r9
 8004fa2:	455b      	cmp	r3, fp
 8004fa4:	dc31      	bgt.n	800500a <_printf_float+0x36e>
 8004fa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fa8:	459a      	cmp	sl, r3
 8004faa:	dc3a      	bgt.n	8005022 <_printf_float+0x386>
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	07da      	lsls	r2, r3, #31
 8004fb0:	d437      	bmi.n	8005022 <_printf_float+0x386>
 8004fb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fb4:	ebaa 0903 	sub.w	r9, sl, r3
 8004fb8:	9b06      	ldr	r3, [sp, #24]
 8004fba:	ebaa 0303 	sub.w	r3, sl, r3
 8004fbe:	4599      	cmp	r9, r3
 8004fc0:	bfa8      	it	ge
 8004fc2:	4699      	movge	r9, r3
 8004fc4:	f1b9 0f00 	cmp.w	r9, #0
 8004fc8:	dc33      	bgt.n	8005032 <_printf_float+0x396>
 8004fca:	f04f 0800 	mov.w	r8, #0
 8004fce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004fd2:	f104 0b1a 	add.w	fp, r4, #26
 8004fd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fd8:	ebaa 0303 	sub.w	r3, sl, r3
 8004fdc:	eba3 0309 	sub.w	r3, r3, r9
 8004fe0:	4543      	cmp	r3, r8
 8004fe2:	f77f af79 	ble.w	8004ed8 <_printf_float+0x23c>
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	465a      	mov	r2, fp
 8004fea:	4631      	mov	r1, r6
 8004fec:	4628      	mov	r0, r5
 8004fee:	47b8      	blx	r7
 8004ff0:	3001      	adds	r0, #1
 8004ff2:	f43f aeae 	beq.w	8004d52 <_printf_float+0xb6>
 8004ff6:	f108 0801 	add.w	r8, r8, #1
 8004ffa:	e7ec      	b.n	8004fd6 <_printf_float+0x33a>
 8004ffc:	4642      	mov	r2, r8
 8004ffe:	4631      	mov	r1, r6
 8005000:	4628      	mov	r0, r5
 8005002:	47b8      	blx	r7
 8005004:	3001      	adds	r0, #1
 8005006:	d1c2      	bne.n	8004f8e <_printf_float+0x2f2>
 8005008:	e6a3      	b.n	8004d52 <_printf_float+0xb6>
 800500a:	2301      	movs	r3, #1
 800500c:	4631      	mov	r1, r6
 800500e:	4628      	mov	r0, r5
 8005010:	9206      	str	r2, [sp, #24]
 8005012:	47b8      	blx	r7
 8005014:	3001      	adds	r0, #1
 8005016:	f43f ae9c 	beq.w	8004d52 <_printf_float+0xb6>
 800501a:	9a06      	ldr	r2, [sp, #24]
 800501c:	f10b 0b01 	add.w	fp, fp, #1
 8005020:	e7bb      	b.n	8004f9a <_printf_float+0x2fe>
 8005022:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005026:	4631      	mov	r1, r6
 8005028:	4628      	mov	r0, r5
 800502a:	47b8      	blx	r7
 800502c:	3001      	adds	r0, #1
 800502e:	d1c0      	bne.n	8004fb2 <_printf_float+0x316>
 8005030:	e68f      	b.n	8004d52 <_printf_float+0xb6>
 8005032:	9a06      	ldr	r2, [sp, #24]
 8005034:	464b      	mov	r3, r9
 8005036:	4442      	add	r2, r8
 8005038:	4631      	mov	r1, r6
 800503a:	4628      	mov	r0, r5
 800503c:	47b8      	blx	r7
 800503e:	3001      	adds	r0, #1
 8005040:	d1c3      	bne.n	8004fca <_printf_float+0x32e>
 8005042:	e686      	b.n	8004d52 <_printf_float+0xb6>
 8005044:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005048:	f1ba 0f01 	cmp.w	sl, #1
 800504c:	dc01      	bgt.n	8005052 <_printf_float+0x3b6>
 800504e:	07db      	lsls	r3, r3, #31
 8005050:	d536      	bpl.n	80050c0 <_printf_float+0x424>
 8005052:	2301      	movs	r3, #1
 8005054:	4642      	mov	r2, r8
 8005056:	4631      	mov	r1, r6
 8005058:	4628      	mov	r0, r5
 800505a:	47b8      	blx	r7
 800505c:	3001      	adds	r0, #1
 800505e:	f43f ae78 	beq.w	8004d52 <_printf_float+0xb6>
 8005062:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005066:	4631      	mov	r1, r6
 8005068:	4628      	mov	r0, r5
 800506a:	47b8      	blx	r7
 800506c:	3001      	adds	r0, #1
 800506e:	f43f ae70 	beq.w	8004d52 <_printf_float+0xb6>
 8005072:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005076:	2200      	movs	r2, #0
 8005078:	2300      	movs	r3, #0
 800507a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800507e:	f7fb fd23 	bl	8000ac8 <__aeabi_dcmpeq>
 8005082:	b9c0      	cbnz	r0, 80050b6 <_printf_float+0x41a>
 8005084:	4653      	mov	r3, sl
 8005086:	f108 0201 	add.w	r2, r8, #1
 800508a:	4631      	mov	r1, r6
 800508c:	4628      	mov	r0, r5
 800508e:	47b8      	blx	r7
 8005090:	3001      	adds	r0, #1
 8005092:	d10c      	bne.n	80050ae <_printf_float+0x412>
 8005094:	e65d      	b.n	8004d52 <_printf_float+0xb6>
 8005096:	2301      	movs	r3, #1
 8005098:	465a      	mov	r2, fp
 800509a:	4631      	mov	r1, r6
 800509c:	4628      	mov	r0, r5
 800509e:	47b8      	blx	r7
 80050a0:	3001      	adds	r0, #1
 80050a2:	f43f ae56 	beq.w	8004d52 <_printf_float+0xb6>
 80050a6:	f108 0801 	add.w	r8, r8, #1
 80050aa:	45d0      	cmp	r8, sl
 80050ac:	dbf3      	blt.n	8005096 <_printf_float+0x3fa>
 80050ae:	464b      	mov	r3, r9
 80050b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80050b4:	e6df      	b.n	8004e76 <_printf_float+0x1da>
 80050b6:	f04f 0800 	mov.w	r8, #0
 80050ba:	f104 0b1a 	add.w	fp, r4, #26
 80050be:	e7f4      	b.n	80050aa <_printf_float+0x40e>
 80050c0:	2301      	movs	r3, #1
 80050c2:	4642      	mov	r2, r8
 80050c4:	e7e1      	b.n	800508a <_printf_float+0x3ee>
 80050c6:	2301      	movs	r3, #1
 80050c8:	464a      	mov	r2, r9
 80050ca:	4631      	mov	r1, r6
 80050cc:	4628      	mov	r0, r5
 80050ce:	47b8      	blx	r7
 80050d0:	3001      	adds	r0, #1
 80050d2:	f43f ae3e 	beq.w	8004d52 <_printf_float+0xb6>
 80050d6:	f108 0801 	add.w	r8, r8, #1
 80050da:	68e3      	ldr	r3, [r4, #12]
 80050dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80050de:	1a5b      	subs	r3, r3, r1
 80050e0:	4543      	cmp	r3, r8
 80050e2:	dcf0      	bgt.n	80050c6 <_printf_float+0x42a>
 80050e4:	e6fc      	b.n	8004ee0 <_printf_float+0x244>
 80050e6:	f04f 0800 	mov.w	r8, #0
 80050ea:	f104 0919 	add.w	r9, r4, #25
 80050ee:	e7f4      	b.n	80050da <_printf_float+0x43e>

080050f0 <_printf_common>:
 80050f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050f4:	4616      	mov	r6, r2
 80050f6:	4698      	mov	r8, r3
 80050f8:	688a      	ldr	r2, [r1, #8]
 80050fa:	690b      	ldr	r3, [r1, #16]
 80050fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005100:	4293      	cmp	r3, r2
 8005102:	bfb8      	it	lt
 8005104:	4613      	movlt	r3, r2
 8005106:	6033      	str	r3, [r6, #0]
 8005108:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800510c:	4607      	mov	r7, r0
 800510e:	460c      	mov	r4, r1
 8005110:	b10a      	cbz	r2, 8005116 <_printf_common+0x26>
 8005112:	3301      	adds	r3, #1
 8005114:	6033      	str	r3, [r6, #0]
 8005116:	6823      	ldr	r3, [r4, #0]
 8005118:	0699      	lsls	r1, r3, #26
 800511a:	bf42      	ittt	mi
 800511c:	6833      	ldrmi	r3, [r6, #0]
 800511e:	3302      	addmi	r3, #2
 8005120:	6033      	strmi	r3, [r6, #0]
 8005122:	6825      	ldr	r5, [r4, #0]
 8005124:	f015 0506 	ands.w	r5, r5, #6
 8005128:	d106      	bne.n	8005138 <_printf_common+0x48>
 800512a:	f104 0a19 	add.w	sl, r4, #25
 800512e:	68e3      	ldr	r3, [r4, #12]
 8005130:	6832      	ldr	r2, [r6, #0]
 8005132:	1a9b      	subs	r3, r3, r2
 8005134:	42ab      	cmp	r3, r5
 8005136:	dc26      	bgt.n	8005186 <_printf_common+0x96>
 8005138:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800513c:	6822      	ldr	r2, [r4, #0]
 800513e:	3b00      	subs	r3, #0
 8005140:	bf18      	it	ne
 8005142:	2301      	movne	r3, #1
 8005144:	0692      	lsls	r2, r2, #26
 8005146:	d42b      	bmi.n	80051a0 <_printf_common+0xb0>
 8005148:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800514c:	4641      	mov	r1, r8
 800514e:	4638      	mov	r0, r7
 8005150:	47c8      	blx	r9
 8005152:	3001      	adds	r0, #1
 8005154:	d01e      	beq.n	8005194 <_printf_common+0xa4>
 8005156:	6823      	ldr	r3, [r4, #0]
 8005158:	6922      	ldr	r2, [r4, #16]
 800515a:	f003 0306 	and.w	r3, r3, #6
 800515e:	2b04      	cmp	r3, #4
 8005160:	bf02      	ittt	eq
 8005162:	68e5      	ldreq	r5, [r4, #12]
 8005164:	6833      	ldreq	r3, [r6, #0]
 8005166:	1aed      	subeq	r5, r5, r3
 8005168:	68a3      	ldr	r3, [r4, #8]
 800516a:	bf0c      	ite	eq
 800516c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005170:	2500      	movne	r5, #0
 8005172:	4293      	cmp	r3, r2
 8005174:	bfc4      	itt	gt
 8005176:	1a9b      	subgt	r3, r3, r2
 8005178:	18ed      	addgt	r5, r5, r3
 800517a:	2600      	movs	r6, #0
 800517c:	341a      	adds	r4, #26
 800517e:	42b5      	cmp	r5, r6
 8005180:	d11a      	bne.n	80051b8 <_printf_common+0xc8>
 8005182:	2000      	movs	r0, #0
 8005184:	e008      	b.n	8005198 <_printf_common+0xa8>
 8005186:	2301      	movs	r3, #1
 8005188:	4652      	mov	r2, sl
 800518a:	4641      	mov	r1, r8
 800518c:	4638      	mov	r0, r7
 800518e:	47c8      	blx	r9
 8005190:	3001      	adds	r0, #1
 8005192:	d103      	bne.n	800519c <_printf_common+0xac>
 8005194:	f04f 30ff 	mov.w	r0, #4294967295
 8005198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800519c:	3501      	adds	r5, #1
 800519e:	e7c6      	b.n	800512e <_printf_common+0x3e>
 80051a0:	18e1      	adds	r1, r4, r3
 80051a2:	1c5a      	adds	r2, r3, #1
 80051a4:	2030      	movs	r0, #48	@ 0x30
 80051a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80051aa:	4422      	add	r2, r4
 80051ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80051b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80051b4:	3302      	adds	r3, #2
 80051b6:	e7c7      	b.n	8005148 <_printf_common+0x58>
 80051b8:	2301      	movs	r3, #1
 80051ba:	4622      	mov	r2, r4
 80051bc:	4641      	mov	r1, r8
 80051be:	4638      	mov	r0, r7
 80051c0:	47c8      	blx	r9
 80051c2:	3001      	adds	r0, #1
 80051c4:	d0e6      	beq.n	8005194 <_printf_common+0xa4>
 80051c6:	3601      	adds	r6, #1
 80051c8:	e7d9      	b.n	800517e <_printf_common+0x8e>
	...

080051cc <_printf_i>:
 80051cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051d0:	7e0f      	ldrb	r7, [r1, #24]
 80051d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80051d4:	2f78      	cmp	r7, #120	@ 0x78
 80051d6:	4691      	mov	r9, r2
 80051d8:	4680      	mov	r8, r0
 80051da:	460c      	mov	r4, r1
 80051dc:	469a      	mov	sl, r3
 80051de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80051e2:	d807      	bhi.n	80051f4 <_printf_i+0x28>
 80051e4:	2f62      	cmp	r7, #98	@ 0x62
 80051e6:	d80a      	bhi.n	80051fe <_printf_i+0x32>
 80051e8:	2f00      	cmp	r7, #0
 80051ea:	f000 80d2 	beq.w	8005392 <_printf_i+0x1c6>
 80051ee:	2f58      	cmp	r7, #88	@ 0x58
 80051f0:	f000 80b9 	beq.w	8005366 <_printf_i+0x19a>
 80051f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80051fc:	e03a      	b.n	8005274 <_printf_i+0xa8>
 80051fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005202:	2b15      	cmp	r3, #21
 8005204:	d8f6      	bhi.n	80051f4 <_printf_i+0x28>
 8005206:	a101      	add	r1, pc, #4	@ (adr r1, 800520c <_printf_i+0x40>)
 8005208:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800520c:	08005265 	.word	0x08005265
 8005210:	08005279 	.word	0x08005279
 8005214:	080051f5 	.word	0x080051f5
 8005218:	080051f5 	.word	0x080051f5
 800521c:	080051f5 	.word	0x080051f5
 8005220:	080051f5 	.word	0x080051f5
 8005224:	08005279 	.word	0x08005279
 8005228:	080051f5 	.word	0x080051f5
 800522c:	080051f5 	.word	0x080051f5
 8005230:	080051f5 	.word	0x080051f5
 8005234:	080051f5 	.word	0x080051f5
 8005238:	08005379 	.word	0x08005379
 800523c:	080052a3 	.word	0x080052a3
 8005240:	08005333 	.word	0x08005333
 8005244:	080051f5 	.word	0x080051f5
 8005248:	080051f5 	.word	0x080051f5
 800524c:	0800539b 	.word	0x0800539b
 8005250:	080051f5 	.word	0x080051f5
 8005254:	080052a3 	.word	0x080052a3
 8005258:	080051f5 	.word	0x080051f5
 800525c:	080051f5 	.word	0x080051f5
 8005260:	0800533b 	.word	0x0800533b
 8005264:	6833      	ldr	r3, [r6, #0]
 8005266:	1d1a      	adds	r2, r3, #4
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6032      	str	r2, [r6, #0]
 800526c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005270:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005274:	2301      	movs	r3, #1
 8005276:	e09d      	b.n	80053b4 <_printf_i+0x1e8>
 8005278:	6833      	ldr	r3, [r6, #0]
 800527a:	6820      	ldr	r0, [r4, #0]
 800527c:	1d19      	adds	r1, r3, #4
 800527e:	6031      	str	r1, [r6, #0]
 8005280:	0606      	lsls	r6, r0, #24
 8005282:	d501      	bpl.n	8005288 <_printf_i+0xbc>
 8005284:	681d      	ldr	r5, [r3, #0]
 8005286:	e003      	b.n	8005290 <_printf_i+0xc4>
 8005288:	0645      	lsls	r5, r0, #25
 800528a:	d5fb      	bpl.n	8005284 <_printf_i+0xb8>
 800528c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005290:	2d00      	cmp	r5, #0
 8005292:	da03      	bge.n	800529c <_printf_i+0xd0>
 8005294:	232d      	movs	r3, #45	@ 0x2d
 8005296:	426d      	negs	r5, r5
 8005298:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800529c:	4859      	ldr	r0, [pc, #356]	@ (8005404 <_printf_i+0x238>)
 800529e:	230a      	movs	r3, #10
 80052a0:	e011      	b.n	80052c6 <_printf_i+0xfa>
 80052a2:	6821      	ldr	r1, [r4, #0]
 80052a4:	6833      	ldr	r3, [r6, #0]
 80052a6:	0608      	lsls	r0, r1, #24
 80052a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80052ac:	d402      	bmi.n	80052b4 <_printf_i+0xe8>
 80052ae:	0649      	lsls	r1, r1, #25
 80052b0:	bf48      	it	mi
 80052b2:	b2ad      	uxthmi	r5, r5
 80052b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80052b6:	4853      	ldr	r0, [pc, #332]	@ (8005404 <_printf_i+0x238>)
 80052b8:	6033      	str	r3, [r6, #0]
 80052ba:	bf14      	ite	ne
 80052bc:	230a      	movne	r3, #10
 80052be:	2308      	moveq	r3, #8
 80052c0:	2100      	movs	r1, #0
 80052c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80052c6:	6866      	ldr	r6, [r4, #4]
 80052c8:	60a6      	str	r6, [r4, #8]
 80052ca:	2e00      	cmp	r6, #0
 80052cc:	bfa2      	ittt	ge
 80052ce:	6821      	ldrge	r1, [r4, #0]
 80052d0:	f021 0104 	bicge.w	r1, r1, #4
 80052d4:	6021      	strge	r1, [r4, #0]
 80052d6:	b90d      	cbnz	r5, 80052dc <_printf_i+0x110>
 80052d8:	2e00      	cmp	r6, #0
 80052da:	d04b      	beq.n	8005374 <_printf_i+0x1a8>
 80052dc:	4616      	mov	r6, r2
 80052de:	fbb5 f1f3 	udiv	r1, r5, r3
 80052e2:	fb03 5711 	mls	r7, r3, r1, r5
 80052e6:	5dc7      	ldrb	r7, [r0, r7]
 80052e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80052ec:	462f      	mov	r7, r5
 80052ee:	42bb      	cmp	r3, r7
 80052f0:	460d      	mov	r5, r1
 80052f2:	d9f4      	bls.n	80052de <_printf_i+0x112>
 80052f4:	2b08      	cmp	r3, #8
 80052f6:	d10b      	bne.n	8005310 <_printf_i+0x144>
 80052f8:	6823      	ldr	r3, [r4, #0]
 80052fa:	07df      	lsls	r7, r3, #31
 80052fc:	d508      	bpl.n	8005310 <_printf_i+0x144>
 80052fe:	6923      	ldr	r3, [r4, #16]
 8005300:	6861      	ldr	r1, [r4, #4]
 8005302:	4299      	cmp	r1, r3
 8005304:	bfde      	ittt	le
 8005306:	2330      	movle	r3, #48	@ 0x30
 8005308:	f806 3c01 	strble.w	r3, [r6, #-1]
 800530c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005310:	1b92      	subs	r2, r2, r6
 8005312:	6122      	str	r2, [r4, #16]
 8005314:	f8cd a000 	str.w	sl, [sp]
 8005318:	464b      	mov	r3, r9
 800531a:	aa03      	add	r2, sp, #12
 800531c:	4621      	mov	r1, r4
 800531e:	4640      	mov	r0, r8
 8005320:	f7ff fee6 	bl	80050f0 <_printf_common>
 8005324:	3001      	adds	r0, #1
 8005326:	d14a      	bne.n	80053be <_printf_i+0x1f2>
 8005328:	f04f 30ff 	mov.w	r0, #4294967295
 800532c:	b004      	add	sp, #16
 800532e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	f043 0320 	orr.w	r3, r3, #32
 8005338:	6023      	str	r3, [r4, #0]
 800533a:	4833      	ldr	r0, [pc, #204]	@ (8005408 <_printf_i+0x23c>)
 800533c:	2778      	movs	r7, #120	@ 0x78
 800533e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005342:	6823      	ldr	r3, [r4, #0]
 8005344:	6831      	ldr	r1, [r6, #0]
 8005346:	061f      	lsls	r7, r3, #24
 8005348:	f851 5b04 	ldr.w	r5, [r1], #4
 800534c:	d402      	bmi.n	8005354 <_printf_i+0x188>
 800534e:	065f      	lsls	r7, r3, #25
 8005350:	bf48      	it	mi
 8005352:	b2ad      	uxthmi	r5, r5
 8005354:	6031      	str	r1, [r6, #0]
 8005356:	07d9      	lsls	r1, r3, #31
 8005358:	bf44      	itt	mi
 800535a:	f043 0320 	orrmi.w	r3, r3, #32
 800535e:	6023      	strmi	r3, [r4, #0]
 8005360:	b11d      	cbz	r5, 800536a <_printf_i+0x19e>
 8005362:	2310      	movs	r3, #16
 8005364:	e7ac      	b.n	80052c0 <_printf_i+0xf4>
 8005366:	4827      	ldr	r0, [pc, #156]	@ (8005404 <_printf_i+0x238>)
 8005368:	e7e9      	b.n	800533e <_printf_i+0x172>
 800536a:	6823      	ldr	r3, [r4, #0]
 800536c:	f023 0320 	bic.w	r3, r3, #32
 8005370:	6023      	str	r3, [r4, #0]
 8005372:	e7f6      	b.n	8005362 <_printf_i+0x196>
 8005374:	4616      	mov	r6, r2
 8005376:	e7bd      	b.n	80052f4 <_printf_i+0x128>
 8005378:	6833      	ldr	r3, [r6, #0]
 800537a:	6825      	ldr	r5, [r4, #0]
 800537c:	6961      	ldr	r1, [r4, #20]
 800537e:	1d18      	adds	r0, r3, #4
 8005380:	6030      	str	r0, [r6, #0]
 8005382:	062e      	lsls	r6, r5, #24
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	d501      	bpl.n	800538c <_printf_i+0x1c0>
 8005388:	6019      	str	r1, [r3, #0]
 800538a:	e002      	b.n	8005392 <_printf_i+0x1c6>
 800538c:	0668      	lsls	r0, r5, #25
 800538e:	d5fb      	bpl.n	8005388 <_printf_i+0x1bc>
 8005390:	8019      	strh	r1, [r3, #0]
 8005392:	2300      	movs	r3, #0
 8005394:	6123      	str	r3, [r4, #16]
 8005396:	4616      	mov	r6, r2
 8005398:	e7bc      	b.n	8005314 <_printf_i+0x148>
 800539a:	6833      	ldr	r3, [r6, #0]
 800539c:	1d1a      	adds	r2, r3, #4
 800539e:	6032      	str	r2, [r6, #0]
 80053a0:	681e      	ldr	r6, [r3, #0]
 80053a2:	6862      	ldr	r2, [r4, #4]
 80053a4:	2100      	movs	r1, #0
 80053a6:	4630      	mov	r0, r6
 80053a8:	f7fa ff12 	bl	80001d0 <memchr>
 80053ac:	b108      	cbz	r0, 80053b2 <_printf_i+0x1e6>
 80053ae:	1b80      	subs	r0, r0, r6
 80053b0:	6060      	str	r0, [r4, #4]
 80053b2:	6863      	ldr	r3, [r4, #4]
 80053b4:	6123      	str	r3, [r4, #16]
 80053b6:	2300      	movs	r3, #0
 80053b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053bc:	e7aa      	b.n	8005314 <_printf_i+0x148>
 80053be:	6923      	ldr	r3, [r4, #16]
 80053c0:	4632      	mov	r2, r6
 80053c2:	4649      	mov	r1, r9
 80053c4:	4640      	mov	r0, r8
 80053c6:	47d0      	blx	sl
 80053c8:	3001      	adds	r0, #1
 80053ca:	d0ad      	beq.n	8005328 <_printf_i+0x15c>
 80053cc:	6823      	ldr	r3, [r4, #0]
 80053ce:	079b      	lsls	r3, r3, #30
 80053d0:	d413      	bmi.n	80053fa <_printf_i+0x22e>
 80053d2:	68e0      	ldr	r0, [r4, #12]
 80053d4:	9b03      	ldr	r3, [sp, #12]
 80053d6:	4298      	cmp	r0, r3
 80053d8:	bfb8      	it	lt
 80053da:	4618      	movlt	r0, r3
 80053dc:	e7a6      	b.n	800532c <_printf_i+0x160>
 80053de:	2301      	movs	r3, #1
 80053e0:	4632      	mov	r2, r6
 80053e2:	4649      	mov	r1, r9
 80053e4:	4640      	mov	r0, r8
 80053e6:	47d0      	blx	sl
 80053e8:	3001      	adds	r0, #1
 80053ea:	d09d      	beq.n	8005328 <_printf_i+0x15c>
 80053ec:	3501      	adds	r5, #1
 80053ee:	68e3      	ldr	r3, [r4, #12]
 80053f0:	9903      	ldr	r1, [sp, #12]
 80053f2:	1a5b      	subs	r3, r3, r1
 80053f4:	42ab      	cmp	r3, r5
 80053f6:	dcf2      	bgt.n	80053de <_printf_i+0x212>
 80053f8:	e7eb      	b.n	80053d2 <_printf_i+0x206>
 80053fa:	2500      	movs	r5, #0
 80053fc:	f104 0619 	add.w	r6, r4, #25
 8005400:	e7f5      	b.n	80053ee <_printf_i+0x222>
 8005402:	bf00      	nop
 8005404:	080092e2 	.word	0x080092e2
 8005408:	080092f3 	.word	0x080092f3

0800540c <_scanf_float>:
 800540c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005410:	b087      	sub	sp, #28
 8005412:	4617      	mov	r7, r2
 8005414:	9303      	str	r3, [sp, #12]
 8005416:	688b      	ldr	r3, [r1, #8]
 8005418:	1e5a      	subs	r2, r3, #1
 800541a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800541e:	bf81      	itttt	hi
 8005420:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005424:	eb03 0b05 	addhi.w	fp, r3, r5
 8005428:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800542c:	608b      	strhi	r3, [r1, #8]
 800542e:	680b      	ldr	r3, [r1, #0]
 8005430:	460a      	mov	r2, r1
 8005432:	f04f 0500 	mov.w	r5, #0
 8005436:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800543a:	f842 3b1c 	str.w	r3, [r2], #28
 800543e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005442:	4680      	mov	r8, r0
 8005444:	460c      	mov	r4, r1
 8005446:	bf98      	it	ls
 8005448:	f04f 0b00 	movls.w	fp, #0
 800544c:	9201      	str	r2, [sp, #4]
 800544e:	4616      	mov	r6, r2
 8005450:	46aa      	mov	sl, r5
 8005452:	46a9      	mov	r9, r5
 8005454:	9502      	str	r5, [sp, #8]
 8005456:	68a2      	ldr	r2, [r4, #8]
 8005458:	b152      	cbz	r2, 8005470 <_scanf_float+0x64>
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	2b4e      	cmp	r3, #78	@ 0x4e
 8005460:	d864      	bhi.n	800552c <_scanf_float+0x120>
 8005462:	2b40      	cmp	r3, #64	@ 0x40
 8005464:	d83c      	bhi.n	80054e0 <_scanf_float+0xd4>
 8005466:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800546a:	b2c8      	uxtb	r0, r1
 800546c:	280e      	cmp	r0, #14
 800546e:	d93a      	bls.n	80054e6 <_scanf_float+0xda>
 8005470:	f1b9 0f00 	cmp.w	r9, #0
 8005474:	d003      	beq.n	800547e <_scanf_float+0x72>
 8005476:	6823      	ldr	r3, [r4, #0]
 8005478:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800547c:	6023      	str	r3, [r4, #0]
 800547e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005482:	f1ba 0f01 	cmp.w	sl, #1
 8005486:	f200 8117 	bhi.w	80056b8 <_scanf_float+0x2ac>
 800548a:	9b01      	ldr	r3, [sp, #4]
 800548c:	429e      	cmp	r6, r3
 800548e:	f200 8108 	bhi.w	80056a2 <_scanf_float+0x296>
 8005492:	2001      	movs	r0, #1
 8005494:	b007      	add	sp, #28
 8005496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800549a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800549e:	2a0d      	cmp	r2, #13
 80054a0:	d8e6      	bhi.n	8005470 <_scanf_float+0x64>
 80054a2:	a101      	add	r1, pc, #4	@ (adr r1, 80054a8 <_scanf_float+0x9c>)
 80054a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80054a8:	080055ef 	.word	0x080055ef
 80054ac:	08005471 	.word	0x08005471
 80054b0:	08005471 	.word	0x08005471
 80054b4:	08005471 	.word	0x08005471
 80054b8:	0800564f 	.word	0x0800564f
 80054bc:	08005627 	.word	0x08005627
 80054c0:	08005471 	.word	0x08005471
 80054c4:	08005471 	.word	0x08005471
 80054c8:	080055fd 	.word	0x080055fd
 80054cc:	08005471 	.word	0x08005471
 80054d0:	08005471 	.word	0x08005471
 80054d4:	08005471 	.word	0x08005471
 80054d8:	08005471 	.word	0x08005471
 80054dc:	080055b5 	.word	0x080055b5
 80054e0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80054e4:	e7db      	b.n	800549e <_scanf_float+0x92>
 80054e6:	290e      	cmp	r1, #14
 80054e8:	d8c2      	bhi.n	8005470 <_scanf_float+0x64>
 80054ea:	a001      	add	r0, pc, #4	@ (adr r0, 80054f0 <_scanf_float+0xe4>)
 80054ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80054f0:	080055a5 	.word	0x080055a5
 80054f4:	08005471 	.word	0x08005471
 80054f8:	080055a5 	.word	0x080055a5
 80054fc:	0800563b 	.word	0x0800563b
 8005500:	08005471 	.word	0x08005471
 8005504:	0800554d 	.word	0x0800554d
 8005508:	0800558b 	.word	0x0800558b
 800550c:	0800558b 	.word	0x0800558b
 8005510:	0800558b 	.word	0x0800558b
 8005514:	0800558b 	.word	0x0800558b
 8005518:	0800558b 	.word	0x0800558b
 800551c:	0800558b 	.word	0x0800558b
 8005520:	0800558b 	.word	0x0800558b
 8005524:	0800558b 	.word	0x0800558b
 8005528:	0800558b 	.word	0x0800558b
 800552c:	2b6e      	cmp	r3, #110	@ 0x6e
 800552e:	d809      	bhi.n	8005544 <_scanf_float+0x138>
 8005530:	2b60      	cmp	r3, #96	@ 0x60
 8005532:	d8b2      	bhi.n	800549a <_scanf_float+0x8e>
 8005534:	2b54      	cmp	r3, #84	@ 0x54
 8005536:	d07b      	beq.n	8005630 <_scanf_float+0x224>
 8005538:	2b59      	cmp	r3, #89	@ 0x59
 800553a:	d199      	bne.n	8005470 <_scanf_float+0x64>
 800553c:	2d07      	cmp	r5, #7
 800553e:	d197      	bne.n	8005470 <_scanf_float+0x64>
 8005540:	2508      	movs	r5, #8
 8005542:	e02c      	b.n	800559e <_scanf_float+0x192>
 8005544:	2b74      	cmp	r3, #116	@ 0x74
 8005546:	d073      	beq.n	8005630 <_scanf_float+0x224>
 8005548:	2b79      	cmp	r3, #121	@ 0x79
 800554a:	e7f6      	b.n	800553a <_scanf_float+0x12e>
 800554c:	6821      	ldr	r1, [r4, #0]
 800554e:	05c8      	lsls	r0, r1, #23
 8005550:	d51b      	bpl.n	800558a <_scanf_float+0x17e>
 8005552:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005556:	6021      	str	r1, [r4, #0]
 8005558:	f109 0901 	add.w	r9, r9, #1
 800555c:	f1bb 0f00 	cmp.w	fp, #0
 8005560:	d003      	beq.n	800556a <_scanf_float+0x15e>
 8005562:	3201      	adds	r2, #1
 8005564:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005568:	60a2      	str	r2, [r4, #8]
 800556a:	68a3      	ldr	r3, [r4, #8]
 800556c:	3b01      	subs	r3, #1
 800556e:	60a3      	str	r3, [r4, #8]
 8005570:	6923      	ldr	r3, [r4, #16]
 8005572:	3301      	adds	r3, #1
 8005574:	6123      	str	r3, [r4, #16]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	3b01      	subs	r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	607b      	str	r3, [r7, #4]
 800557e:	f340 8087 	ble.w	8005690 <_scanf_float+0x284>
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	3301      	adds	r3, #1
 8005586:	603b      	str	r3, [r7, #0]
 8005588:	e765      	b.n	8005456 <_scanf_float+0x4a>
 800558a:	eb1a 0105 	adds.w	r1, sl, r5
 800558e:	f47f af6f 	bne.w	8005470 <_scanf_float+0x64>
 8005592:	6822      	ldr	r2, [r4, #0]
 8005594:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005598:	6022      	str	r2, [r4, #0]
 800559a:	460d      	mov	r5, r1
 800559c:	468a      	mov	sl, r1
 800559e:	f806 3b01 	strb.w	r3, [r6], #1
 80055a2:	e7e2      	b.n	800556a <_scanf_float+0x15e>
 80055a4:	6822      	ldr	r2, [r4, #0]
 80055a6:	0610      	lsls	r0, r2, #24
 80055a8:	f57f af62 	bpl.w	8005470 <_scanf_float+0x64>
 80055ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80055b0:	6022      	str	r2, [r4, #0]
 80055b2:	e7f4      	b.n	800559e <_scanf_float+0x192>
 80055b4:	f1ba 0f00 	cmp.w	sl, #0
 80055b8:	d10e      	bne.n	80055d8 <_scanf_float+0x1cc>
 80055ba:	f1b9 0f00 	cmp.w	r9, #0
 80055be:	d10e      	bne.n	80055de <_scanf_float+0x1d2>
 80055c0:	6822      	ldr	r2, [r4, #0]
 80055c2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80055c6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80055ca:	d108      	bne.n	80055de <_scanf_float+0x1d2>
 80055cc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80055d0:	6022      	str	r2, [r4, #0]
 80055d2:	f04f 0a01 	mov.w	sl, #1
 80055d6:	e7e2      	b.n	800559e <_scanf_float+0x192>
 80055d8:	f1ba 0f02 	cmp.w	sl, #2
 80055dc:	d055      	beq.n	800568a <_scanf_float+0x27e>
 80055de:	2d01      	cmp	r5, #1
 80055e0:	d002      	beq.n	80055e8 <_scanf_float+0x1dc>
 80055e2:	2d04      	cmp	r5, #4
 80055e4:	f47f af44 	bne.w	8005470 <_scanf_float+0x64>
 80055e8:	3501      	adds	r5, #1
 80055ea:	b2ed      	uxtb	r5, r5
 80055ec:	e7d7      	b.n	800559e <_scanf_float+0x192>
 80055ee:	f1ba 0f01 	cmp.w	sl, #1
 80055f2:	f47f af3d 	bne.w	8005470 <_scanf_float+0x64>
 80055f6:	f04f 0a02 	mov.w	sl, #2
 80055fa:	e7d0      	b.n	800559e <_scanf_float+0x192>
 80055fc:	b97d      	cbnz	r5, 800561e <_scanf_float+0x212>
 80055fe:	f1b9 0f00 	cmp.w	r9, #0
 8005602:	f47f af38 	bne.w	8005476 <_scanf_float+0x6a>
 8005606:	6822      	ldr	r2, [r4, #0]
 8005608:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800560c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005610:	f040 8108 	bne.w	8005824 <_scanf_float+0x418>
 8005614:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005618:	6022      	str	r2, [r4, #0]
 800561a:	2501      	movs	r5, #1
 800561c:	e7bf      	b.n	800559e <_scanf_float+0x192>
 800561e:	2d03      	cmp	r5, #3
 8005620:	d0e2      	beq.n	80055e8 <_scanf_float+0x1dc>
 8005622:	2d05      	cmp	r5, #5
 8005624:	e7de      	b.n	80055e4 <_scanf_float+0x1d8>
 8005626:	2d02      	cmp	r5, #2
 8005628:	f47f af22 	bne.w	8005470 <_scanf_float+0x64>
 800562c:	2503      	movs	r5, #3
 800562e:	e7b6      	b.n	800559e <_scanf_float+0x192>
 8005630:	2d06      	cmp	r5, #6
 8005632:	f47f af1d 	bne.w	8005470 <_scanf_float+0x64>
 8005636:	2507      	movs	r5, #7
 8005638:	e7b1      	b.n	800559e <_scanf_float+0x192>
 800563a:	6822      	ldr	r2, [r4, #0]
 800563c:	0591      	lsls	r1, r2, #22
 800563e:	f57f af17 	bpl.w	8005470 <_scanf_float+0x64>
 8005642:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005646:	6022      	str	r2, [r4, #0]
 8005648:	f8cd 9008 	str.w	r9, [sp, #8]
 800564c:	e7a7      	b.n	800559e <_scanf_float+0x192>
 800564e:	6822      	ldr	r2, [r4, #0]
 8005650:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005654:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005658:	d006      	beq.n	8005668 <_scanf_float+0x25c>
 800565a:	0550      	lsls	r0, r2, #21
 800565c:	f57f af08 	bpl.w	8005470 <_scanf_float+0x64>
 8005660:	f1b9 0f00 	cmp.w	r9, #0
 8005664:	f000 80de 	beq.w	8005824 <_scanf_float+0x418>
 8005668:	0591      	lsls	r1, r2, #22
 800566a:	bf58      	it	pl
 800566c:	9902      	ldrpl	r1, [sp, #8]
 800566e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005672:	bf58      	it	pl
 8005674:	eba9 0101 	subpl.w	r1, r9, r1
 8005678:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800567c:	bf58      	it	pl
 800567e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005682:	6022      	str	r2, [r4, #0]
 8005684:	f04f 0900 	mov.w	r9, #0
 8005688:	e789      	b.n	800559e <_scanf_float+0x192>
 800568a:	f04f 0a03 	mov.w	sl, #3
 800568e:	e786      	b.n	800559e <_scanf_float+0x192>
 8005690:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005694:	4639      	mov	r1, r7
 8005696:	4640      	mov	r0, r8
 8005698:	4798      	blx	r3
 800569a:	2800      	cmp	r0, #0
 800569c:	f43f aedb 	beq.w	8005456 <_scanf_float+0x4a>
 80056a0:	e6e6      	b.n	8005470 <_scanf_float+0x64>
 80056a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80056a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80056aa:	463a      	mov	r2, r7
 80056ac:	4640      	mov	r0, r8
 80056ae:	4798      	blx	r3
 80056b0:	6923      	ldr	r3, [r4, #16]
 80056b2:	3b01      	subs	r3, #1
 80056b4:	6123      	str	r3, [r4, #16]
 80056b6:	e6e8      	b.n	800548a <_scanf_float+0x7e>
 80056b8:	1e6b      	subs	r3, r5, #1
 80056ba:	2b06      	cmp	r3, #6
 80056bc:	d824      	bhi.n	8005708 <_scanf_float+0x2fc>
 80056be:	2d02      	cmp	r5, #2
 80056c0:	d836      	bhi.n	8005730 <_scanf_float+0x324>
 80056c2:	9b01      	ldr	r3, [sp, #4]
 80056c4:	429e      	cmp	r6, r3
 80056c6:	f67f aee4 	bls.w	8005492 <_scanf_float+0x86>
 80056ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80056ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80056d2:	463a      	mov	r2, r7
 80056d4:	4640      	mov	r0, r8
 80056d6:	4798      	blx	r3
 80056d8:	6923      	ldr	r3, [r4, #16]
 80056da:	3b01      	subs	r3, #1
 80056dc:	6123      	str	r3, [r4, #16]
 80056de:	e7f0      	b.n	80056c2 <_scanf_float+0x2b6>
 80056e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80056e4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80056e8:	463a      	mov	r2, r7
 80056ea:	4640      	mov	r0, r8
 80056ec:	4798      	blx	r3
 80056ee:	6923      	ldr	r3, [r4, #16]
 80056f0:	3b01      	subs	r3, #1
 80056f2:	6123      	str	r3, [r4, #16]
 80056f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056f8:	fa5f fa8a 	uxtb.w	sl, sl
 80056fc:	f1ba 0f02 	cmp.w	sl, #2
 8005700:	d1ee      	bne.n	80056e0 <_scanf_float+0x2d4>
 8005702:	3d03      	subs	r5, #3
 8005704:	b2ed      	uxtb	r5, r5
 8005706:	1b76      	subs	r6, r6, r5
 8005708:	6823      	ldr	r3, [r4, #0]
 800570a:	05da      	lsls	r2, r3, #23
 800570c:	d530      	bpl.n	8005770 <_scanf_float+0x364>
 800570e:	055b      	lsls	r3, r3, #21
 8005710:	d511      	bpl.n	8005736 <_scanf_float+0x32a>
 8005712:	9b01      	ldr	r3, [sp, #4]
 8005714:	429e      	cmp	r6, r3
 8005716:	f67f aebc 	bls.w	8005492 <_scanf_float+0x86>
 800571a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800571e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005722:	463a      	mov	r2, r7
 8005724:	4640      	mov	r0, r8
 8005726:	4798      	blx	r3
 8005728:	6923      	ldr	r3, [r4, #16]
 800572a:	3b01      	subs	r3, #1
 800572c:	6123      	str	r3, [r4, #16]
 800572e:	e7f0      	b.n	8005712 <_scanf_float+0x306>
 8005730:	46aa      	mov	sl, r5
 8005732:	46b3      	mov	fp, r6
 8005734:	e7de      	b.n	80056f4 <_scanf_float+0x2e8>
 8005736:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800573a:	6923      	ldr	r3, [r4, #16]
 800573c:	2965      	cmp	r1, #101	@ 0x65
 800573e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005742:	f106 35ff 	add.w	r5, r6, #4294967295
 8005746:	6123      	str	r3, [r4, #16]
 8005748:	d00c      	beq.n	8005764 <_scanf_float+0x358>
 800574a:	2945      	cmp	r1, #69	@ 0x45
 800574c:	d00a      	beq.n	8005764 <_scanf_float+0x358>
 800574e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005752:	463a      	mov	r2, r7
 8005754:	4640      	mov	r0, r8
 8005756:	4798      	blx	r3
 8005758:	6923      	ldr	r3, [r4, #16]
 800575a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800575e:	3b01      	subs	r3, #1
 8005760:	1eb5      	subs	r5, r6, #2
 8005762:	6123      	str	r3, [r4, #16]
 8005764:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005768:	463a      	mov	r2, r7
 800576a:	4640      	mov	r0, r8
 800576c:	4798      	blx	r3
 800576e:	462e      	mov	r6, r5
 8005770:	6822      	ldr	r2, [r4, #0]
 8005772:	f012 0210 	ands.w	r2, r2, #16
 8005776:	d001      	beq.n	800577c <_scanf_float+0x370>
 8005778:	2000      	movs	r0, #0
 800577a:	e68b      	b.n	8005494 <_scanf_float+0x88>
 800577c:	7032      	strb	r2, [r6, #0]
 800577e:	6823      	ldr	r3, [r4, #0]
 8005780:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005784:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005788:	d11c      	bne.n	80057c4 <_scanf_float+0x3b8>
 800578a:	9b02      	ldr	r3, [sp, #8]
 800578c:	454b      	cmp	r3, r9
 800578e:	eba3 0209 	sub.w	r2, r3, r9
 8005792:	d123      	bne.n	80057dc <_scanf_float+0x3d0>
 8005794:	9901      	ldr	r1, [sp, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	4640      	mov	r0, r8
 800579a:	f002 fbf9 	bl	8007f90 <_strtod_r>
 800579e:	9b03      	ldr	r3, [sp, #12]
 80057a0:	6821      	ldr	r1, [r4, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f011 0f02 	tst.w	r1, #2
 80057a8:	ec57 6b10 	vmov	r6, r7, d0
 80057ac:	f103 0204 	add.w	r2, r3, #4
 80057b0:	d01f      	beq.n	80057f2 <_scanf_float+0x3e6>
 80057b2:	9903      	ldr	r1, [sp, #12]
 80057b4:	600a      	str	r2, [r1, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	e9c3 6700 	strd	r6, r7, [r3]
 80057bc:	68e3      	ldr	r3, [r4, #12]
 80057be:	3301      	adds	r3, #1
 80057c0:	60e3      	str	r3, [r4, #12]
 80057c2:	e7d9      	b.n	8005778 <_scanf_float+0x36c>
 80057c4:	9b04      	ldr	r3, [sp, #16]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d0e4      	beq.n	8005794 <_scanf_float+0x388>
 80057ca:	9905      	ldr	r1, [sp, #20]
 80057cc:	230a      	movs	r3, #10
 80057ce:	3101      	adds	r1, #1
 80057d0:	4640      	mov	r0, r8
 80057d2:	f002 fc5d 	bl	8008090 <_strtol_r>
 80057d6:	9b04      	ldr	r3, [sp, #16]
 80057d8:	9e05      	ldr	r6, [sp, #20]
 80057da:	1ac2      	subs	r2, r0, r3
 80057dc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80057e0:	429e      	cmp	r6, r3
 80057e2:	bf28      	it	cs
 80057e4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80057e8:	4910      	ldr	r1, [pc, #64]	@ (800582c <_scanf_float+0x420>)
 80057ea:	4630      	mov	r0, r6
 80057ec:	f000 f8e4 	bl	80059b8 <siprintf>
 80057f0:	e7d0      	b.n	8005794 <_scanf_float+0x388>
 80057f2:	f011 0f04 	tst.w	r1, #4
 80057f6:	9903      	ldr	r1, [sp, #12]
 80057f8:	600a      	str	r2, [r1, #0]
 80057fa:	d1dc      	bne.n	80057b6 <_scanf_float+0x3aa>
 80057fc:	681d      	ldr	r5, [r3, #0]
 80057fe:	4632      	mov	r2, r6
 8005800:	463b      	mov	r3, r7
 8005802:	4630      	mov	r0, r6
 8005804:	4639      	mov	r1, r7
 8005806:	f7fb f991 	bl	8000b2c <__aeabi_dcmpun>
 800580a:	b128      	cbz	r0, 8005818 <_scanf_float+0x40c>
 800580c:	4808      	ldr	r0, [pc, #32]	@ (8005830 <_scanf_float+0x424>)
 800580e:	f000 f9b7 	bl	8005b80 <nanf>
 8005812:	ed85 0a00 	vstr	s0, [r5]
 8005816:	e7d1      	b.n	80057bc <_scanf_float+0x3b0>
 8005818:	4630      	mov	r0, r6
 800581a:	4639      	mov	r1, r7
 800581c:	f7fb f9e4 	bl	8000be8 <__aeabi_d2f>
 8005820:	6028      	str	r0, [r5, #0]
 8005822:	e7cb      	b.n	80057bc <_scanf_float+0x3b0>
 8005824:	f04f 0900 	mov.w	r9, #0
 8005828:	e629      	b.n	800547e <_scanf_float+0x72>
 800582a:	bf00      	nop
 800582c:	08009304 	.word	0x08009304
 8005830:	0800969d 	.word	0x0800969d

08005834 <std>:
 8005834:	2300      	movs	r3, #0
 8005836:	b510      	push	{r4, lr}
 8005838:	4604      	mov	r4, r0
 800583a:	e9c0 3300 	strd	r3, r3, [r0]
 800583e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005842:	6083      	str	r3, [r0, #8]
 8005844:	8181      	strh	r1, [r0, #12]
 8005846:	6643      	str	r3, [r0, #100]	@ 0x64
 8005848:	81c2      	strh	r2, [r0, #14]
 800584a:	6183      	str	r3, [r0, #24]
 800584c:	4619      	mov	r1, r3
 800584e:	2208      	movs	r2, #8
 8005850:	305c      	adds	r0, #92	@ 0x5c
 8005852:	f000 f914 	bl	8005a7e <memset>
 8005856:	4b0d      	ldr	r3, [pc, #52]	@ (800588c <std+0x58>)
 8005858:	6263      	str	r3, [r4, #36]	@ 0x24
 800585a:	4b0d      	ldr	r3, [pc, #52]	@ (8005890 <std+0x5c>)
 800585c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800585e:	4b0d      	ldr	r3, [pc, #52]	@ (8005894 <std+0x60>)
 8005860:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005862:	4b0d      	ldr	r3, [pc, #52]	@ (8005898 <std+0x64>)
 8005864:	6323      	str	r3, [r4, #48]	@ 0x30
 8005866:	4b0d      	ldr	r3, [pc, #52]	@ (800589c <std+0x68>)
 8005868:	6224      	str	r4, [r4, #32]
 800586a:	429c      	cmp	r4, r3
 800586c:	d006      	beq.n	800587c <std+0x48>
 800586e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005872:	4294      	cmp	r4, r2
 8005874:	d002      	beq.n	800587c <std+0x48>
 8005876:	33d0      	adds	r3, #208	@ 0xd0
 8005878:	429c      	cmp	r4, r3
 800587a:	d105      	bne.n	8005888 <std+0x54>
 800587c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005884:	f000 b978 	b.w	8005b78 <__retarget_lock_init_recursive>
 8005888:	bd10      	pop	{r4, pc}
 800588a:	bf00      	nop
 800588c:	080059f9 	.word	0x080059f9
 8005890:	08005a1b 	.word	0x08005a1b
 8005894:	08005a53 	.word	0x08005a53
 8005898:	08005a77 	.word	0x08005a77
 800589c:	2000033c 	.word	0x2000033c

080058a0 <stdio_exit_handler>:
 80058a0:	4a02      	ldr	r2, [pc, #8]	@ (80058ac <stdio_exit_handler+0xc>)
 80058a2:	4903      	ldr	r1, [pc, #12]	@ (80058b0 <stdio_exit_handler+0x10>)
 80058a4:	4803      	ldr	r0, [pc, #12]	@ (80058b4 <stdio_exit_handler+0x14>)
 80058a6:	f000 b869 	b.w	800597c <_fwalk_sglue>
 80058aa:	bf00      	nop
 80058ac:	20000024 	.word	0x20000024
 80058b0:	0800844d 	.word	0x0800844d
 80058b4:	20000034 	.word	0x20000034

080058b8 <cleanup_stdio>:
 80058b8:	6841      	ldr	r1, [r0, #4]
 80058ba:	4b0c      	ldr	r3, [pc, #48]	@ (80058ec <cleanup_stdio+0x34>)
 80058bc:	4299      	cmp	r1, r3
 80058be:	b510      	push	{r4, lr}
 80058c0:	4604      	mov	r4, r0
 80058c2:	d001      	beq.n	80058c8 <cleanup_stdio+0x10>
 80058c4:	f002 fdc2 	bl	800844c <_fflush_r>
 80058c8:	68a1      	ldr	r1, [r4, #8]
 80058ca:	4b09      	ldr	r3, [pc, #36]	@ (80058f0 <cleanup_stdio+0x38>)
 80058cc:	4299      	cmp	r1, r3
 80058ce:	d002      	beq.n	80058d6 <cleanup_stdio+0x1e>
 80058d0:	4620      	mov	r0, r4
 80058d2:	f002 fdbb 	bl	800844c <_fflush_r>
 80058d6:	68e1      	ldr	r1, [r4, #12]
 80058d8:	4b06      	ldr	r3, [pc, #24]	@ (80058f4 <cleanup_stdio+0x3c>)
 80058da:	4299      	cmp	r1, r3
 80058dc:	d004      	beq.n	80058e8 <cleanup_stdio+0x30>
 80058de:	4620      	mov	r0, r4
 80058e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058e4:	f002 bdb2 	b.w	800844c <_fflush_r>
 80058e8:	bd10      	pop	{r4, pc}
 80058ea:	bf00      	nop
 80058ec:	2000033c 	.word	0x2000033c
 80058f0:	200003a4 	.word	0x200003a4
 80058f4:	2000040c 	.word	0x2000040c

080058f8 <global_stdio_init.part.0>:
 80058f8:	b510      	push	{r4, lr}
 80058fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005928 <global_stdio_init.part.0+0x30>)
 80058fc:	4c0b      	ldr	r4, [pc, #44]	@ (800592c <global_stdio_init.part.0+0x34>)
 80058fe:	4a0c      	ldr	r2, [pc, #48]	@ (8005930 <global_stdio_init.part.0+0x38>)
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	4620      	mov	r0, r4
 8005904:	2200      	movs	r2, #0
 8005906:	2104      	movs	r1, #4
 8005908:	f7ff ff94 	bl	8005834 <std>
 800590c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005910:	2201      	movs	r2, #1
 8005912:	2109      	movs	r1, #9
 8005914:	f7ff ff8e 	bl	8005834 <std>
 8005918:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800591c:	2202      	movs	r2, #2
 800591e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005922:	2112      	movs	r1, #18
 8005924:	f7ff bf86 	b.w	8005834 <std>
 8005928:	20000474 	.word	0x20000474
 800592c:	2000033c 	.word	0x2000033c
 8005930:	080058a1 	.word	0x080058a1

08005934 <__sfp_lock_acquire>:
 8005934:	4801      	ldr	r0, [pc, #4]	@ (800593c <__sfp_lock_acquire+0x8>)
 8005936:	f000 b920 	b.w	8005b7a <__retarget_lock_acquire_recursive>
 800593a:	bf00      	nop
 800593c:	2000047d 	.word	0x2000047d

08005940 <__sfp_lock_release>:
 8005940:	4801      	ldr	r0, [pc, #4]	@ (8005948 <__sfp_lock_release+0x8>)
 8005942:	f000 b91b 	b.w	8005b7c <__retarget_lock_release_recursive>
 8005946:	bf00      	nop
 8005948:	2000047d 	.word	0x2000047d

0800594c <__sinit>:
 800594c:	b510      	push	{r4, lr}
 800594e:	4604      	mov	r4, r0
 8005950:	f7ff fff0 	bl	8005934 <__sfp_lock_acquire>
 8005954:	6a23      	ldr	r3, [r4, #32]
 8005956:	b11b      	cbz	r3, 8005960 <__sinit+0x14>
 8005958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800595c:	f7ff bff0 	b.w	8005940 <__sfp_lock_release>
 8005960:	4b04      	ldr	r3, [pc, #16]	@ (8005974 <__sinit+0x28>)
 8005962:	6223      	str	r3, [r4, #32]
 8005964:	4b04      	ldr	r3, [pc, #16]	@ (8005978 <__sinit+0x2c>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1f5      	bne.n	8005958 <__sinit+0xc>
 800596c:	f7ff ffc4 	bl	80058f8 <global_stdio_init.part.0>
 8005970:	e7f2      	b.n	8005958 <__sinit+0xc>
 8005972:	bf00      	nop
 8005974:	080058b9 	.word	0x080058b9
 8005978:	20000474 	.word	0x20000474

0800597c <_fwalk_sglue>:
 800597c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005980:	4607      	mov	r7, r0
 8005982:	4688      	mov	r8, r1
 8005984:	4614      	mov	r4, r2
 8005986:	2600      	movs	r6, #0
 8005988:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800598c:	f1b9 0901 	subs.w	r9, r9, #1
 8005990:	d505      	bpl.n	800599e <_fwalk_sglue+0x22>
 8005992:	6824      	ldr	r4, [r4, #0]
 8005994:	2c00      	cmp	r4, #0
 8005996:	d1f7      	bne.n	8005988 <_fwalk_sglue+0xc>
 8005998:	4630      	mov	r0, r6
 800599a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800599e:	89ab      	ldrh	r3, [r5, #12]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d907      	bls.n	80059b4 <_fwalk_sglue+0x38>
 80059a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059a8:	3301      	adds	r3, #1
 80059aa:	d003      	beq.n	80059b4 <_fwalk_sglue+0x38>
 80059ac:	4629      	mov	r1, r5
 80059ae:	4638      	mov	r0, r7
 80059b0:	47c0      	blx	r8
 80059b2:	4306      	orrs	r6, r0
 80059b4:	3568      	adds	r5, #104	@ 0x68
 80059b6:	e7e9      	b.n	800598c <_fwalk_sglue+0x10>

080059b8 <siprintf>:
 80059b8:	b40e      	push	{r1, r2, r3}
 80059ba:	b500      	push	{lr}
 80059bc:	b09c      	sub	sp, #112	@ 0x70
 80059be:	ab1d      	add	r3, sp, #116	@ 0x74
 80059c0:	9002      	str	r0, [sp, #8]
 80059c2:	9006      	str	r0, [sp, #24]
 80059c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80059c8:	4809      	ldr	r0, [pc, #36]	@ (80059f0 <siprintf+0x38>)
 80059ca:	9107      	str	r1, [sp, #28]
 80059cc:	9104      	str	r1, [sp, #16]
 80059ce:	4909      	ldr	r1, [pc, #36]	@ (80059f4 <siprintf+0x3c>)
 80059d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80059d4:	9105      	str	r1, [sp, #20]
 80059d6:	6800      	ldr	r0, [r0, #0]
 80059d8:	9301      	str	r3, [sp, #4]
 80059da:	a902      	add	r1, sp, #8
 80059dc:	f002 fbb6 	bl	800814c <_svfiprintf_r>
 80059e0:	9b02      	ldr	r3, [sp, #8]
 80059e2:	2200      	movs	r2, #0
 80059e4:	701a      	strb	r2, [r3, #0]
 80059e6:	b01c      	add	sp, #112	@ 0x70
 80059e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80059ec:	b003      	add	sp, #12
 80059ee:	4770      	bx	lr
 80059f0:	20000030 	.word	0x20000030
 80059f4:	ffff0208 	.word	0xffff0208

080059f8 <__sread>:
 80059f8:	b510      	push	{r4, lr}
 80059fa:	460c      	mov	r4, r1
 80059fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a00:	f000 f86c 	bl	8005adc <_read_r>
 8005a04:	2800      	cmp	r0, #0
 8005a06:	bfab      	itete	ge
 8005a08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005a0a:	89a3      	ldrhlt	r3, [r4, #12]
 8005a0c:	181b      	addge	r3, r3, r0
 8005a0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005a12:	bfac      	ite	ge
 8005a14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005a16:	81a3      	strhlt	r3, [r4, #12]
 8005a18:	bd10      	pop	{r4, pc}

08005a1a <__swrite>:
 8005a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a1e:	461f      	mov	r7, r3
 8005a20:	898b      	ldrh	r3, [r1, #12]
 8005a22:	05db      	lsls	r3, r3, #23
 8005a24:	4605      	mov	r5, r0
 8005a26:	460c      	mov	r4, r1
 8005a28:	4616      	mov	r6, r2
 8005a2a:	d505      	bpl.n	8005a38 <__swrite+0x1e>
 8005a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a30:	2302      	movs	r3, #2
 8005a32:	2200      	movs	r2, #0
 8005a34:	f000 f840 	bl	8005ab8 <_lseek_r>
 8005a38:	89a3      	ldrh	r3, [r4, #12]
 8005a3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a42:	81a3      	strh	r3, [r4, #12]
 8005a44:	4632      	mov	r2, r6
 8005a46:	463b      	mov	r3, r7
 8005a48:	4628      	mov	r0, r5
 8005a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a4e:	f000 b857 	b.w	8005b00 <_write_r>

08005a52 <__sseek>:
 8005a52:	b510      	push	{r4, lr}
 8005a54:	460c      	mov	r4, r1
 8005a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a5a:	f000 f82d 	bl	8005ab8 <_lseek_r>
 8005a5e:	1c43      	adds	r3, r0, #1
 8005a60:	89a3      	ldrh	r3, [r4, #12]
 8005a62:	bf15      	itete	ne
 8005a64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a6e:	81a3      	strheq	r3, [r4, #12]
 8005a70:	bf18      	it	ne
 8005a72:	81a3      	strhne	r3, [r4, #12]
 8005a74:	bd10      	pop	{r4, pc}

08005a76 <__sclose>:
 8005a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a7a:	f000 b80d 	b.w	8005a98 <_close_r>

08005a7e <memset>:
 8005a7e:	4402      	add	r2, r0
 8005a80:	4603      	mov	r3, r0
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d100      	bne.n	8005a88 <memset+0xa>
 8005a86:	4770      	bx	lr
 8005a88:	f803 1b01 	strb.w	r1, [r3], #1
 8005a8c:	e7f9      	b.n	8005a82 <memset+0x4>
	...

08005a90 <_localeconv_r>:
 8005a90:	4800      	ldr	r0, [pc, #0]	@ (8005a94 <_localeconv_r+0x4>)
 8005a92:	4770      	bx	lr
 8005a94:	20000170 	.word	0x20000170

08005a98 <_close_r>:
 8005a98:	b538      	push	{r3, r4, r5, lr}
 8005a9a:	4d06      	ldr	r5, [pc, #24]	@ (8005ab4 <_close_r+0x1c>)
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	4604      	mov	r4, r0
 8005aa0:	4608      	mov	r0, r1
 8005aa2:	602b      	str	r3, [r5, #0]
 8005aa4:	f7fb fe47 	bl	8001736 <_close>
 8005aa8:	1c43      	adds	r3, r0, #1
 8005aaa:	d102      	bne.n	8005ab2 <_close_r+0x1a>
 8005aac:	682b      	ldr	r3, [r5, #0]
 8005aae:	b103      	cbz	r3, 8005ab2 <_close_r+0x1a>
 8005ab0:	6023      	str	r3, [r4, #0]
 8005ab2:	bd38      	pop	{r3, r4, r5, pc}
 8005ab4:	20000478 	.word	0x20000478

08005ab8 <_lseek_r>:
 8005ab8:	b538      	push	{r3, r4, r5, lr}
 8005aba:	4d07      	ldr	r5, [pc, #28]	@ (8005ad8 <_lseek_r+0x20>)
 8005abc:	4604      	mov	r4, r0
 8005abe:	4608      	mov	r0, r1
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	602a      	str	r2, [r5, #0]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	f7fb fe5c 	bl	8001784 <_lseek>
 8005acc:	1c43      	adds	r3, r0, #1
 8005ace:	d102      	bne.n	8005ad6 <_lseek_r+0x1e>
 8005ad0:	682b      	ldr	r3, [r5, #0]
 8005ad2:	b103      	cbz	r3, 8005ad6 <_lseek_r+0x1e>
 8005ad4:	6023      	str	r3, [r4, #0]
 8005ad6:	bd38      	pop	{r3, r4, r5, pc}
 8005ad8:	20000478 	.word	0x20000478

08005adc <_read_r>:
 8005adc:	b538      	push	{r3, r4, r5, lr}
 8005ade:	4d07      	ldr	r5, [pc, #28]	@ (8005afc <_read_r+0x20>)
 8005ae0:	4604      	mov	r4, r0
 8005ae2:	4608      	mov	r0, r1
 8005ae4:	4611      	mov	r1, r2
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	602a      	str	r2, [r5, #0]
 8005aea:	461a      	mov	r2, r3
 8005aec:	f7fb fdea 	bl	80016c4 <_read>
 8005af0:	1c43      	adds	r3, r0, #1
 8005af2:	d102      	bne.n	8005afa <_read_r+0x1e>
 8005af4:	682b      	ldr	r3, [r5, #0]
 8005af6:	b103      	cbz	r3, 8005afa <_read_r+0x1e>
 8005af8:	6023      	str	r3, [r4, #0]
 8005afa:	bd38      	pop	{r3, r4, r5, pc}
 8005afc:	20000478 	.word	0x20000478

08005b00 <_write_r>:
 8005b00:	b538      	push	{r3, r4, r5, lr}
 8005b02:	4d07      	ldr	r5, [pc, #28]	@ (8005b20 <_write_r+0x20>)
 8005b04:	4604      	mov	r4, r0
 8005b06:	4608      	mov	r0, r1
 8005b08:	4611      	mov	r1, r2
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	602a      	str	r2, [r5, #0]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	f7fb fdf5 	bl	80016fe <_write>
 8005b14:	1c43      	adds	r3, r0, #1
 8005b16:	d102      	bne.n	8005b1e <_write_r+0x1e>
 8005b18:	682b      	ldr	r3, [r5, #0]
 8005b1a:	b103      	cbz	r3, 8005b1e <_write_r+0x1e>
 8005b1c:	6023      	str	r3, [r4, #0]
 8005b1e:	bd38      	pop	{r3, r4, r5, pc}
 8005b20:	20000478 	.word	0x20000478

08005b24 <__errno>:
 8005b24:	4b01      	ldr	r3, [pc, #4]	@ (8005b2c <__errno+0x8>)
 8005b26:	6818      	ldr	r0, [r3, #0]
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	20000030 	.word	0x20000030

08005b30 <__libc_init_array>:
 8005b30:	b570      	push	{r4, r5, r6, lr}
 8005b32:	4d0d      	ldr	r5, [pc, #52]	@ (8005b68 <__libc_init_array+0x38>)
 8005b34:	4c0d      	ldr	r4, [pc, #52]	@ (8005b6c <__libc_init_array+0x3c>)
 8005b36:	1b64      	subs	r4, r4, r5
 8005b38:	10a4      	asrs	r4, r4, #2
 8005b3a:	2600      	movs	r6, #0
 8005b3c:	42a6      	cmp	r6, r4
 8005b3e:	d109      	bne.n	8005b54 <__libc_init_array+0x24>
 8005b40:	4d0b      	ldr	r5, [pc, #44]	@ (8005b70 <__libc_init_array+0x40>)
 8005b42:	4c0c      	ldr	r4, [pc, #48]	@ (8005b74 <__libc_init_array+0x44>)
 8005b44:	f003 fb72 	bl	800922c <_init>
 8005b48:	1b64      	subs	r4, r4, r5
 8005b4a:	10a4      	asrs	r4, r4, #2
 8005b4c:	2600      	movs	r6, #0
 8005b4e:	42a6      	cmp	r6, r4
 8005b50:	d105      	bne.n	8005b5e <__libc_init_array+0x2e>
 8005b52:	bd70      	pop	{r4, r5, r6, pc}
 8005b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b58:	4798      	blx	r3
 8005b5a:	3601      	adds	r6, #1
 8005b5c:	e7ee      	b.n	8005b3c <__libc_init_array+0xc>
 8005b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b62:	4798      	blx	r3
 8005b64:	3601      	adds	r6, #1
 8005b66:	e7f2      	b.n	8005b4e <__libc_init_array+0x1e>
 8005b68:	08009708 	.word	0x08009708
 8005b6c:	08009708 	.word	0x08009708
 8005b70:	08009708 	.word	0x08009708
 8005b74:	0800970c 	.word	0x0800970c

08005b78 <__retarget_lock_init_recursive>:
 8005b78:	4770      	bx	lr

08005b7a <__retarget_lock_acquire_recursive>:
 8005b7a:	4770      	bx	lr

08005b7c <__retarget_lock_release_recursive>:
 8005b7c:	4770      	bx	lr
	...

08005b80 <nanf>:
 8005b80:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005b88 <nanf+0x8>
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	7fc00000 	.word	0x7fc00000

08005b8c <quorem>:
 8005b8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b90:	6903      	ldr	r3, [r0, #16]
 8005b92:	690c      	ldr	r4, [r1, #16]
 8005b94:	42a3      	cmp	r3, r4
 8005b96:	4607      	mov	r7, r0
 8005b98:	db7e      	blt.n	8005c98 <quorem+0x10c>
 8005b9a:	3c01      	subs	r4, #1
 8005b9c:	f101 0814 	add.w	r8, r1, #20
 8005ba0:	00a3      	lsls	r3, r4, #2
 8005ba2:	f100 0514 	add.w	r5, r0, #20
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bac:	9301      	str	r3, [sp, #4]
 8005bae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005bb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005bbe:	fbb2 f6f3 	udiv	r6, r2, r3
 8005bc2:	d32e      	bcc.n	8005c22 <quorem+0x96>
 8005bc4:	f04f 0a00 	mov.w	sl, #0
 8005bc8:	46c4      	mov	ip, r8
 8005bca:	46ae      	mov	lr, r5
 8005bcc:	46d3      	mov	fp, sl
 8005bce:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005bd2:	b298      	uxth	r0, r3
 8005bd4:	fb06 a000 	mla	r0, r6, r0, sl
 8005bd8:	0c02      	lsrs	r2, r0, #16
 8005bda:	0c1b      	lsrs	r3, r3, #16
 8005bdc:	fb06 2303 	mla	r3, r6, r3, r2
 8005be0:	f8de 2000 	ldr.w	r2, [lr]
 8005be4:	b280      	uxth	r0, r0
 8005be6:	b292      	uxth	r2, r2
 8005be8:	1a12      	subs	r2, r2, r0
 8005bea:	445a      	add	r2, fp
 8005bec:	f8de 0000 	ldr.w	r0, [lr]
 8005bf0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005bfa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005bfe:	b292      	uxth	r2, r2
 8005c00:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005c04:	45e1      	cmp	r9, ip
 8005c06:	f84e 2b04 	str.w	r2, [lr], #4
 8005c0a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005c0e:	d2de      	bcs.n	8005bce <quorem+0x42>
 8005c10:	9b00      	ldr	r3, [sp, #0]
 8005c12:	58eb      	ldr	r3, [r5, r3]
 8005c14:	b92b      	cbnz	r3, 8005c22 <quorem+0x96>
 8005c16:	9b01      	ldr	r3, [sp, #4]
 8005c18:	3b04      	subs	r3, #4
 8005c1a:	429d      	cmp	r5, r3
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	d32f      	bcc.n	8005c80 <quorem+0xf4>
 8005c20:	613c      	str	r4, [r7, #16]
 8005c22:	4638      	mov	r0, r7
 8005c24:	f001 f9c4 	bl	8006fb0 <__mcmp>
 8005c28:	2800      	cmp	r0, #0
 8005c2a:	db25      	blt.n	8005c78 <quorem+0xec>
 8005c2c:	4629      	mov	r1, r5
 8005c2e:	2000      	movs	r0, #0
 8005c30:	f858 2b04 	ldr.w	r2, [r8], #4
 8005c34:	f8d1 c000 	ldr.w	ip, [r1]
 8005c38:	fa1f fe82 	uxth.w	lr, r2
 8005c3c:	fa1f f38c 	uxth.w	r3, ip
 8005c40:	eba3 030e 	sub.w	r3, r3, lr
 8005c44:	4403      	add	r3, r0
 8005c46:	0c12      	lsrs	r2, r2, #16
 8005c48:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005c4c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c56:	45c1      	cmp	r9, r8
 8005c58:	f841 3b04 	str.w	r3, [r1], #4
 8005c5c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005c60:	d2e6      	bcs.n	8005c30 <quorem+0xa4>
 8005c62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c6a:	b922      	cbnz	r2, 8005c76 <quorem+0xea>
 8005c6c:	3b04      	subs	r3, #4
 8005c6e:	429d      	cmp	r5, r3
 8005c70:	461a      	mov	r2, r3
 8005c72:	d30b      	bcc.n	8005c8c <quorem+0x100>
 8005c74:	613c      	str	r4, [r7, #16]
 8005c76:	3601      	adds	r6, #1
 8005c78:	4630      	mov	r0, r6
 8005c7a:	b003      	add	sp, #12
 8005c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c80:	6812      	ldr	r2, [r2, #0]
 8005c82:	3b04      	subs	r3, #4
 8005c84:	2a00      	cmp	r2, #0
 8005c86:	d1cb      	bne.n	8005c20 <quorem+0x94>
 8005c88:	3c01      	subs	r4, #1
 8005c8a:	e7c6      	b.n	8005c1a <quorem+0x8e>
 8005c8c:	6812      	ldr	r2, [r2, #0]
 8005c8e:	3b04      	subs	r3, #4
 8005c90:	2a00      	cmp	r2, #0
 8005c92:	d1ef      	bne.n	8005c74 <quorem+0xe8>
 8005c94:	3c01      	subs	r4, #1
 8005c96:	e7ea      	b.n	8005c6e <quorem+0xe2>
 8005c98:	2000      	movs	r0, #0
 8005c9a:	e7ee      	b.n	8005c7a <quorem+0xee>
 8005c9c:	0000      	movs	r0, r0
	...

08005ca0 <_dtoa_r>:
 8005ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca4:	69c7      	ldr	r7, [r0, #28]
 8005ca6:	b099      	sub	sp, #100	@ 0x64
 8005ca8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005cac:	ec55 4b10 	vmov	r4, r5, d0
 8005cb0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005cb2:	9109      	str	r1, [sp, #36]	@ 0x24
 8005cb4:	4683      	mov	fp, r0
 8005cb6:	920e      	str	r2, [sp, #56]	@ 0x38
 8005cb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005cba:	b97f      	cbnz	r7, 8005cdc <_dtoa_r+0x3c>
 8005cbc:	2010      	movs	r0, #16
 8005cbe:	f000 fdfd 	bl	80068bc <malloc>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	f8cb 001c 	str.w	r0, [fp, #28]
 8005cc8:	b920      	cbnz	r0, 8005cd4 <_dtoa_r+0x34>
 8005cca:	4ba7      	ldr	r3, [pc, #668]	@ (8005f68 <_dtoa_r+0x2c8>)
 8005ccc:	21ef      	movs	r1, #239	@ 0xef
 8005cce:	48a7      	ldr	r0, [pc, #668]	@ (8005f6c <_dtoa_r+0x2cc>)
 8005cd0:	f002 fc36 	bl	8008540 <__assert_func>
 8005cd4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005cd8:	6007      	str	r7, [r0, #0]
 8005cda:	60c7      	str	r7, [r0, #12]
 8005cdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005ce0:	6819      	ldr	r1, [r3, #0]
 8005ce2:	b159      	cbz	r1, 8005cfc <_dtoa_r+0x5c>
 8005ce4:	685a      	ldr	r2, [r3, #4]
 8005ce6:	604a      	str	r2, [r1, #4]
 8005ce8:	2301      	movs	r3, #1
 8005cea:	4093      	lsls	r3, r2
 8005cec:	608b      	str	r3, [r1, #8]
 8005cee:	4658      	mov	r0, fp
 8005cf0:	f000 feda 	bl	8006aa8 <_Bfree>
 8005cf4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	601a      	str	r2, [r3, #0]
 8005cfc:	1e2b      	subs	r3, r5, #0
 8005cfe:	bfb9      	ittee	lt
 8005d00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005d04:	9303      	strlt	r3, [sp, #12]
 8005d06:	2300      	movge	r3, #0
 8005d08:	6033      	strge	r3, [r6, #0]
 8005d0a:	9f03      	ldr	r7, [sp, #12]
 8005d0c:	4b98      	ldr	r3, [pc, #608]	@ (8005f70 <_dtoa_r+0x2d0>)
 8005d0e:	bfbc      	itt	lt
 8005d10:	2201      	movlt	r2, #1
 8005d12:	6032      	strlt	r2, [r6, #0]
 8005d14:	43bb      	bics	r3, r7
 8005d16:	d112      	bne.n	8005d3e <_dtoa_r+0x9e>
 8005d18:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005d1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005d1e:	6013      	str	r3, [r2, #0]
 8005d20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005d24:	4323      	orrs	r3, r4
 8005d26:	f000 854d 	beq.w	80067c4 <_dtoa_r+0xb24>
 8005d2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005d2c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005f84 <_dtoa_r+0x2e4>
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 854f 	beq.w	80067d4 <_dtoa_r+0xb34>
 8005d36:	f10a 0303 	add.w	r3, sl, #3
 8005d3a:	f000 bd49 	b.w	80067d0 <_dtoa_r+0xb30>
 8005d3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005d42:	2200      	movs	r2, #0
 8005d44:	ec51 0b17 	vmov	r0, r1, d7
 8005d48:	2300      	movs	r3, #0
 8005d4a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005d4e:	f7fa febb 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d52:	4680      	mov	r8, r0
 8005d54:	b158      	cbz	r0, 8005d6e <_dtoa_r+0xce>
 8005d56:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005d58:	2301      	movs	r3, #1
 8005d5a:	6013      	str	r3, [r2, #0]
 8005d5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005d5e:	b113      	cbz	r3, 8005d66 <_dtoa_r+0xc6>
 8005d60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005d62:	4b84      	ldr	r3, [pc, #528]	@ (8005f74 <_dtoa_r+0x2d4>)
 8005d64:	6013      	str	r3, [r2, #0]
 8005d66:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005f88 <_dtoa_r+0x2e8>
 8005d6a:	f000 bd33 	b.w	80067d4 <_dtoa_r+0xb34>
 8005d6e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005d72:	aa16      	add	r2, sp, #88	@ 0x58
 8005d74:	a917      	add	r1, sp, #92	@ 0x5c
 8005d76:	4658      	mov	r0, fp
 8005d78:	f001 fa3a 	bl	80071f0 <__d2b>
 8005d7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005d80:	4681      	mov	r9, r0
 8005d82:	2e00      	cmp	r6, #0
 8005d84:	d077      	beq.n	8005e76 <_dtoa_r+0x1d6>
 8005d86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d88:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005d98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005d9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005da0:	4619      	mov	r1, r3
 8005da2:	2200      	movs	r2, #0
 8005da4:	4b74      	ldr	r3, [pc, #464]	@ (8005f78 <_dtoa_r+0x2d8>)
 8005da6:	f7fa fa6f 	bl	8000288 <__aeabi_dsub>
 8005daa:	a369      	add	r3, pc, #420	@ (adr r3, 8005f50 <_dtoa_r+0x2b0>)
 8005dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db0:	f7fa fc22 	bl	80005f8 <__aeabi_dmul>
 8005db4:	a368      	add	r3, pc, #416	@ (adr r3, 8005f58 <_dtoa_r+0x2b8>)
 8005db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dba:	f7fa fa67 	bl	800028c <__adddf3>
 8005dbe:	4604      	mov	r4, r0
 8005dc0:	4630      	mov	r0, r6
 8005dc2:	460d      	mov	r5, r1
 8005dc4:	f7fa fbae 	bl	8000524 <__aeabi_i2d>
 8005dc8:	a365      	add	r3, pc, #404	@ (adr r3, 8005f60 <_dtoa_r+0x2c0>)
 8005dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dce:	f7fa fc13 	bl	80005f8 <__aeabi_dmul>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	4629      	mov	r1, r5
 8005dda:	f7fa fa57 	bl	800028c <__adddf3>
 8005dde:	4604      	mov	r4, r0
 8005de0:	460d      	mov	r5, r1
 8005de2:	f7fa feb9 	bl	8000b58 <__aeabi_d2iz>
 8005de6:	2200      	movs	r2, #0
 8005de8:	4607      	mov	r7, r0
 8005dea:	2300      	movs	r3, #0
 8005dec:	4620      	mov	r0, r4
 8005dee:	4629      	mov	r1, r5
 8005df0:	f7fa fe74 	bl	8000adc <__aeabi_dcmplt>
 8005df4:	b140      	cbz	r0, 8005e08 <_dtoa_r+0x168>
 8005df6:	4638      	mov	r0, r7
 8005df8:	f7fa fb94 	bl	8000524 <__aeabi_i2d>
 8005dfc:	4622      	mov	r2, r4
 8005dfe:	462b      	mov	r3, r5
 8005e00:	f7fa fe62 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e04:	b900      	cbnz	r0, 8005e08 <_dtoa_r+0x168>
 8005e06:	3f01      	subs	r7, #1
 8005e08:	2f16      	cmp	r7, #22
 8005e0a:	d851      	bhi.n	8005eb0 <_dtoa_r+0x210>
 8005e0c:	4b5b      	ldr	r3, [pc, #364]	@ (8005f7c <_dtoa_r+0x2dc>)
 8005e0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e1a:	f7fa fe5f 	bl	8000adc <__aeabi_dcmplt>
 8005e1e:	2800      	cmp	r0, #0
 8005e20:	d048      	beq.n	8005eb4 <_dtoa_r+0x214>
 8005e22:	3f01      	subs	r7, #1
 8005e24:	2300      	movs	r3, #0
 8005e26:	9312      	str	r3, [sp, #72]	@ 0x48
 8005e28:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005e2a:	1b9b      	subs	r3, r3, r6
 8005e2c:	1e5a      	subs	r2, r3, #1
 8005e2e:	bf44      	itt	mi
 8005e30:	f1c3 0801 	rsbmi	r8, r3, #1
 8005e34:	2300      	movmi	r3, #0
 8005e36:	9208      	str	r2, [sp, #32]
 8005e38:	bf54      	ite	pl
 8005e3a:	f04f 0800 	movpl.w	r8, #0
 8005e3e:	9308      	strmi	r3, [sp, #32]
 8005e40:	2f00      	cmp	r7, #0
 8005e42:	db39      	blt.n	8005eb8 <_dtoa_r+0x218>
 8005e44:	9b08      	ldr	r3, [sp, #32]
 8005e46:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005e48:	443b      	add	r3, r7
 8005e4a:	9308      	str	r3, [sp, #32]
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e52:	2b09      	cmp	r3, #9
 8005e54:	d864      	bhi.n	8005f20 <_dtoa_r+0x280>
 8005e56:	2b05      	cmp	r3, #5
 8005e58:	bfc4      	itt	gt
 8005e5a:	3b04      	subgt	r3, #4
 8005e5c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005e5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e60:	f1a3 0302 	sub.w	r3, r3, #2
 8005e64:	bfcc      	ite	gt
 8005e66:	2400      	movgt	r4, #0
 8005e68:	2401      	movle	r4, #1
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	d863      	bhi.n	8005f36 <_dtoa_r+0x296>
 8005e6e:	e8df f003 	tbb	[pc, r3]
 8005e72:	372a      	.short	0x372a
 8005e74:	5535      	.short	0x5535
 8005e76:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005e7a:	441e      	add	r6, r3
 8005e7c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005e80:	2b20      	cmp	r3, #32
 8005e82:	bfc1      	itttt	gt
 8005e84:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005e88:	409f      	lslgt	r7, r3
 8005e8a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005e8e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005e92:	bfd6      	itet	le
 8005e94:	f1c3 0320 	rsble	r3, r3, #32
 8005e98:	ea47 0003 	orrgt.w	r0, r7, r3
 8005e9c:	fa04 f003 	lslle.w	r0, r4, r3
 8005ea0:	f7fa fb30 	bl	8000504 <__aeabi_ui2d>
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005eaa:	3e01      	subs	r6, #1
 8005eac:	9214      	str	r2, [sp, #80]	@ 0x50
 8005eae:	e777      	b.n	8005da0 <_dtoa_r+0x100>
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e7b8      	b.n	8005e26 <_dtoa_r+0x186>
 8005eb4:	9012      	str	r0, [sp, #72]	@ 0x48
 8005eb6:	e7b7      	b.n	8005e28 <_dtoa_r+0x188>
 8005eb8:	427b      	negs	r3, r7
 8005eba:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	eba8 0807 	sub.w	r8, r8, r7
 8005ec2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005ec4:	e7c4      	b.n	8005e50 <_dtoa_r+0x1b0>
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005eca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	dc35      	bgt.n	8005f3c <_dtoa_r+0x29c>
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	9307      	str	r3, [sp, #28]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	920e      	str	r2, [sp, #56]	@ 0x38
 8005eda:	e00b      	b.n	8005ef4 <_dtoa_r+0x254>
 8005edc:	2301      	movs	r3, #1
 8005ede:	e7f3      	b.n	8005ec8 <_dtoa_r+0x228>
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ee4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ee6:	18fb      	adds	r3, r7, r3
 8005ee8:	9300      	str	r3, [sp, #0]
 8005eea:	3301      	adds	r3, #1
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	9307      	str	r3, [sp, #28]
 8005ef0:	bfb8      	it	lt
 8005ef2:	2301      	movlt	r3, #1
 8005ef4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005ef8:	2100      	movs	r1, #0
 8005efa:	2204      	movs	r2, #4
 8005efc:	f102 0514 	add.w	r5, r2, #20
 8005f00:	429d      	cmp	r5, r3
 8005f02:	d91f      	bls.n	8005f44 <_dtoa_r+0x2a4>
 8005f04:	6041      	str	r1, [r0, #4]
 8005f06:	4658      	mov	r0, fp
 8005f08:	f000 fd8e 	bl	8006a28 <_Balloc>
 8005f0c:	4682      	mov	sl, r0
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	d13c      	bne.n	8005f8c <_dtoa_r+0x2ec>
 8005f12:	4b1b      	ldr	r3, [pc, #108]	@ (8005f80 <_dtoa_r+0x2e0>)
 8005f14:	4602      	mov	r2, r0
 8005f16:	f240 11af 	movw	r1, #431	@ 0x1af
 8005f1a:	e6d8      	b.n	8005cce <_dtoa_r+0x2e>
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e7e0      	b.n	8005ee2 <_dtoa_r+0x242>
 8005f20:	2401      	movs	r4, #1
 8005f22:	2300      	movs	r3, #0
 8005f24:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f26:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005f28:	f04f 33ff 	mov.w	r3, #4294967295
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	9307      	str	r3, [sp, #28]
 8005f30:	2200      	movs	r2, #0
 8005f32:	2312      	movs	r3, #18
 8005f34:	e7d0      	b.n	8005ed8 <_dtoa_r+0x238>
 8005f36:	2301      	movs	r3, #1
 8005f38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f3a:	e7f5      	b.n	8005f28 <_dtoa_r+0x288>
 8005f3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	9307      	str	r3, [sp, #28]
 8005f42:	e7d7      	b.n	8005ef4 <_dtoa_r+0x254>
 8005f44:	3101      	adds	r1, #1
 8005f46:	0052      	lsls	r2, r2, #1
 8005f48:	e7d8      	b.n	8005efc <_dtoa_r+0x25c>
 8005f4a:	bf00      	nop
 8005f4c:	f3af 8000 	nop.w
 8005f50:	636f4361 	.word	0x636f4361
 8005f54:	3fd287a7 	.word	0x3fd287a7
 8005f58:	8b60c8b3 	.word	0x8b60c8b3
 8005f5c:	3fc68a28 	.word	0x3fc68a28
 8005f60:	509f79fb 	.word	0x509f79fb
 8005f64:	3fd34413 	.word	0x3fd34413
 8005f68:	08009316 	.word	0x08009316
 8005f6c:	0800932d 	.word	0x0800932d
 8005f70:	7ff00000 	.word	0x7ff00000
 8005f74:	080092e1 	.word	0x080092e1
 8005f78:	3ff80000 	.word	0x3ff80000
 8005f7c:	08009428 	.word	0x08009428
 8005f80:	08009385 	.word	0x08009385
 8005f84:	08009312 	.word	0x08009312
 8005f88:	080092e0 	.word	0x080092e0
 8005f8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005f90:	6018      	str	r0, [r3, #0]
 8005f92:	9b07      	ldr	r3, [sp, #28]
 8005f94:	2b0e      	cmp	r3, #14
 8005f96:	f200 80a4 	bhi.w	80060e2 <_dtoa_r+0x442>
 8005f9a:	2c00      	cmp	r4, #0
 8005f9c:	f000 80a1 	beq.w	80060e2 <_dtoa_r+0x442>
 8005fa0:	2f00      	cmp	r7, #0
 8005fa2:	dd33      	ble.n	800600c <_dtoa_r+0x36c>
 8005fa4:	4bad      	ldr	r3, [pc, #692]	@ (800625c <_dtoa_r+0x5bc>)
 8005fa6:	f007 020f 	and.w	r2, r7, #15
 8005faa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fae:	ed93 7b00 	vldr	d7, [r3]
 8005fb2:	05f8      	lsls	r0, r7, #23
 8005fb4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005fb8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005fbc:	d516      	bpl.n	8005fec <_dtoa_r+0x34c>
 8005fbe:	4ba8      	ldr	r3, [pc, #672]	@ (8006260 <_dtoa_r+0x5c0>)
 8005fc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005fc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005fc8:	f7fa fc40 	bl	800084c <__aeabi_ddiv>
 8005fcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fd0:	f004 040f 	and.w	r4, r4, #15
 8005fd4:	2603      	movs	r6, #3
 8005fd6:	4da2      	ldr	r5, [pc, #648]	@ (8006260 <_dtoa_r+0x5c0>)
 8005fd8:	b954      	cbnz	r4, 8005ff0 <_dtoa_r+0x350>
 8005fda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fe2:	f7fa fc33 	bl	800084c <__aeabi_ddiv>
 8005fe6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fea:	e028      	b.n	800603e <_dtoa_r+0x39e>
 8005fec:	2602      	movs	r6, #2
 8005fee:	e7f2      	b.n	8005fd6 <_dtoa_r+0x336>
 8005ff0:	07e1      	lsls	r1, r4, #31
 8005ff2:	d508      	bpl.n	8006006 <_dtoa_r+0x366>
 8005ff4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ff8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005ffc:	f7fa fafc 	bl	80005f8 <__aeabi_dmul>
 8006000:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006004:	3601      	adds	r6, #1
 8006006:	1064      	asrs	r4, r4, #1
 8006008:	3508      	adds	r5, #8
 800600a:	e7e5      	b.n	8005fd8 <_dtoa_r+0x338>
 800600c:	f000 80d2 	beq.w	80061b4 <_dtoa_r+0x514>
 8006010:	427c      	negs	r4, r7
 8006012:	4b92      	ldr	r3, [pc, #584]	@ (800625c <_dtoa_r+0x5bc>)
 8006014:	4d92      	ldr	r5, [pc, #584]	@ (8006260 <_dtoa_r+0x5c0>)
 8006016:	f004 020f 	and.w	r2, r4, #15
 800601a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800601e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006022:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006026:	f7fa fae7 	bl	80005f8 <__aeabi_dmul>
 800602a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800602e:	1124      	asrs	r4, r4, #4
 8006030:	2300      	movs	r3, #0
 8006032:	2602      	movs	r6, #2
 8006034:	2c00      	cmp	r4, #0
 8006036:	f040 80b2 	bne.w	800619e <_dtoa_r+0x4fe>
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1d3      	bne.n	8005fe6 <_dtoa_r+0x346>
 800603e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006040:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 80b7 	beq.w	80061b8 <_dtoa_r+0x518>
 800604a:	4b86      	ldr	r3, [pc, #536]	@ (8006264 <_dtoa_r+0x5c4>)
 800604c:	2200      	movs	r2, #0
 800604e:	4620      	mov	r0, r4
 8006050:	4629      	mov	r1, r5
 8006052:	f7fa fd43 	bl	8000adc <__aeabi_dcmplt>
 8006056:	2800      	cmp	r0, #0
 8006058:	f000 80ae 	beq.w	80061b8 <_dtoa_r+0x518>
 800605c:	9b07      	ldr	r3, [sp, #28]
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 80aa 	beq.w	80061b8 <_dtoa_r+0x518>
 8006064:	9b00      	ldr	r3, [sp, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	dd37      	ble.n	80060da <_dtoa_r+0x43a>
 800606a:	1e7b      	subs	r3, r7, #1
 800606c:	9304      	str	r3, [sp, #16]
 800606e:	4620      	mov	r0, r4
 8006070:	4b7d      	ldr	r3, [pc, #500]	@ (8006268 <_dtoa_r+0x5c8>)
 8006072:	2200      	movs	r2, #0
 8006074:	4629      	mov	r1, r5
 8006076:	f7fa fabf 	bl	80005f8 <__aeabi_dmul>
 800607a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800607e:	9c00      	ldr	r4, [sp, #0]
 8006080:	3601      	adds	r6, #1
 8006082:	4630      	mov	r0, r6
 8006084:	f7fa fa4e 	bl	8000524 <__aeabi_i2d>
 8006088:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800608c:	f7fa fab4 	bl	80005f8 <__aeabi_dmul>
 8006090:	4b76      	ldr	r3, [pc, #472]	@ (800626c <_dtoa_r+0x5cc>)
 8006092:	2200      	movs	r2, #0
 8006094:	f7fa f8fa 	bl	800028c <__adddf3>
 8006098:	4605      	mov	r5, r0
 800609a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800609e:	2c00      	cmp	r4, #0
 80060a0:	f040 808d 	bne.w	80061be <_dtoa_r+0x51e>
 80060a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060a8:	4b71      	ldr	r3, [pc, #452]	@ (8006270 <_dtoa_r+0x5d0>)
 80060aa:	2200      	movs	r2, #0
 80060ac:	f7fa f8ec 	bl	8000288 <__aeabi_dsub>
 80060b0:	4602      	mov	r2, r0
 80060b2:	460b      	mov	r3, r1
 80060b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80060b8:	462a      	mov	r2, r5
 80060ba:	4633      	mov	r3, r6
 80060bc:	f7fa fd2c 	bl	8000b18 <__aeabi_dcmpgt>
 80060c0:	2800      	cmp	r0, #0
 80060c2:	f040 828b 	bne.w	80065dc <_dtoa_r+0x93c>
 80060c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060ca:	462a      	mov	r2, r5
 80060cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80060d0:	f7fa fd04 	bl	8000adc <__aeabi_dcmplt>
 80060d4:	2800      	cmp	r0, #0
 80060d6:	f040 8128 	bne.w	800632a <_dtoa_r+0x68a>
 80060da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80060de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80060e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f2c0 815a 	blt.w	800639e <_dtoa_r+0x6fe>
 80060ea:	2f0e      	cmp	r7, #14
 80060ec:	f300 8157 	bgt.w	800639e <_dtoa_r+0x6fe>
 80060f0:	4b5a      	ldr	r3, [pc, #360]	@ (800625c <_dtoa_r+0x5bc>)
 80060f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80060f6:	ed93 7b00 	vldr	d7, [r3]
 80060fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	ed8d 7b00 	vstr	d7, [sp]
 8006102:	da03      	bge.n	800610c <_dtoa_r+0x46c>
 8006104:	9b07      	ldr	r3, [sp, #28]
 8006106:	2b00      	cmp	r3, #0
 8006108:	f340 8101 	ble.w	800630e <_dtoa_r+0x66e>
 800610c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006110:	4656      	mov	r6, sl
 8006112:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006116:	4620      	mov	r0, r4
 8006118:	4629      	mov	r1, r5
 800611a:	f7fa fb97 	bl	800084c <__aeabi_ddiv>
 800611e:	f7fa fd1b 	bl	8000b58 <__aeabi_d2iz>
 8006122:	4680      	mov	r8, r0
 8006124:	f7fa f9fe 	bl	8000524 <__aeabi_i2d>
 8006128:	e9dd 2300 	ldrd	r2, r3, [sp]
 800612c:	f7fa fa64 	bl	80005f8 <__aeabi_dmul>
 8006130:	4602      	mov	r2, r0
 8006132:	460b      	mov	r3, r1
 8006134:	4620      	mov	r0, r4
 8006136:	4629      	mov	r1, r5
 8006138:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800613c:	f7fa f8a4 	bl	8000288 <__aeabi_dsub>
 8006140:	f806 4b01 	strb.w	r4, [r6], #1
 8006144:	9d07      	ldr	r5, [sp, #28]
 8006146:	eba6 040a 	sub.w	r4, r6, sl
 800614a:	42a5      	cmp	r5, r4
 800614c:	4602      	mov	r2, r0
 800614e:	460b      	mov	r3, r1
 8006150:	f040 8117 	bne.w	8006382 <_dtoa_r+0x6e2>
 8006154:	f7fa f89a 	bl	800028c <__adddf3>
 8006158:	e9dd 2300 	ldrd	r2, r3, [sp]
 800615c:	4604      	mov	r4, r0
 800615e:	460d      	mov	r5, r1
 8006160:	f7fa fcda 	bl	8000b18 <__aeabi_dcmpgt>
 8006164:	2800      	cmp	r0, #0
 8006166:	f040 80f9 	bne.w	800635c <_dtoa_r+0x6bc>
 800616a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800616e:	4620      	mov	r0, r4
 8006170:	4629      	mov	r1, r5
 8006172:	f7fa fca9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006176:	b118      	cbz	r0, 8006180 <_dtoa_r+0x4e0>
 8006178:	f018 0f01 	tst.w	r8, #1
 800617c:	f040 80ee 	bne.w	800635c <_dtoa_r+0x6bc>
 8006180:	4649      	mov	r1, r9
 8006182:	4658      	mov	r0, fp
 8006184:	f000 fc90 	bl	8006aa8 <_Bfree>
 8006188:	2300      	movs	r3, #0
 800618a:	7033      	strb	r3, [r6, #0]
 800618c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800618e:	3701      	adds	r7, #1
 8006190:	601f      	str	r7, [r3, #0]
 8006192:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 831d 	beq.w	80067d4 <_dtoa_r+0xb34>
 800619a:	601e      	str	r6, [r3, #0]
 800619c:	e31a      	b.n	80067d4 <_dtoa_r+0xb34>
 800619e:	07e2      	lsls	r2, r4, #31
 80061a0:	d505      	bpl.n	80061ae <_dtoa_r+0x50e>
 80061a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80061a6:	f7fa fa27 	bl	80005f8 <__aeabi_dmul>
 80061aa:	3601      	adds	r6, #1
 80061ac:	2301      	movs	r3, #1
 80061ae:	1064      	asrs	r4, r4, #1
 80061b0:	3508      	adds	r5, #8
 80061b2:	e73f      	b.n	8006034 <_dtoa_r+0x394>
 80061b4:	2602      	movs	r6, #2
 80061b6:	e742      	b.n	800603e <_dtoa_r+0x39e>
 80061b8:	9c07      	ldr	r4, [sp, #28]
 80061ba:	9704      	str	r7, [sp, #16]
 80061bc:	e761      	b.n	8006082 <_dtoa_r+0x3e2>
 80061be:	4b27      	ldr	r3, [pc, #156]	@ (800625c <_dtoa_r+0x5bc>)
 80061c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80061c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80061c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80061ca:	4454      	add	r4, sl
 80061cc:	2900      	cmp	r1, #0
 80061ce:	d053      	beq.n	8006278 <_dtoa_r+0x5d8>
 80061d0:	4928      	ldr	r1, [pc, #160]	@ (8006274 <_dtoa_r+0x5d4>)
 80061d2:	2000      	movs	r0, #0
 80061d4:	f7fa fb3a 	bl	800084c <__aeabi_ddiv>
 80061d8:	4633      	mov	r3, r6
 80061da:	462a      	mov	r2, r5
 80061dc:	f7fa f854 	bl	8000288 <__aeabi_dsub>
 80061e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80061e4:	4656      	mov	r6, sl
 80061e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061ea:	f7fa fcb5 	bl	8000b58 <__aeabi_d2iz>
 80061ee:	4605      	mov	r5, r0
 80061f0:	f7fa f998 	bl	8000524 <__aeabi_i2d>
 80061f4:	4602      	mov	r2, r0
 80061f6:	460b      	mov	r3, r1
 80061f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061fc:	f7fa f844 	bl	8000288 <__aeabi_dsub>
 8006200:	3530      	adds	r5, #48	@ 0x30
 8006202:	4602      	mov	r2, r0
 8006204:	460b      	mov	r3, r1
 8006206:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800620a:	f806 5b01 	strb.w	r5, [r6], #1
 800620e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006212:	f7fa fc63 	bl	8000adc <__aeabi_dcmplt>
 8006216:	2800      	cmp	r0, #0
 8006218:	d171      	bne.n	80062fe <_dtoa_r+0x65e>
 800621a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800621e:	4911      	ldr	r1, [pc, #68]	@ (8006264 <_dtoa_r+0x5c4>)
 8006220:	2000      	movs	r0, #0
 8006222:	f7fa f831 	bl	8000288 <__aeabi_dsub>
 8006226:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800622a:	f7fa fc57 	bl	8000adc <__aeabi_dcmplt>
 800622e:	2800      	cmp	r0, #0
 8006230:	f040 8095 	bne.w	800635e <_dtoa_r+0x6be>
 8006234:	42a6      	cmp	r6, r4
 8006236:	f43f af50 	beq.w	80060da <_dtoa_r+0x43a>
 800623a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800623e:	4b0a      	ldr	r3, [pc, #40]	@ (8006268 <_dtoa_r+0x5c8>)
 8006240:	2200      	movs	r2, #0
 8006242:	f7fa f9d9 	bl	80005f8 <__aeabi_dmul>
 8006246:	4b08      	ldr	r3, [pc, #32]	@ (8006268 <_dtoa_r+0x5c8>)
 8006248:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800624c:	2200      	movs	r2, #0
 800624e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006252:	f7fa f9d1 	bl	80005f8 <__aeabi_dmul>
 8006256:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800625a:	e7c4      	b.n	80061e6 <_dtoa_r+0x546>
 800625c:	08009428 	.word	0x08009428
 8006260:	08009400 	.word	0x08009400
 8006264:	3ff00000 	.word	0x3ff00000
 8006268:	40240000 	.word	0x40240000
 800626c:	401c0000 	.word	0x401c0000
 8006270:	40140000 	.word	0x40140000
 8006274:	3fe00000 	.word	0x3fe00000
 8006278:	4631      	mov	r1, r6
 800627a:	4628      	mov	r0, r5
 800627c:	f7fa f9bc 	bl	80005f8 <__aeabi_dmul>
 8006280:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006284:	9415      	str	r4, [sp, #84]	@ 0x54
 8006286:	4656      	mov	r6, sl
 8006288:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800628c:	f7fa fc64 	bl	8000b58 <__aeabi_d2iz>
 8006290:	4605      	mov	r5, r0
 8006292:	f7fa f947 	bl	8000524 <__aeabi_i2d>
 8006296:	4602      	mov	r2, r0
 8006298:	460b      	mov	r3, r1
 800629a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800629e:	f7f9 fff3 	bl	8000288 <__aeabi_dsub>
 80062a2:	3530      	adds	r5, #48	@ 0x30
 80062a4:	f806 5b01 	strb.w	r5, [r6], #1
 80062a8:	4602      	mov	r2, r0
 80062aa:	460b      	mov	r3, r1
 80062ac:	42a6      	cmp	r6, r4
 80062ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80062b2:	f04f 0200 	mov.w	r2, #0
 80062b6:	d124      	bne.n	8006302 <_dtoa_r+0x662>
 80062b8:	4bac      	ldr	r3, [pc, #688]	@ (800656c <_dtoa_r+0x8cc>)
 80062ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80062be:	f7f9 ffe5 	bl	800028c <__adddf3>
 80062c2:	4602      	mov	r2, r0
 80062c4:	460b      	mov	r3, r1
 80062c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062ca:	f7fa fc25 	bl	8000b18 <__aeabi_dcmpgt>
 80062ce:	2800      	cmp	r0, #0
 80062d0:	d145      	bne.n	800635e <_dtoa_r+0x6be>
 80062d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80062d6:	49a5      	ldr	r1, [pc, #660]	@ (800656c <_dtoa_r+0x8cc>)
 80062d8:	2000      	movs	r0, #0
 80062da:	f7f9 ffd5 	bl	8000288 <__aeabi_dsub>
 80062de:	4602      	mov	r2, r0
 80062e0:	460b      	mov	r3, r1
 80062e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062e6:	f7fa fbf9 	bl	8000adc <__aeabi_dcmplt>
 80062ea:	2800      	cmp	r0, #0
 80062ec:	f43f aef5 	beq.w	80060da <_dtoa_r+0x43a>
 80062f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80062f2:	1e73      	subs	r3, r6, #1
 80062f4:	9315      	str	r3, [sp, #84]	@ 0x54
 80062f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80062fa:	2b30      	cmp	r3, #48	@ 0x30
 80062fc:	d0f8      	beq.n	80062f0 <_dtoa_r+0x650>
 80062fe:	9f04      	ldr	r7, [sp, #16]
 8006300:	e73e      	b.n	8006180 <_dtoa_r+0x4e0>
 8006302:	4b9b      	ldr	r3, [pc, #620]	@ (8006570 <_dtoa_r+0x8d0>)
 8006304:	f7fa f978 	bl	80005f8 <__aeabi_dmul>
 8006308:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800630c:	e7bc      	b.n	8006288 <_dtoa_r+0x5e8>
 800630e:	d10c      	bne.n	800632a <_dtoa_r+0x68a>
 8006310:	4b98      	ldr	r3, [pc, #608]	@ (8006574 <_dtoa_r+0x8d4>)
 8006312:	2200      	movs	r2, #0
 8006314:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006318:	f7fa f96e 	bl	80005f8 <__aeabi_dmul>
 800631c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006320:	f7fa fbf0 	bl	8000b04 <__aeabi_dcmpge>
 8006324:	2800      	cmp	r0, #0
 8006326:	f000 8157 	beq.w	80065d8 <_dtoa_r+0x938>
 800632a:	2400      	movs	r4, #0
 800632c:	4625      	mov	r5, r4
 800632e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006330:	43db      	mvns	r3, r3
 8006332:	9304      	str	r3, [sp, #16]
 8006334:	4656      	mov	r6, sl
 8006336:	2700      	movs	r7, #0
 8006338:	4621      	mov	r1, r4
 800633a:	4658      	mov	r0, fp
 800633c:	f000 fbb4 	bl	8006aa8 <_Bfree>
 8006340:	2d00      	cmp	r5, #0
 8006342:	d0dc      	beq.n	80062fe <_dtoa_r+0x65e>
 8006344:	b12f      	cbz	r7, 8006352 <_dtoa_r+0x6b2>
 8006346:	42af      	cmp	r7, r5
 8006348:	d003      	beq.n	8006352 <_dtoa_r+0x6b2>
 800634a:	4639      	mov	r1, r7
 800634c:	4658      	mov	r0, fp
 800634e:	f000 fbab 	bl	8006aa8 <_Bfree>
 8006352:	4629      	mov	r1, r5
 8006354:	4658      	mov	r0, fp
 8006356:	f000 fba7 	bl	8006aa8 <_Bfree>
 800635a:	e7d0      	b.n	80062fe <_dtoa_r+0x65e>
 800635c:	9704      	str	r7, [sp, #16]
 800635e:	4633      	mov	r3, r6
 8006360:	461e      	mov	r6, r3
 8006362:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006366:	2a39      	cmp	r2, #57	@ 0x39
 8006368:	d107      	bne.n	800637a <_dtoa_r+0x6da>
 800636a:	459a      	cmp	sl, r3
 800636c:	d1f8      	bne.n	8006360 <_dtoa_r+0x6c0>
 800636e:	9a04      	ldr	r2, [sp, #16]
 8006370:	3201      	adds	r2, #1
 8006372:	9204      	str	r2, [sp, #16]
 8006374:	2230      	movs	r2, #48	@ 0x30
 8006376:	f88a 2000 	strb.w	r2, [sl]
 800637a:	781a      	ldrb	r2, [r3, #0]
 800637c:	3201      	adds	r2, #1
 800637e:	701a      	strb	r2, [r3, #0]
 8006380:	e7bd      	b.n	80062fe <_dtoa_r+0x65e>
 8006382:	4b7b      	ldr	r3, [pc, #492]	@ (8006570 <_dtoa_r+0x8d0>)
 8006384:	2200      	movs	r2, #0
 8006386:	f7fa f937 	bl	80005f8 <__aeabi_dmul>
 800638a:	2200      	movs	r2, #0
 800638c:	2300      	movs	r3, #0
 800638e:	4604      	mov	r4, r0
 8006390:	460d      	mov	r5, r1
 8006392:	f7fa fb99 	bl	8000ac8 <__aeabi_dcmpeq>
 8006396:	2800      	cmp	r0, #0
 8006398:	f43f aebb 	beq.w	8006112 <_dtoa_r+0x472>
 800639c:	e6f0      	b.n	8006180 <_dtoa_r+0x4e0>
 800639e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80063a0:	2a00      	cmp	r2, #0
 80063a2:	f000 80db 	beq.w	800655c <_dtoa_r+0x8bc>
 80063a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80063a8:	2a01      	cmp	r2, #1
 80063aa:	f300 80bf 	bgt.w	800652c <_dtoa_r+0x88c>
 80063ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80063b0:	2a00      	cmp	r2, #0
 80063b2:	f000 80b7 	beq.w	8006524 <_dtoa_r+0x884>
 80063b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80063ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80063bc:	4646      	mov	r6, r8
 80063be:	9a08      	ldr	r2, [sp, #32]
 80063c0:	2101      	movs	r1, #1
 80063c2:	441a      	add	r2, r3
 80063c4:	4658      	mov	r0, fp
 80063c6:	4498      	add	r8, r3
 80063c8:	9208      	str	r2, [sp, #32]
 80063ca:	f000 fc6b 	bl	8006ca4 <__i2b>
 80063ce:	4605      	mov	r5, r0
 80063d0:	b15e      	cbz	r6, 80063ea <_dtoa_r+0x74a>
 80063d2:	9b08      	ldr	r3, [sp, #32]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	dd08      	ble.n	80063ea <_dtoa_r+0x74a>
 80063d8:	42b3      	cmp	r3, r6
 80063da:	9a08      	ldr	r2, [sp, #32]
 80063dc:	bfa8      	it	ge
 80063de:	4633      	movge	r3, r6
 80063e0:	eba8 0803 	sub.w	r8, r8, r3
 80063e4:	1af6      	subs	r6, r6, r3
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	9308      	str	r3, [sp, #32]
 80063ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063ec:	b1f3      	cbz	r3, 800642c <_dtoa_r+0x78c>
 80063ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f000 80b7 	beq.w	8006564 <_dtoa_r+0x8c4>
 80063f6:	b18c      	cbz	r4, 800641c <_dtoa_r+0x77c>
 80063f8:	4629      	mov	r1, r5
 80063fa:	4622      	mov	r2, r4
 80063fc:	4658      	mov	r0, fp
 80063fe:	f000 fd11 	bl	8006e24 <__pow5mult>
 8006402:	464a      	mov	r2, r9
 8006404:	4601      	mov	r1, r0
 8006406:	4605      	mov	r5, r0
 8006408:	4658      	mov	r0, fp
 800640a:	f000 fc61 	bl	8006cd0 <__multiply>
 800640e:	4649      	mov	r1, r9
 8006410:	9004      	str	r0, [sp, #16]
 8006412:	4658      	mov	r0, fp
 8006414:	f000 fb48 	bl	8006aa8 <_Bfree>
 8006418:	9b04      	ldr	r3, [sp, #16]
 800641a:	4699      	mov	r9, r3
 800641c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800641e:	1b1a      	subs	r2, r3, r4
 8006420:	d004      	beq.n	800642c <_dtoa_r+0x78c>
 8006422:	4649      	mov	r1, r9
 8006424:	4658      	mov	r0, fp
 8006426:	f000 fcfd 	bl	8006e24 <__pow5mult>
 800642a:	4681      	mov	r9, r0
 800642c:	2101      	movs	r1, #1
 800642e:	4658      	mov	r0, fp
 8006430:	f000 fc38 	bl	8006ca4 <__i2b>
 8006434:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006436:	4604      	mov	r4, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	f000 81cf 	beq.w	80067dc <_dtoa_r+0xb3c>
 800643e:	461a      	mov	r2, r3
 8006440:	4601      	mov	r1, r0
 8006442:	4658      	mov	r0, fp
 8006444:	f000 fcee 	bl	8006e24 <__pow5mult>
 8006448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800644a:	2b01      	cmp	r3, #1
 800644c:	4604      	mov	r4, r0
 800644e:	f300 8095 	bgt.w	800657c <_dtoa_r+0x8dc>
 8006452:	9b02      	ldr	r3, [sp, #8]
 8006454:	2b00      	cmp	r3, #0
 8006456:	f040 8087 	bne.w	8006568 <_dtoa_r+0x8c8>
 800645a:	9b03      	ldr	r3, [sp, #12]
 800645c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006460:	2b00      	cmp	r3, #0
 8006462:	f040 8089 	bne.w	8006578 <_dtoa_r+0x8d8>
 8006466:	9b03      	ldr	r3, [sp, #12]
 8006468:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800646c:	0d1b      	lsrs	r3, r3, #20
 800646e:	051b      	lsls	r3, r3, #20
 8006470:	b12b      	cbz	r3, 800647e <_dtoa_r+0x7de>
 8006472:	9b08      	ldr	r3, [sp, #32]
 8006474:	3301      	adds	r3, #1
 8006476:	9308      	str	r3, [sp, #32]
 8006478:	f108 0801 	add.w	r8, r8, #1
 800647c:	2301      	movs	r3, #1
 800647e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006480:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006482:	2b00      	cmp	r3, #0
 8006484:	f000 81b0 	beq.w	80067e8 <_dtoa_r+0xb48>
 8006488:	6923      	ldr	r3, [r4, #16]
 800648a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800648e:	6918      	ldr	r0, [r3, #16]
 8006490:	f000 fbbc 	bl	8006c0c <__hi0bits>
 8006494:	f1c0 0020 	rsb	r0, r0, #32
 8006498:	9b08      	ldr	r3, [sp, #32]
 800649a:	4418      	add	r0, r3
 800649c:	f010 001f 	ands.w	r0, r0, #31
 80064a0:	d077      	beq.n	8006592 <_dtoa_r+0x8f2>
 80064a2:	f1c0 0320 	rsb	r3, r0, #32
 80064a6:	2b04      	cmp	r3, #4
 80064a8:	dd6b      	ble.n	8006582 <_dtoa_r+0x8e2>
 80064aa:	9b08      	ldr	r3, [sp, #32]
 80064ac:	f1c0 001c 	rsb	r0, r0, #28
 80064b0:	4403      	add	r3, r0
 80064b2:	4480      	add	r8, r0
 80064b4:	4406      	add	r6, r0
 80064b6:	9308      	str	r3, [sp, #32]
 80064b8:	f1b8 0f00 	cmp.w	r8, #0
 80064bc:	dd05      	ble.n	80064ca <_dtoa_r+0x82a>
 80064be:	4649      	mov	r1, r9
 80064c0:	4642      	mov	r2, r8
 80064c2:	4658      	mov	r0, fp
 80064c4:	f000 fd08 	bl	8006ed8 <__lshift>
 80064c8:	4681      	mov	r9, r0
 80064ca:	9b08      	ldr	r3, [sp, #32]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	dd05      	ble.n	80064dc <_dtoa_r+0x83c>
 80064d0:	4621      	mov	r1, r4
 80064d2:	461a      	mov	r2, r3
 80064d4:	4658      	mov	r0, fp
 80064d6:	f000 fcff 	bl	8006ed8 <__lshift>
 80064da:	4604      	mov	r4, r0
 80064dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d059      	beq.n	8006596 <_dtoa_r+0x8f6>
 80064e2:	4621      	mov	r1, r4
 80064e4:	4648      	mov	r0, r9
 80064e6:	f000 fd63 	bl	8006fb0 <__mcmp>
 80064ea:	2800      	cmp	r0, #0
 80064ec:	da53      	bge.n	8006596 <_dtoa_r+0x8f6>
 80064ee:	1e7b      	subs	r3, r7, #1
 80064f0:	9304      	str	r3, [sp, #16]
 80064f2:	4649      	mov	r1, r9
 80064f4:	2300      	movs	r3, #0
 80064f6:	220a      	movs	r2, #10
 80064f8:	4658      	mov	r0, fp
 80064fa:	f000 faf7 	bl	8006aec <__multadd>
 80064fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006500:	4681      	mov	r9, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	f000 8172 	beq.w	80067ec <_dtoa_r+0xb4c>
 8006508:	2300      	movs	r3, #0
 800650a:	4629      	mov	r1, r5
 800650c:	220a      	movs	r2, #10
 800650e:	4658      	mov	r0, fp
 8006510:	f000 faec 	bl	8006aec <__multadd>
 8006514:	9b00      	ldr	r3, [sp, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	4605      	mov	r5, r0
 800651a:	dc67      	bgt.n	80065ec <_dtoa_r+0x94c>
 800651c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800651e:	2b02      	cmp	r3, #2
 8006520:	dc41      	bgt.n	80065a6 <_dtoa_r+0x906>
 8006522:	e063      	b.n	80065ec <_dtoa_r+0x94c>
 8006524:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006526:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800652a:	e746      	b.n	80063ba <_dtoa_r+0x71a>
 800652c:	9b07      	ldr	r3, [sp, #28]
 800652e:	1e5c      	subs	r4, r3, #1
 8006530:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006532:	42a3      	cmp	r3, r4
 8006534:	bfbf      	itttt	lt
 8006536:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006538:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800653a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800653c:	1ae3      	sublt	r3, r4, r3
 800653e:	bfb4      	ite	lt
 8006540:	18d2      	addlt	r2, r2, r3
 8006542:	1b1c      	subge	r4, r3, r4
 8006544:	9b07      	ldr	r3, [sp, #28]
 8006546:	bfbc      	itt	lt
 8006548:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800654a:	2400      	movlt	r4, #0
 800654c:	2b00      	cmp	r3, #0
 800654e:	bfb5      	itete	lt
 8006550:	eba8 0603 	sublt.w	r6, r8, r3
 8006554:	9b07      	ldrge	r3, [sp, #28]
 8006556:	2300      	movlt	r3, #0
 8006558:	4646      	movge	r6, r8
 800655a:	e730      	b.n	80063be <_dtoa_r+0x71e>
 800655c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800655e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006560:	4646      	mov	r6, r8
 8006562:	e735      	b.n	80063d0 <_dtoa_r+0x730>
 8006564:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006566:	e75c      	b.n	8006422 <_dtoa_r+0x782>
 8006568:	2300      	movs	r3, #0
 800656a:	e788      	b.n	800647e <_dtoa_r+0x7de>
 800656c:	3fe00000 	.word	0x3fe00000
 8006570:	40240000 	.word	0x40240000
 8006574:	40140000 	.word	0x40140000
 8006578:	9b02      	ldr	r3, [sp, #8]
 800657a:	e780      	b.n	800647e <_dtoa_r+0x7de>
 800657c:	2300      	movs	r3, #0
 800657e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006580:	e782      	b.n	8006488 <_dtoa_r+0x7e8>
 8006582:	d099      	beq.n	80064b8 <_dtoa_r+0x818>
 8006584:	9a08      	ldr	r2, [sp, #32]
 8006586:	331c      	adds	r3, #28
 8006588:	441a      	add	r2, r3
 800658a:	4498      	add	r8, r3
 800658c:	441e      	add	r6, r3
 800658e:	9208      	str	r2, [sp, #32]
 8006590:	e792      	b.n	80064b8 <_dtoa_r+0x818>
 8006592:	4603      	mov	r3, r0
 8006594:	e7f6      	b.n	8006584 <_dtoa_r+0x8e4>
 8006596:	9b07      	ldr	r3, [sp, #28]
 8006598:	9704      	str	r7, [sp, #16]
 800659a:	2b00      	cmp	r3, #0
 800659c:	dc20      	bgt.n	80065e0 <_dtoa_r+0x940>
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	dd1e      	ble.n	80065e4 <_dtoa_r+0x944>
 80065a6:	9b00      	ldr	r3, [sp, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f47f aec0 	bne.w	800632e <_dtoa_r+0x68e>
 80065ae:	4621      	mov	r1, r4
 80065b0:	2205      	movs	r2, #5
 80065b2:	4658      	mov	r0, fp
 80065b4:	f000 fa9a 	bl	8006aec <__multadd>
 80065b8:	4601      	mov	r1, r0
 80065ba:	4604      	mov	r4, r0
 80065bc:	4648      	mov	r0, r9
 80065be:	f000 fcf7 	bl	8006fb0 <__mcmp>
 80065c2:	2800      	cmp	r0, #0
 80065c4:	f77f aeb3 	ble.w	800632e <_dtoa_r+0x68e>
 80065c8:	4656      	mov	r6, sl
 80065ca:	2331      	movs	r3, #49	@ 0x31
 80065cc:	f806 3b01 	strb.w	r3, [r6], #1
 80065d0:	9b04      	ldr	r3, [sp, #16]
 80065d2:	3301      	adds	r3, #1
 80065d4:	9304      	str	r3, [sp, #16]
 80065d6:	e6ae      	b.n	8006336 <_dtoa_r+0x696>
 80065d8:	9c07      	ldr	r4, [sp, #28]
 80065da:	9704      	str	r7, [sp, #16]
 80065dc:	4625      	mov	r5, r4
 80065de:	e7f3      	b.n	80065c8 <_dtoa_r+0x928>
 80065e0:	9b07      	ldr	r3, [sp, #28]
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	f000 8104 	beq.w	80067f4 <_dtoa_r+0xb54>
 80065ec:	2e00      	cmp	r6, #0
 80065ee:	dd05      	ble.n	80065fc <_dtoa_r+0x95c>
 80065f0:	4629      	mov	r1, r5
 80065f2:	4632      	mov	r2, r6
 80065f4:	4658      	mov	r0, fp
 80065f6:	f000 fc6f 	bl	8006ed8 <__lshift>
 80065fa:	4605      	mov	r5, r0
 80065fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d05a      	beq.n	80066b8 <_dtoa_r+0xa18>
 8006602:	6869      	ldr	r1, [r5, #4]
 8006604:	4658      	mov	r0, fp
 8006606:	f000 fa0f 	bl	8006a28 <_Balloc>
 800660a:	4606      	mov	r6, r0
 800660c:	b928      	cbnz	r0, 800661a <_dtoa_r+0x97a>
 800660e:	4b84      	ldr	r3, [pc, #528]	@ (8006820 <_dtoa_r+0xb80>)
 8006610:	4602      	mov	r2, r0
 8006612:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006616:	f7ff bb5a 	b.w	8005cce <_dtoa_r+0x2e>
 800661a:	692a      	ldr	r2, [r5, #16]
 800661c:	3202      	adds	r2, #2
 800661e:	0092      	lsls	r2, r2, #2
 8006620:	f105 010c 	add.w	r1, r5, #12
 8006624:	300c      	adds	r0, #12
 8006626:	f001 ff75 	bl	8008514 <memcpy>
 800662a:	2201      	movs	r2, #1
 800662c:	4631      	mov	r1, r6
 800662e:	4658      	mov	r0, fp
 8006630:	f000 fc52 	bl	8006ed8 <__lshift>
 8006634:	f10a 0301 	add.w	r3, sl, #1
 8006638:	9307      	str	r3, [sp, #28]
 800663a:	9b00      	ldr	r3, [sp, #0]
 800663c:	4453      	add	r3, sl
 800663e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006640:	9b02      	ldr	r3, [sp, #8]
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	462f      	mov	r7, r5
 8006648:	930a      	str	r3, [sp, #40]	@ 0x28
 800664a:	4605      	mov	r5, r0
 800664c:	9b07      	ldr	r3, [sp, #28]
 800664e:	4621      	mov	r1, r4
 8006650:	3b01      	subs	r3, #1
 8006652:	4648      	mov	r0, r9
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	f7ff fa99 	bl	8005b8c <quorem>
 800665a:	4639      	mov	r1, r7
 800665c:	9002      	str	r0, [sp, #8]
 800665e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006662:	4648      	mov	r0, r9
 8006664:	f000 fca4 	bl	8006fb0 <__mcmp>
 8006668:	462a      	mov	r2, r5
 800666a:	9008      	str	r0, [sp, #32]
 800666c:	4621      	mov	r1, r4
 800666e:	4658      	mov	r0, fp
 8006670:	f000 fcba 	bl	8006fe8 <__mdiff>
 8006674:	68c2      	ldr	r2, [r0, #12]
 8006676:	4606      	mov	r6, r0
 8006678:	bb02      	cbnz	r2, 80066bc <_dtoa_r+0xa1c>
 800667a:	4601      	mov	r1, r0
 800667c:	4648      	mov	r0, r9
 800667e:	f000 fc97 	bl	8006fb0 <__mcmp>
 8006682:	4602      	mov	r2, r0
 8006684:	4631      	mov	r1, r6
 8006686:	4658      	mov	r0, fp
 8006688:	920e      	str	r2, [sp, #56]	@ 0x38
 800668a:	f000 fa0d 	bl	8006aa8 <_Bfree>
 800668e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006690:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006692:	9e07      	ldr	r6, [sp, #28]
 8006694:	ea43 0102 	orr.w	r1, r3, r2
 8006698:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800669a:	4319      	orrs	r1, r3
 800669c:	d110      	bne.n	80066c0 <_dtoa_r+0xa20>
 800669e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80066a2:	d029      	beq.n	80066f8 <_dtoa_r+0xa58>
 80066a4:	9b08      	ldr	r3, [sp, #32]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	dd02      	ble.n	80066b0 <_dtoa_r+0xa10>
 80066aa:	9b02      	ldr	r3, [sp, #8]
 80066ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80066b0:	9b00      	ldr	r3, [sp, #0]
 80066b2:	f883 8000 	strb.w	r8, [r3]
 80066b6:	e63f      	b.n	8006338 <_dtoa_r+0x698>
 80066b8:	4628      	mov	r0, r5
 80066ba:	e7bb      	b.n	8006634 <_dtoa_r+0x994>
 80066bc:	2201      	movs	r2, #1
 80066be:	e7e1      	b.n	8006684 <_dtoa_r+0x9e4>
 80066c0:	9b08      	ldr	r3, [sp, #32]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	db04      	blt.n	80066d0 <_dtoa_r+0xa30>
 80066c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80066c8:	430b      	orrs	r3, r1
 80066ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80066cc:	430b      	orrs	r3, r1
 80066ce:	d120      	bne.n	8006712 <_dtoa_r+0xa72>
 80066d0:	2a00      	cmp	r2, #0
 80066d2:	dded      	ble.n	80066b0 <_dtoa_r+0xa10>
 80066d4:	4649      	mov	r1, r9
 80066d6:	2201      	movs	r2, #1
 80066d8:	4658      	mov	r0, fp
 80066da:	f000 fbfd 	bl	8006ed8 <__lshift>
 80066de:	4621      	mov	r1, r4
 80066e0:	4681      	mov	r9, r0
 80066e2:	f000 fc65 	bl	8006fb0 <__mcmp>
 80066e6:	2800      	cmp	r0, #0
 80066e8:	dc03      	bgt.n	80066f2 <_dtoa_r+0xa52>
 80066ea:	d1e1      	bne.n	80066b0 <_dtoa_r+0xa10>
 80066ec:	f018 0f01 	tst.w	r8, #1
 80066f0:	d0de      	beq.n	80066b0 <_dtoa_r+0xa10>
 80066f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80066f6:	d1d8      	bne.n	80066aa <_dtoa_r+0xa0a>
 80066f8:	9a00      	ldr	r2, [sp, #0]
 80066fa:	2339      	movs	r3, #57	@ 0x39
 80066fc:	7013      	strb	r3, [r2, #0]
 80066fe:	4633      	mov	r3, r6
 8006700:	461e      	mov	r6, r3
 8006702:	3b01      	subs	r3, #1
 8006704:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006708:	2a39      	cmp	r2, #57	@ 0x39
 800670a:	d052      	beq.n	80067b2 <_dtoa_r+0xb12>
 800670c:	3201      	adds	r2, #1
 800670e:	701a      	strb	r2, [r3, #0]
 8006710:	e612      	b.n	8006338 <_dtoa_r+0x698>
 8006712:	2a00      	cmp	r2, #0
 8006714:	dd07      	ble.n	8006726 <_dtoa_r+0xa86>
 8006716:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800671a:	d0ed      	beq.n	80066f8 <_dtoa_r+0xa58>
 800671c:	9a00      	ldr	r2, [sp, #0]
 800671e:	f108 0301 	add.w	r3, r8, #1
 8006722:	7013      	strb	r3, [r2, #0]
 8006724:	e608      	b.n	8006338 <_dtoa_r+0x698>
 8006726:	9b07      	ldr	r3, [sp, #28]
 8006728:	9a07      	ldr	r2, [sp, #28]
 800672a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800672e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006730:	4293      	cmp	r3, r2
 8006732:	d028      	beq.n	8006786 <_dtoa_r+0xae6>
 8006734:	4649      	mov	r1, r9
 8006736:	2300      	movs	r3, #0
 8006738:	220a      	movs	r2, #10
 800673a:	4658      	mov	r0, fp
 800673c:	f000 f9d6 	bl	8006aec <__multadd>
 8006740:	42af      	cmp	r7, r5
 8006742:	4681      	mov	r9, r0
 8006744:	f04f 0300 	mov.w	r3, #0
 8006748:	f04f 020a 	mov.w	r2, #10
 800674c:	4639      	mov	r1, r7
 800674e:	4658      	mov	r0, fp
 8006750:	d107      	bne.n	8006762 <_dtoa_r+0xac2>
 8006752:	f000 f9cb 	bl	8006aec <__multadd>
 8006756:	4607      	mov	r7, r0
 8006758:	4605      	mov	r5, r0
 800675a:	9b07      	ldr	r3, [sp, #28]
 800675c:	3301      	adds	r3, #1
 800675e:	9307      	str	r3, [sp, #28]
 8006760:	e774      	b.n	800664c <_dtoa_r+0x9ac>
 8006762:	f000 f9c3 	bl	8006aec <__multadd>
 8006766:	4629      	mov	r1, r5
 8006768:	4607      	mov	r7, r0
 800676a:	2300      	movs	r3, #0
 800676c:	220a      	movs	r2, #10
 800676e:	4658      	mov	r0, fp
 8006770:	f000 f9bc 	bl	8006aec <__multadd>
 8006774:	4605      	mov	r5, r0
 8006776:	e7f0      	b.n	800675a <_dtoa_r+0xaba>
 8006778:	9b00      	ldr	r3, [sp, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	bfcc      	ite	gt
 800677e:	461e      	movgt	r6, r3
 8006780:	2601      	movle	r6, #1
 8006782:	4456      	add	r6, sl
 8006784:	2700      	movs	r7, #0
 8006786:	4649      	mov	r1, r9
 8006788:	2201      	movs	r2, #1
 800678a:	4658      	mov	r0, fp
 800678c:	f000 fba4 	bl	8006ed8 <__lshift>
 8006790:	4621      	mov	r1, r4
 8006792:	4681      	mov	r9, r0
 8006794:	f000 fc0c 	bl	8006fb0 <__mcmp>
 8006798:	2800      	cmp	r0, #0
 800679a:	dcb0      	bgt.n	80066fe <_dtoa_r+0xa5e>
 800679c:	d102      	bne.n	80067a4 <_dtoa_r+0xb04>
 800679e:	f018 0f01 	tst.w	r8, #1
 80067a2:	d1ac      	bne.n	80066fe <_dtoa_r+0xa5e>
 80067a4:	4633      	mov	r3, r6
 80067a6:	461e      	mov	r6, r3
 80067a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067ac:	2a30      	cmp	r2, #48	@ 0x30
 80067ae:	d0fa      	beq.n	80067a6 <_dtoa_r+0xb06>
 80067b0:	e5c2      	b.n	8006338 <_dtoa_r+0x698>
 80067b2:	459a      	cmp	sl, r3
 80067b4:	d1a4      	bne.n	8006700 <_dtoa_r+0xa60>
 80067b6:	9b04      	ldr	r3, [sp, #16]
 80067b8:	3301      	adds	r3, #1
 80067ba:	9304      	str	r3, [sp, #16]
 80067bc:	2331      	movs	r3, #49	@ 0x31
 80067be:	f88a 3000 	strb.w	r3, [sl]
 80067c2:	e5b9      	b.n	8006338 <_dtoa_r+0x698>
 80067c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80067c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006824 <_dtoa_r+0xb84>
 80067ca:	b11b      	cbz	r3, 80067d4 <_dtoa_r+0xb34>
 80067cc:	f10a 0308 	add.w	r3, sl, #8
 80067d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80067d2:	6013      	str	r3, [r2, #0]
 80067d4:	4650      	mov	r0, sl
 80067d6:	b019      	add	sp, #100	@ 0x64
 80067d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067de:	2b01      	cmp	r3, #1
 80067e0:	f77f ae37 	ble.w	8006452 <_dtoa_r+0x7b2>
 80067e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80067e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80067e8:	2001      	movs	r0, #1
 80067ea:	e655      	b.n	8006498 <_dtoa_r+0x7f8>
 80067ec:	9b00      	ldr	r3, [sp, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	f77f aed6 	ble.w	80065a0 <_dtoa_r+0x900>
 80067f4:	4656      	mov	r6, sl
 80067f6:	4621      	mov	r1, r4
 80067f8:	4648      	mov	r0, r9
 80067fa:	f7ff f9c7 	bl	8005b8c <quorem>
 80067fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006802:	f806 8b01 	strb.w	r8, [r6], #1
 8006806:	9b00      	ldr	r3, [sp, #0]
 8006808:	eba6 020a 	sub.w	r2, r6, sl
 800680c:	4293      	cmp	r3, r2
 800680e:	ddb3      	ble.n	8006778 <_dtoa_r+0xad8>
 8006810:	4649      	mov	r1, r9
 8006812:	2300      	movs	r3, #0
 8006814:	220a      	movs	r2, #10
 8006816:	4658      	mov	r0, fp
 8006818:	f000 f968 	bl	8006aec <__multadd>
 800681c:	4681      	mov	r9, r0
 800681e:	e7ea      	b.n	80067f6 <_dtoa_r+0xb56>
 8006820:	08009385 	.word	0x08009385
 8006824:	08009309 	.word	0x08009309

08006828 <_free_r>:
 8006828:	b538      	push	{r3, r4, r5, lr}
 800682a:	4605      	mov	r5, r0
 800682c:	2900      	cmp	r1, #0
 800682e:	d041      	beq.n	80068b4 <_free_r+0x8c>
 8006830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006834:	1f0c      	subs	r4, r1, #4
 8006836:	2b00      	cmp	r3, #0
 8006838:	bfb8      	it	lt
 800683a:	18e4      	addlt	r4, r4, r3
 800683c:	f000 f8e8 	bl	8006a10 <__malloc_lock>
 8006840:	4a1d      	ldr	r2, [pc, #116]	@ (80068b8 <_free_r+0x90>)
 8006842:	6813      	ldr	r3, [r2, #0]
 8006844:	b933      	cbnz	r3, 8006854 <_free_r+0x2c>
 8006846:	6063      	str	r3, [r4, #4]
 8006848:	6014      	str	r4, [r2, #0]
 800684a:	4628      	mov	r0, r5
 800684c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006850:	f000 b8e4 	b.w	8006a1c <__malloc_unlock>
 8006854:	42a3      	cmp	r3, r4
 8006856:	d908      	bls.n	800686a <_free_r+0x42>
 8006858:	6820      	ldr	r0, [r4, #0]
 800685a:	1821      	adds	r1, r4, r0
 800685c:	428b      	cmp	r3, r1
 800685e:	bf01      	itttt	eq
 8006860:	6819      	ldreq	r1, [r3, #0]
 8006862:	685b      	ldreq	r3, [r3, #4]
 8006864:	1809      	addeq	r1, r1, r0
 8006866:	6021      	streq	r1, [r4, #0]
 8006868:	e7ed      	b.n	8006846 <_free_r+0x1e>
 800686a:	461a      	mov	r2, r3
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	b10b      	cbz	r3, 8006874 <_free_r+0x4c>
 8006870:	42a3      	cmp	r3, r4
 8006872:	d9fa      	bls.n	800686a <_free_r+0x42>
 8006874:	6811      	ldr	r1, [r2, #0]
 8006876:	1850      	adds	r0, r2, r1
 8006878:	42a0      	cmp	r0, r4
 800687a:	d10b      	bne.n	8006894 <_free_r+0x6c>
 800687c:	6820      	ldr	r0, [r4, #0]
 800687e:	4401      	add	r1, r0
 8006880:	1850      	adds	r0, r2, r1
 8006882:	4283      	cmp	r3, r0
 8006884:	6011      	str	r1, [r2, #0]
 8006886:	d1e0      	bne.n	800684a <_free_r+0x22>
 8006888:	6818      	ldr	r0, [r3, #0]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	6053      	str	r3, [r2, #4]
 800688e:	4408      	add	r0, r1
 8006890:	6010      	str	r0, [r2, #0]
 8006892:	e7da      	b.n	800684a <_free_r+0x22>
 8006894:	d902      	bls.n	800689c <_free_r+0x74>
 8006896:	230c      	movs	r3, #12
 8006898:	602b      	str	r3, [r5, #0]
 800689a:	e7d6      	b.n	800684a <_free_r+0x22>
 800689c:	6820      	ldr	r0, [r4, #0]
 800689e:	1821      	adds	r1, r4, r0
 80068a0:	428b      	cmp	r3, r1
 80068a2:	bf04      	itt	eq
 80068a4:	6819      	ldreq	r1, [r3, #0]
 80068a6:	685b      	ldreq	r3, [r3, #4]
 80068a8:	6063      	str	r3, [r4, #4]
 80068aa:	bf04      	itt	eq
 80068ac:	1809      	addeq	r1, r1, r0
 80068ae:	6021      	streq	r1, [r4, #0]
 80068b0:	6054      	str	r4, [r2, #4]
 80068b2:	e7ca      	b.n	800684a <_free_r+0x22>
 80068b4:	bd38      	pop	{r3, r4, r5, pc}
 80068b6:	bf00      	nop
 80068b8:	20000484 	.word	0x20000484

080068bc <malloc>:
 80068bc:	4b02      	ldr	r3, [pc, #8]	@ (80068c8 <malloc+0xc>)
 80068be:	4601      	mov	r1, r0
 80068c0:	6818      	ldr	r0, [r3, #0]
 80068c2:	f000 b825 	b.w	8006910 <_malloc_r>
 80068c6:	bf00      	nop
 80068c8:	20000030 	.word	0x20000030

080068cc <sbrk_aligned>:
 80068cc:	b570      	push	{r4, r5, r6, lr}
 80068ce:	4e0f      	ldr	r6, [pc, #60]	@ (800690c <sbrk_aligned+0x40>)
 80068d0:	460c      	mov	r4, r1
 80068d2:	6831      	ldr	r1, [r6, #0]
 80068d4:	4605      	mov	r5, r0
 80068d6:	b911      	cbnz	r1, 80068de <sbrk_aligned+0x12>
 80068d8:	f001 fe0c 	bl	80084f4 <_sbrk_r>
 80068dc:	6030      	str	r0, [r6, #0]
 80068de:	4621      	mov	r1, r4
 80068e0:	4628      	mov	r0, r5
 80068e2:	f001 fe07 	bl	80084f4 <_sbrk_r>
 80068e6:	1c43      	adds	r3, r0, #1
 80068e8:	d103      	bne.n	80068f2 <sbrk_aligned+0x26>
 80068ea:	f04f 34ff 	mov.w	r4, #4294967295
 80068ee:	4620      	mov	r0, r4
 80068f0:	bd70      	pop	{r4, r5, r6, pc}
 80068f2:	1cc4      	adds	r4, r0, #3
 80068f4:	f024 0403 	bic.w	r4, r4, #3
 80068f8:	42a0      	cmp	r0, r4
 80068fa:	d0f8      	beq.n	80068ee <sbrk_aligned+0x22>
 80068fc:	1a21      	subs	r1, r4, r0
 80068fe:	4628      	mov	r0, r5
 8006900:	f001 fdf8 	bl	80084f4 <_sbrk_r>
 8006904:	3001      	adds	r0, #1
 8006906:	d1f2      	bne.n	80068ee <sbrk_aligned+0x22>
 8006908:	e7ef      	b.n	80068ea <sbrk_aligned+0x1e>
 800690a:	bf00      	nop
 800690c:	20000480 	.word	0x20000480

08006910 <_malloc_r>:
 8006910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006914:	1ccd      	adds	r5, r1, #3
 8006916:	f025 0503 	bic.w	r5, r5, #3
 800691a:	3508      	adds	r5, #8
 800691c:	2d0c      	cmp	r5, #12
 800691e:	bf38      	it	cc
 8006920:	250c      	movcc	r5, #12
 8006922:	2d00      	cmp	r5, #0
 8006924:	4606      	mov	r6, r0
 8006926:	db01      	blt.n	800692c <_malloc_r+0x1c>
 8006928:	42a9      	cmp	r1, r5
 800692a:	d904      	bls.n	8006936 <_malloc_r+0x26>
 800692c:	230c      	movs	r3, #12
 800692e:	6033      	str	r3, [r6, #0]
 8006930:	2000      	movs	r0, #0
 8006932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006936:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006a0c <_malloc_r+0xfc>
 800693a:	f000 f869 	bl	8006a10 <__malloc_lock>
 800693e:	f8d8 3000 	ldr.w	r3, [r8]
 8006942:	461c      	mov	r4, r3
 8006944:	bb44      	cbnz	r4, 8006998 <_malloc_r+0x88>
 8006946:	4629      	mov	r1, r5
 8006948:	4630      	mov	r0, r6
 800694a:	f7ff ffbf 	bl	80068cc <sbrk_aligned>
 800694e:	1c43      	adds	r3, r0, #1
 8006950:	4604      	mov	r4, r0
 8006952:	d158      	bne.n	8006a06 <_malloc_r+0xf6>
 8006954:	f8d8 4000 	ldr.w	r4, [r8]
 8006958:	4627      	mov	r7, r4
 800695a:	2f00      	cmp	r7, #0
 800695c:	d143      	bne.n	80069e6 <_malloc_r+0xd6>
 800695e:	2c00      	cmp	r4, #0
 8006960:	d04b      	beq.n	80069fa <_malloc_r+0xea>
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	4639      	mov	r1, r7
 8006966:	4630      	mov	r0, r6
 8006968:	eb04 0903 	add.w	r9, r4, r3
 800696c:	f001 fdc2 	bl	80084f4 <_sbrk_r>
 8006970:	4581      	cmp	r9, r0
 8006972:	d142      	bne.n	80069fa <_malloc_r+0xea>
 8006974:	6821      	ldr	r1, [r4, #0]
 8006976:	1a6d      	subs	r5, r5, r1
 8006978:	4629      	mov	r1, r5
 800697a:	4630      	mov	r0, r6
 800697c:	f7ff ffa6 	bl	80068cc <sbrk_aligned>
 8006980:	3001      	adds	r0, #1
 8006982:	d03a      	beq.n	80069fa <_malloc_r+0xea>
 8006984:	6823      	ldr	r3, [r4, #0]
 8006986:	442b      	add	r3, r5
 8006988:	6023      	str	r3, [r4, #0]
 800698a:	f8d8 3000 	ldr.w	r3, [r8]
 800698e:	685a      	ldr	r2, [r3, #4]
 8006990:	bb62      	cbnz	r2, 80069ec <_malloc_r+0xdc>
 8006992:	f8c8 7000 	str.w	r7, [r8]
 8006996:	e00f      	b.n	80069b8 <_malloc_r+0xa8>
 8006998:	6822      	ldr	r2, [r4, #0]
 800699a:	1b52      	subs	r2, r2, r5
 800699c:	d420      	bmi.n	80069e0 <_malloc_r+0xd0>
 800699e:	2a0b      	cmp	r2, #11
 80069a0:	d917      	bls.n	80069d2 <_malloc_r+0xc2>
 80069a2:	1961      	adds	r1, r4, r5
 80069a4:	42a3      	cmp	r3, r4
 80069a6:	6025      	str	r5, [r4, #0]
 80069a8:	bf18      	it	ne
 80069aa:	6059      	strne	r1, [r3, #4]
 80069ac:	6863      	ldr	r3, [r4, #4]
 80069ae:	bf08      	it	eq
 80069b0:	f8c8 1000 	streq.w	r1, [r8]
 80069b4:	5162      	str	r2, [r4, r5]
 80069b6:	604b      	str	r3, [r1, #4]
 80069b8:	4630      	mov	r0, r6
 80069ba:	f000 f82f 	bl	8006a1c <__malloc_unlock>
 80069be:	f104 000b 	add.w	r0, r4, #11
 80069c2:	1d23      	adds	r3, r4, #4
 80069c4:	f020 0007 	bic.w	r0, r0, #7
 80069c8:	1ac2      	subs	r2, r0, r3
 80069ca:	bf1c      	itt	ne
 80069cc:	1a1b      	subne	r3, r3, r0
 80069ce:	50a3      	strne	r3, [r4, r2]
 80069d0:	e7af      	b.n	8006932 <_malloc_r+0x22>
 80069d2:	6862      	ldr	r2, [r4, #4]
 80069d4:	42a3      	cmp	r3, r4
 80069d6:	bf0c      	ite	eq
 80069d8:	f8c8 2000 	streq.w	r2, [r8]
 80069dc:	605a      	strne	r2, [r3, #4]
 80069de:	e7eb      	b.n	80069b8 <_malloc_r+0xa8>
 80069e0:	4623      	mov	r3, r4
 80069e2:	6864      	ldr	r4, [r4, #4]
 80069e4:	e7ae      	b.n	8006944 <_malloc_r+0x34>
 80069e6:	463c      	mov	r4, r7
 80069e8:	687f      	ldr	r7, [r7, #4]
 80069ea:	e7b6      	b.n	800695a <_malloc_r+0x4a>
 80069ec:	461a      	mov	r2, r3
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	42a3      	cmp	r3, r4
 80069f2:	d1fb      	bne.n	80069ec <_malloc_r+0xdc>
 80069f4:	2300      	movs	r3, #0
 80069f6:	6053      	str	r3, [r2, #4]
 80069f8:	e7de      	b.n	80069b8 <_malloc_r+0xa8>
 80069fa:	230c      	movs	r3, #12
 80069fc:	6033      	str	r3, [r6, #0]
 80069fe:	4630      	mov	r0, r6
 8006a00:	f000 f80c 	bl	8006a1c <__malloc_unlock>
 8006a04:	e794      	b.n	8006930 <_malloc_r+0x20>
 8006a06:	6005      	str	r5, [r0, #0]
 8006a08:	e7d6      	b.n	80069b8 <_malloc_r+0xa8>
 8006a0a:	bf00      	nop
 8006a0c:	20000484 	.word	0x20000484

08006a10 <__malloc_lock>:
 8006a10:	4801      	ldr	r0, [pc, #4]	@ (8006a18 <__malloc_lock+0x8>)
 8006a12:	f7ff b8b2 	b.w	8005b7a <__retarget_lock_acquire_recursive>
 8006a16:	bf00      	nop
 8006a18:	2000047c 	.word	0x2000047c

08006a1c <__malloc_unlock>:
 8006a1c:	4801      	ldr	r0, [pc, #4]	@ (8006a24 <__malloc_unlock+0x8>)
 8006a1e:	f7ff b8ad 	b.w	8005b7c <__retarget_lock_release_recursive>
 8006a22:	bf00      	nop
 8006a24:	2000047c 	.word	0x2000047c

08006a28 <_Balloc>:
 8006a28:	b570      	push	{r4, r5, r6, lr}
 8006a2a:	69c6      	ldr	r6, [r0, #28]
 8006a2c:	4604      	mov	r4, r0
 8006a2e:	460d      	mov	r5, r1
 8006a30:	b976      	cbnz	r6, 8006a50 <_Balloc+0x28>
 8006a32:	2010      	movs	r0, #16
 8006a34:	f7ff ff42 	bl	80068bc <malloc>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	61e0      	str	r0, [r4, #28]
 8006a3c:	b920      	cbnz	r0, 8006a48 <_Balloc+0x20>
 8006a3e:	4b18      	ldr	r3, [pc, #96]	@ (8006aa0 <_Balloc+0x78>)
 8006a40:	4818      	ldr	r0, [pc, #96]	@ (8006aa4 <_Balloc+0x7c>)
 8006a42:	216b      	movs	r1, #107	@ 0x6b
 8006a44:	f001 fd7c 	bl	8008540 <__assert_func>
 8006a48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a4c:	6006      	str	r6, [r0, #0]
 8006a4e:	60c6      	str	r6, [r0, #12]
 8006a50:	69e6      	ldr	r6, [r4, #28]
 8006a52:	68f3      	ldr	r3, [r6, #12]
 8006a54:	b183      	cbz	r3, 8006a78 <_Balloc+0x50>
 8006a56:	69e3      	ldr	r3, [r4, #28]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006a5e:	b9b8      	cbnz	r0, 8006a90 <_Balloc+0x68>
 8006a60:	2101      	movs	r1, #1
 8006a62:	fa01 f605 	lsl.w	r6, r1, r5
 8006a66:	1d72      	adds	r2, r6, #5
 8006a68:	0092      	lsls	r2, r2, #2
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	f001 fd86 	bl	800857c <_calloc_r>
 8006a70:	b160      	cbz	r0, 8006a8c <_Balloc+0x64>
 8006a72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a76:	e00e      	b.n	8006a96 <_Balloc+0x6e>
 8006a78:	2221      	movs	r2, #33	@ 0x21
 8006a7a:	2104      	movs	r1, #4
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	f001 fd7d 	bl	800857c <_calloc_r>
 8006a82:	69e3      	ldr	r3, [r4, #28]
 8006a84:	60f0      	str	r0, [r6, #12]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1e4      	bne.n	8006a56 <_Balloc+0x2e>
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	bd70      	pop	{r4, r5, r6, pc}
 8006a90:	6802      	ldr	r2, [r0, #0]
 8006a92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a96:	2300      	movs	r3, #0
 8006a98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a9c:	e7f7      	b.n	8006a8e <_Balloc+0x66>
 8006a9e:	bf00      	nop
 8006aa0:	08009316 	.word	0x08009316
 8006aa4:	08009396 	.word	0x08009396

08006aa8 <_Bfree>:
 8006aa8:	b570      	push	{r4, r5, r6, lr}
 8006aaa:	69c6      	ldr	r6, [r0, #28]
 8006aac:	4605      	mov	r5, r0
 8006aae:	460c      	mov	r4, r1
 8006ab0:	b976      	cbnz	r6, 8006ad0 <_Bfree+0x28>
 8006ab2:	2010      	movs	r0, #16
 8006ab4:	f7ff ff02 	bl	80068bc <malloc>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	61e8      	str	r0, [r5, #28]
 8006abc:	b920      	cbnz	r0, 8006ac8 <_Bfree+0x20>
 8006abe:	4b09      	ldr	r3, [pc, #36]	@ (8006ae4 <_Bfree+0x3c>)
 8006ac0:	4809      	ldr	r0, [pc, #36]	@ (8006ae8 <_Bfree+0x40>)
 8006ac2:	218f      	movs	r1, #143	@ 0x8f
 8006ac4:	f001 fd3c 	bl	8008540 <__assert_func>
 8006ac8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006acc:	6006      	str	r6, [r0, #0]
 8006ace:	60c6      	str	r6, [r0, #12]
 8006ad0:	b13c      	cbz	r4, 8006ae2 <_Bfree+0x3a>
 8006ad2:	69eb      	ldr	r3, [r5, #28]
 8006ad4:	6862      	ldr	r2, [r4, #4]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006adc:	6021      	str	r1, [r4, #0]
 8006ade:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ae2:	bd70      	pop	{r4, r5, r6, pc}
 8006ae4:	08009316 	.word	0x08009316
 8006ae8:	08009396 	.word	0x08009396

08006aec <__multadd>:
 8006aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006af0:	690d      	ldr	r5, [r1, #16]
 8006af2:	4607      	mov	r7, r0
 8006af4:	460c      	mov	r4, r1
 8006af6:	461e      	mov	r6, r3
 8006af8:	f101 0c14 	add.w	ip, r1, #20
 8006afc:	2000      	movs	r0, #0
 8006afe:	f8dc 3000 	ldr.w	r3, [ip]
 8006b02:	b299      	uxth	r1, r3
 8006b04:	fb02 6101 	mla	r1, r2, r1, r6
 8006b08:	0c1e      	lsrs	r6, r3, #16
 8006b0a:	0c0b      	lsrs	r3, r1, #16
 8006b0c:	fb02 3306 	mla	r3, r2, r6, r3
 8006b10:	b289      	uxth	r1, r1
 8006b12:	3001      	adds	r0, #1
 8006b14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006b18:	4285      	cmp	r5, r0
 8006b1a:	f84c 1b04 	str.w	r1, [ip], #4
 8006b1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006b22:	dcec      	bgt.n	8006afe <__multadd+0x12>
 8006b24:	b30e      	cbz	r6, 8006b6a <__multadd+0x7e>
 8006b26:	68a3      	ldr	r3, [r4, #8]
 8006b28:	42ab      	cmp	r3, r5
 8006b2a:	dc19      	bgt.n	8006b60 <__multadd+0x74>
 8006b2c:	6861      	ldr	r1, [r4, #4]
 8006b2e:	4638      	mov	r0, r7
 8006b30:	3101      	adds	r1, #1
 8006b32:	f7ff ff79 	bl	8006a28 <_Balloc>
 8006b36:	4680      	mov	r8, r0
 8006b38:	b928      	cbnz	r0, 8006b46 <__multadd+0x5a>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8006b70 <__multadd+0x84>)
 8006b3e:	480d      	ldr	r0, [pc, #52]	@ (8006b74 <__multadd+0x88>)
 8006b40:	21ba      	movs	r1, #186	@ 0xba
 8006b42:	f001 fcfd 	bl	8008540 <__assert_func>
 8006b46:	6922      	ldr	r2, [r4, #16]
 8006b48:	3202      	adds	r2, #2
 8006b4a:	f104 010c 	add.w	r1, r4, #12
 8006b4e:	0092      	lsls	r2, r2, #2
 8006b50:	300c      	adds	r0, #12
 8006b52:	f001 fcdf 	bl	8008514 <memcpy>
 8006b56:	4621      	mov	r1, r4
 8006b58:	4638      	mov	r0, r7
 8006b5a:	f7ff ffa5 	bl	8006aa8 <_Bfree>
 8006b5e:	4644      	mov	r4, r8
 8006b60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b64:	3501      	adds	r5, #1
 8006b66:	615e      	str	r6, [r3, #20]
 8006b68:	6125      	str	r5, [r4, #16]
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b70:	08009385 	.word	0x08009385
 8006b74:	08009396 	.word	0x08009396

08006b78 <__s2b>:
 8006b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b7c:	460c      	mov	r4, r1
 8006b7e:	4615      	mov	r5, r2
 8006b80:	461f      	mov	r7, r3
 8006b82:	2209      	movs	r2, #9
 8006b84:	3308      	adds	r3, #8
 8006b86:	4606      	mov	r6, r0
 8006b88:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	2201      	movs	r2, #1
 8006b90:	429a      	cmp	r2, r3
 8006b92:	db09      	blt.n	8006ba8 <__s2b+0x30>
 8006b94:	4630      	mov	r0, r6
 8006b96:	f7ff ff47 	bl	8006a28 <_Balloc>
 8006b9a:	b940      	cbnz	r0, 8006bae <__s2b+0x36>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	4b19      	ldr	r3, [pc, #100]	@ (8006c04 <__s2b+0x8c>)
 8006ba0:	4819      	ldr	r0, [pc, #100]	@ (8006c08 <__s2b+0x90>)
 8006ba2:	21d3      	movs	r1, #211	@ 0xd3
 8006ba4:	f001 fccc 	bl	8008540 <__assert_func>
 8006ba8:	0052      	lsls	r2, r2, #1
 8006baa:	3101      	adds	r1, #1
 8006bac:	e7f0      	b.n	8006b90 <__s2b+0x18>
 8006bae:	9b08      	ldr	r3, [sp, #32]
 8006bb0:	6143      	str	r3, [r0, #20]
 8006bb2:	2d09      	cmp	r5, #9
 8006bb4:	f04f 0301 	mov.w	r3, #1
 8006bb8:	6103      	str	r3, [r0, #16]
 8006bba:	dd16      	ble.n	8006bea <__s2b+0x72>
 8006bbc:	f104 0909 	add.w	r9, r4, #9
 8006bc0:	46c8      	mov	r8, r9
 8006bc2:	442c      	add	r4, r5
 8006bc4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006bc8:	4601      	mov	r1, r0
 8006bca:	3b30      	subs	r3, #48	@ 0x30
 8006bcc:	220a      	movs	r2, #10
 8006bce:	4630      	mov	r0, r6
 8006bd0:	f7ff ff8c 	bl	8006aec <__multadd>
 8006bd4:	45a0      	cmp	r8, r4
 8006bd6:	d1f5      	bne.n	8006bc4 <__s2b+0x4c>
 8006bd8:	f1a5 0408 	sub.w	r4, r5, #8
 8006bdc:	444c      	add	r4, r9
 8006bde:	1b2d      	subs	r5, r5, r4
 8006be0:	1963      	adds	r3, r4, r5
 8006be2:	42bb      	cmp	r3, r7
 8006be4:	db04      	blt.n	8006bf0 <__s2b+0x78>
 8006be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bea:	340a      	adds	r4, #10
 8006bec:	2509      	movs	r5, #9
 8006bee:	e7f6      	b.n	8006bde <__s2b+0x66>
 8006bf0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006bf4:	4601      	mov	r1, r0
 8006bf6:	3b30      	subs	r3, #48	@ 0x30
 8006bf8:	220a      	movs	r2, #10
 8006bfa:	4630      	mov	r0, r6
 8006bfc:	f7ff ff76 	bl	8006aec <__multadd>
 8006c00:	e7ee      	b.n	8006be0 <__s2b+0x68>
 8006c02:	bf00      	nop
 8006c04:	08009385 	.word	0x08009385
 8006c08:	08009396 	.word	0x08009396

08006c0c <__hi0bits>:
 8006c0c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006c10:	4603      	mov	r3, r0
 8006c12:	bf36      	itet	cc
 8006c14:	0403      	lslcc	r3, r0, #16
 8006c16:	2000      	movcs	r0, #0
 8006c18:	2010      	movcc	r0, #16
 8006c1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c1e:	bf3c      	itt	cc
 8006c20:	021b      	lslcc	r3, r3, #8
 8006c22:	3008      	addcc	r0, #8
 8006c24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c28:	bf3c      	itt	cc
 8006c2a:	011b      	lslcc	r3, r3, #4
 8006c2c:	3004      	addcc	r0, #4
 8006c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c32:	bf3c      	itt	cc
 8006c34:	009b      	lslcc	r3, r3, #2
 8006c36:	3002      	addcc	r0, #2
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	db05      	blt.n	8006c48 <__hi0bits+0x3c>
 8006c3c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006c40:	f100 0001 	add.w	r0, r0, #1
 8006c44:	bf08      	it	eq
 8006c46:	2020      	moveq	r0, #32
 8006c48:	4770      	bx	lr

08006c4a <__lo0bits>:
 8006c4a:	6803      	ldr	r3, [r0, #0]
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	f013 0007 	ands.w	r0, r3, #7
 8006c52:	d00b      	beq.n	8006c6c <__lo0bits+0x22>
 8006c54:	07d9      	lsls	r1, r3, #31
 8006c56:	d421      	bmi.n	8006c9c <__lo0bits+0x52>
 8006c58:	0798      	lsls	r0, r3, #30
 8006c5a:	bf49      	itett	mi
 8006c5c:	085b      	lsrmi	r3, r3, #1
 8006c5e:	089b      	lsrpl	r3, r3, #2
 8006c60:	2001      	movmi	r0, #1
 8006c62:	6013      	strmi	r3, [r2, #0]
 8006c64:	bf5c      	itt	pl
 8006c66:	6013      	strpl	r3, [r2, #0]
 8006c68:	2002      	movpl	r0, #2
 8006c6a:	4770      	bx	lr
 8006c6c:	b299      	uxth	r1, r3
 8006c6e:	b909      	cbnz	r1, 8006c74 <__lo0bits+0x2a>
 8006c70:	0c1b      	lsrs	r3, r3, #16
 8006c72:	2010      	movs	r0, #16
 8006c74:	b2d9      	uxtb	r1, r3
 8006c76:	b909      	cbnz	r1, 8006c7c <__lo0bits+0x32>
 8006c78:	3008      	adds	r0, #8
 8006c7a:	0a1b      	lsrs	r3, r3, #8
 8006c7c:	0719      	lsls	r1, r3, #28
 8006c7e:	bf04      	itt	eq
 8006c80:	091b      	lsreq	r3, r3, #4
 8006c82:	3004      	addeq	r0, #4
 8006c84:	0799      	lsls	r1, r3, #30
 8006c86:	bf04      	itt	eq
 8006c88:	089b      	lsreq	r3, r3, #2
 8006c8a:	3002      	addeq	r0, #2
 8006c8c:	07d9      	lsls	r1, r3, #31
 8006c8e:	d403      	bmi.n	8006c98 <__lo0bits+0x4e>
 8006c90:	085b      	lsrs	r3, r3, #1
 8006c92:	f100 0001 	add.w	r0, r0, #1
 8006c96:	d003      	beq.n	8006ca0 <__lo0bits+0x56>
 8006c98:	6013      	str	r3, [r2, #0]
 8006c9a:	4770      	bx	lr
 8006c9c:	2000      	movs	r0, #0
 8006c9e:	4770      	bx	lr
 8006ca0:	2020      	movs	r0, #32
 8006ca2:	4770      	bx	lr

08006ca4 <__i2b>:
 8006ca4:	b510      	push	{r4, lr}
 8006ca6:	460c      	mov	r4, r1
 8006ca8:	2101      	movs	r1, #1
 8006caa:	f7ff febd 	bl	8006a28 <_Balloc>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	b928      	cbnz	r0, 8006cbe <__i2b+0x1a>
 8006cb2:	4b05      	ldr	r3, [pc, #20]	@ (8006cc8 <__i2b+0x24>)
 8006cb4:	4805      	ldr	r0, [pc, #20]	@ (8006ccc <__i2b+0x28>)
 8006cb6:	f240 1145 	movw	r1, #325	@ 0x145
 8006cba:	f001 fc41 	bl	8008540 <__assert_func>
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	6144      	str	r4, [r0, #20]
 8006cc2:	6103      	str	r3, [r0, #16]
 8006cc4:	bd10      	pop	{r4, pc}
 8006cc6:	bf00      	nop
 8006cc8:	08009385 	.word	0x08009385
 8006ccc:	08009396 	.word	0x08009396

08006cd0 <__multiply>:
 8006cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd4:	4614      	mov	r4, r2
 8006cd6:	690a      	ldr	r2, [r1, #16]
 8006cd8:	6923      	ldr	r3, [r4, #16]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	bfa8      	it	ge
 8006cde:	4623      	movge	r3, r4
 8006ce0:	460f      	mov	r7, r1
 8006ce2:	bfa4      	itt	ge
 8006ce4:	460c      	movge	r4, r1
 8006ce6:	461f      	movge	r7, r3
 8006ce8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006cec:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006cf0:	68a3      	ldr	r3, [r4, #8]
 8006cf2:	6861      	ldr	r1, [r4, #4]
 8006cf4:	eb0a 0609 	add.w	r6, sl, r9
 8006cf8:	42b3      	cmp	r3, r6
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	bfb8      	it	lt
 8006cfe:	3101      	addlt	r1, #1
 8006d00:	f7ff fe92 	bl	8006a28 <_Balloc>
 8006d04:	b930      	cbnz	r0, 8006d14 <__multiply+0x44>
 8006d06:	4602      	mov	r2, r0
 8006d08:	4b44      	ldr	r3, [pc, #272]	@ (8006e1c <__multiply+0x14c>)
 8006d0a:	4845      	ldr	r0, [pc, #276]	@ (8006e20 <__multiply+0x150>)
 8006d0c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006d10:	f001 fc16 	bl	8008540 <__assert_func>
 8006d14:	f100 0514 	add.w	r5, r0, #20
 8006d18:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006d1c:	462b      	mov	r3, r5
 8006d1e:	2200      	movs	r2, #0
 8006d20:	4543      	cmp	r3, r8
 8006d22:	d321      	bcc.n	8006d68 <__multiply+0x98>
 8006d24:	f107 0114 	add.w	r1, r7, #20
 8006d28:	f104 0214 	add.w	r2, r4, #20
 8006d2c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006d30:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006d34:	9302      	str	r3, [sp, #8]
 8006d36:	1b13      	subs	r3, r2, r4
 8006d38:	3b15      	subs	r3, #21
 8006d3a:	f023 0303 	bic.w	r3, r3, #3
 8006d3e:	3304      	adds	r3, #4
 8006d40:	f104 0715 	add.w	r7, r4, #21
 8006d44:	42ba      	cmp	r2, r7
 8006d46:	bf38      	it	cc
 8006d48:	2304      	movcc	r3, #4
 8006d4a:	9301      	str	r3, [sp, #4]
 8006d4c:	9b02      	ldr	r3, [sp, #8]
 8006d4e:	9103      	str	r1, [sp, #12]
 8006d50:	428b      	cmp	r3, r1
 8006d52:	d80c      	bhi.n	8006d6e <__multiply+0x9e>
 8006d54:	2e00      	cmp	r6, #0
 8006d56:	dd03      	ble.n	8006d60 <__multiply+0x90>
 8006d58:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d05b      	beq.n	8006e18 <__multiply+0x148>
 8006d60:	6106      	str	r6, [r0, #16]
 8006d62:	b005      	add	sp, #20
 8006d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d68:	f843 2b04 	str.w	r2, [r3], #4
 8006d6c:	e7d8      	b.n	8006d20 <__multiply+0x50>
 8006d6e:	f8b1 a000 	ldrh.w	sl, [r1]
 8006d72:	f1ba 0f00 	cmp.w	sl, #0
 8006d76:	d024      	beq.n	8006dc2 <__multiply+0xf2>
 8006d78:	f104 0e14 	add.w	lr, r4, #20
 8006d7c:	46a9      	mov	r9, r5
 8006d7e:	f04f 0c00 	mov.w	ip, #0
 8006d82:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006d86:	f8d9 3000 	ldr.w	r3, [r9]
 8006d8a:	fa1f fb87 	uxth.w	fp, r7
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	fb0a 330b 	mla	r3, sl, fp, r3
 8006d94:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006d98:	f8d9 7000 	ldr.w	r7, [r9]
 8006d9c:	4463      	add	r3, ip
 8006d9e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006da2:	fb0a c70b 	mla	r7, sl, fp, ip
 8006da6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006db0:	4572      	cmp	r2, lr
 8006db2:	f849 3b04 	str.w	r3, [r9], #4
 8006db6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006dba:	d8e2      	bhi.n	8006d82 <__multiply+0xb2>
 8006dbc:	9b01      	ldr	r3, [sp, #4]
 8006dbe:	f845 c003 	str.w	ip, [r5, r3]
 8006dc2:	9b03      	ldr	r3, [sp, #12]
 8006dc4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006dc8:	3104      	adds	r1, #4
 8006dca:	f1b9 0f00 	cmp.w	r9, #0
 8006dce:	d021      	beq.n	8006e14 <__multiply+0x144>
 8006dd0:	682b      	ldr	r3, [r5, #0]
 8006dd2:	f104 0c14 	add.w	ip, r4, #20
 8006dd6:	46ae      	mov	lr, r5
 8006dd8:	f04f 0a00 	mov.w	sl, #0
 8006ddc:	f8bc b000 	ldrh.w	fp, [ip]
 8006de0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006de4:	fb09 770b 	mla	r7, r9, fp, r7
 8006de8:	4457      	add	r7, sl
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006df0:	f84e 3b04 	str.w	r3, [lr], #4
 8006df4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006df8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006dfc:	f8be 3000 	ldrh.w	r3, [lr]
 8006e00:	fb09 330a 	mla	r3, r9, sl, r3
 8006e04:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006e08:	4562      	cmp	r2, ip
 8006e0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e0e:	d8e5      	bhi.n	8006ddc <__multiply+0x10c>
 8006e10:	9f01      	ldr	r7, [sp, #4]
 8006e12:	51eb      	str	r3, [r5, r7]
 8006e14:	3504      	adds	r5, #4
 8006e16:	e799      	b.n	8006d4c <__multiply+0x7c>
 8006e18:	3e01      	subs	r6, #1
 8006e1a:	e79b      	b.n	8006d54 <__multiply+0x84>
 8006e1c:	08009385 	.word	0x08009385
 8006e20:	08009396 	.word	0x08009396

08006e24 <__pow5mult>:
 8006e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e28:	4615      	mov	r5, r2
 8006e2a:	f012 0203 	ands.w	r2, r2, #3
 8006e2e:	4607      	mov	r7, r0
 8006e30:	460e      	mov	r6, r1
 8006e32:	d007      	beq.n	8006e44 <__pow5mult+0x20>
 8006e34:	4c25      	ldr	r4, [pc, #148]	@ (8006ecc <__pow5mult+0xa8>)
 8006e36:	3a01      	subs	r2, #1
 8006e38:	2300      	movs	r3, #0
 8006e3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006e3e:	f7ff fe55 	bl	8006aec <__multadd>
 8006e42:	4606      	mov	r6, r0
 8006e44:	10ad      	asrs	r5, r5, #2
 8006e46:	d03d      	beq.n	8006ec4 <__pow5mult+0xa0>
 8006e48:	69fc      	ldr	r4, [r7, #28]
 8006e4a:	b97c      	cbnz	r4, 8006e6c <__pow5mult+0x48>
 8006e4c:	2010      	movs	r0, #16
 8006e4e:	f7ff fd35 	bl	80068bc <malloc>
 8006e52:	4602      	mov	r2, r0
 8006e54:	61f8      	str	r0, [r7, #28]
 8006e56:	b928      	cbnz	r0, 8006e64 <__pow5mult+0x40>
 8006e58:	4b1d      	ldr	r3, [pc, #116]	@ (8006ed0 <__pow5mult+0xac>)
 8006e5a:	481e      	ldr	r0, [pc, #120]	@ (8006ed4 <__pow5mult+0xb0>)
 8006e5c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006e60:	f001 fb6e 	bl	8008540 <__assert_func>
 8006e64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e68:	6004      	str	r4, [r0, #0]
 8006e6a:	60c4      	str	r4, [r0, #12]
 8006e6c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006e70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e74:	b94c      	cbnz	r4, 8006e8a <__pow5mult+0x66>
 8006e76:	f240 2171 	movw	r1, #625	@ 0x271
 8006e7a:	4638      	mov	r0, r7
 8006e7c:	f7ff ff12 	bl	8006ca4 <__i2b>
 8006e80:	2300      	movs	r3, #0
 8006e82:	f8c8 0008 	str.w	r0, [r8, #8]
 8006e86:	4604      	mov	r4, r0
 8006e88:	6003      	str	r3, [r0, #0]
 8006e8a:	f04f 0900 	mov.w	r9, #0
 8006e8e:	07eb      	lsls	r3, r5, #31
 8006e90:	d50a      	bpl.n	8006ea8 <__pow5mult+0x84>
 8006e92:	4631      	mov	r1, r6
 8006e94:	4622      	mov	r2, r4
 8006e96:	4638      	mov	r0, r7
 8006e98:	f7ff ff1a 	bl	8006cd0 <__multiply>
 8006e9c:	4631      	mov	r1, r6
 8006e9e:	4680      	mov	r8, r0
 8006ea0:	4638      	mov	r0, r7
 8006ea2:	f7ff fe01 	bl	8006aa8 <_Bfree>
 8006ea6:	4646      	mov	r6, r8
 8006ea8:	106d      	asrs	r5, r5, #1
 8006eaa:	d00b      	beq.n	8006ec4 <__pow5mult+0xa0>
 8006eac:	6820      	ldr	r0, [r4, #0]
 8006eae:	b938      	cbnz	r0, 8006ec0 <__pow5mult+0x9c>
 8006eb0:	4622      	mov	r2, r4
 8006eb2:	4621      	mov	r1, r4
 8006eb4:	4638      	mov	r0, r7
 8006eb6:	f7ff ff0b 	bl	8006cd0 <__multiply>
 8006eba:	6020      	str	r0, [r4, #0]
 8006ebc:	f8c0 9000 	str.w	r9, [r0]
 8006ec0:	4604      	mov	r4, r0
 8006ec2:	e7e4      	b.n	8006e8e <__pow5mult+0x6a>
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eca:	bf00      	nop
 8006ecc:	080093f0 	.word	0x080093f0
 8006ed0:	08009316 	.word	0x08009316
 8006ed4:	08009396 	.word	0x08009396

08006ed8 <__lshift>:
 8006ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006edc:	460c      	mov	r4, r1
 8006ede:	6849      	ldr	r1, [r1, #4]
 8006ee0:	6923      	ldr	r3, [r4, #16]
 8006ee2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006ee6:	68a3      	ldr	r3, [r4, #8]
 8006ee8:	4607      	mov	r7, r0
 8006eea:	4691      	mov	r9, r2
 8006eec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ef0:	f108 0601 	add.w	r6, r8, #1
 8006ef4:	42b3      	cmp	r3, r6
 8006ef6:	db0b      	blt.n	8006f10 <__lshift+0x38>
 8006ef8:	4638      	mov	r0, r7
 8006efa:	f7ff fd95 	bl	8006a28 <_Balloc>
 8006efe:	4605      	mov	r5, r0
 8006f00:	b948      	cbnz	r0, 8006f16 <__lshift+0x3e>
 8006f02:	4602      	mov	r2, r0
 8006f04:	4b28      	ldr	r3, [pc, #160]	@ (8006fa8 <__lshift+0xd0>)
 8006f06:	4829      	ldr	r0, [pc, #164]	@ (8006fac <__lshift+0xd4>)
 8006f08:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006f0c:	f001 fb18 	bl	8008540 <__assert_func>
 8006f10:	3101      	adds	r1, #1
 8006f12:	005b      	lsls	r3, r3, #1
 8006f14:	e7ee      	b.n	8006ef4 <__lshift+0x1c>
 8006f16:	2300      	movs	r3, #0
 8006f18:	f100 0114 	add.w	r1, r0, #20
 8006f1c:	f100 0210 	add.w	r2, r0, #16
 8006f20:	4618      	mov	r0, r3
 8006f22:	4553      	cmp	r3, sl
 8006f24:	db33      	blt.n	8006f8e <__lshift+0xb6>
 8006f26:	6920      	ldr	r0, [r4, #16]
 8006f28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f2c:	f104 0314 	add.w	r3, r4, #20
 8006f30:	f019 091f 	ands.w	r9, r9, #31
 8006f34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006f38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006f3c:	d02b      	beq.n	8006f96 <__lshift+0xbe>
 8006f3e:	f1c9 0e20 	rsb	lr, r9, #32
 8006f42:	468a      	mov	sl, r1
 8006f44:	2200      	movs	r2, #0
 8006f46:	6818      	ldr	r0, [r3, #0]
 8006f48:	fa00 f009 	lsl.w	r0, r0, r9
 8006f4c:	4310      	orrs	r0, r2
 8006f4e:	f84a 0b04 	str.w	r0, [sl], #4
 8006f52:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f56:	459c      	cmp	ip, r3
 8006f58:	fa22 f20e 	lsr.w	r2, r2, lr
 8006f5c:	d8f3      	bhi.n	8006f46 <__lshift+0x6e>
 8006f5e:	ebac 0304 	sub.w	r3, ip, r4
 8006f62:	3b15      	subs	r3, #21
 8006f64:	f023 0303 	bic.w	r3, r3, #3
 8006f68:	3304      	adds	r3, #4
 8006f6a:	f104 0015 	add.w	r0, r4, #21
 8006f6e:	4584      	cmp	ip, r0
 8006f70:	bf38      	it	cc
 8006f72:	2304      	movcc	r3, #4
 8006f74:	50ca      	str	r2, [r1, r3]
 8006f76:	b10a      	cbz	r2, 8006f7c <__lshift+0xa4>
 8006f78:	f108 0602 	add.w	r6, r8, #2
 8006f7c:	3e01      	subs	r6, #1
 8006f7e:	4638      	mov	r0, r7
 8006f80:	612e      	str	r6, [r5, #16]
 8006f82:	4621      	mov	r1, r4
 8006f84:	f7ff fd90 	bl	8006aa8 <_Bfree>
 8006f88:	4628      	mov	r0, r5
 8006f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006f92:	3301      	adds	r3, #1
 8006f94:	e7c5      	b.n	8006f22 <__lshift+0x4a>
 8006f96:	3904      	subs	r1, #4
 8006f98:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f9c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006fa0:	459c      	cmp	ip, r3
 8006fa2:	d8f9      	bhi.n	8006f98 <__lshift+0xc0>
 8006fa4:	e7ea      	b.n	8006f7c <__lshift+0xa4>
 8006fa6:	bf00      	nop
 8006fa8:	08009385 	.word	0x08009385
 8006fac:	08009396 	.word	0x08009396

08006fb0 <__mcmp>:
 8006fb0:	690a      	ldr	r2, [r1, #16]
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	6900      	ldr	r0, [r0, #16]
 8006fb6:	1a80      	subs	r0, r0, r2
 8006fb8:	b530      	push	{r4, r5, lr}
 8006fba:	d10e      	bne.n	8006fda <__mcmp+0x2a>
 8006fbc:	3314      	adds	r3, #20
 8006fbe:	3114      	adds	r1, #20
 8006fc0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006fc4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006fc8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006fcc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006fd0:	4295      	cmp	r5, r2
 8006fd2:	d003      	beq.n	8006fdc <__mcmp+0x2c>
 8006fd4:	d205      	bcs.n	8006fe2 <__mcmp+0x32>
 8006fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8006fda:	bd30      	pop	{r4, r5, pc}
 8006fdc:	42a3      	cmp	r3, r4
 8006fde:	d3f3      	bcc.n	8006fc8 <__mcmp+0x18>
 8006fe0:	e7fb      	b.n	8006fda <__mcmp+0x2a>
 8006fe2:	2001      	movs	r0, #1
 8006fe4:	e7f9      	b.n	8006fda <__mcmp+0x2a>
	...

08006fe8 <__mdiff>:
 8006fe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fec:	4689      	mov	r9, r1
 8006fee:	4606      	mov	r6, r0
 8006ff0:	4611      	mov	r1, r2
 8006ff2:	4648      	mov	r0, r9
 8006ff4:	4614      	mov	r4, r2
 8006ff6:	f7ff ffdb 	bl	8006fb0 <__mcmp>
 8006ffa:	1e05      	subs	r5, r0, #0
 8006ffc:	d112      	bne.n	8007024 <__mdiff+0x3c>
 8006ffe:	4629      	mov	r1, r5
 8007000:	4630      	mov	r0, r6
 8007002:	f7ff fd11 	bl	8006a28 <_Balloc>
 8007006:	4602      	mov	r2, r0
 8007008:	b928      	cbnz	r0, 8007016 <__mdiff+0x2e>
 800700a:	4b3f      	ldr	r3, [pc, #252]	@ (8007108 <__mdiff+0x120>)
 800700c:	f240 2137 	movw	r1, #567	@ 0x237
 8007010:	483e      	ldr	r0, [pc, #248]	@ (800710c <__mdiff+0x124>)
 8007012:	f001 fa95 	bl	8008540 <__assert_func>
 8007016:	2301      	movs	r3, #1
 8007018:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800701c:	4610      	mov	r0, r2
 800701e:	b003      	add	sp, #12
 8007020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007024:	bfbc      	itt	lt
 8007026:	464b      	movlt	r3, r9
 8007028:	46a1      	movlt	r9, r4
 800702a:	4630      	mov	r0, r6
 800702c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007030:	bfba      	itte	lt
 8007032:	461c      	movlt	r4, r3
 8007034:	2501      	movlt	r5, #1
 8007036:	2500      	movge	r5, #0
 8007038:	f7ff fcf6 	bl	8006a28 <_Balloc>
 800703c:	4602      	mov	r2, r0
 800703e:	b918      	cbnz	r0, 8007048 <__mdiff+0x60>
 8007040:	4b31      	ldr	r3, [pc, #196]	@ (8007108 <__mdiff+0x120>)
 8007042:	f240 2145 	movw	r1, #581	@ 0x245
 8007046:	e7e3      	b.n	8007010 <__mdiff+0x28>
 8007048:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800704c:	6926      	ldr	r6, [r4, #16]
 800704e:	60c5      	str	r5, [r0, #12]
 8007050:	f109 0310 	add.w	r3, r9, #16
 8007054:	f109 0514 	add.w	r5, r9, #20
 8007058:	f104 0e14 	add.w	lr, r4, #20
 800705c:	f100 0b14 	add.w	fp, r0, #20
 8007060:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007064:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007068:	9301      	str	r3, [sp, #4]
 800706a:	46d9      	mov	r9, fp
 800706c:	f04f 0c00 	mov.w	ip, #0
 8007070:	9b01      	ldr	r3, [sp, #4]
 8007072:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007076:	f853 af04 	ldr.w	sl, [r3, #4]!
 800707a:	9301      	str	r3, [sp, #4]
 800707c:	fa1f f38a 	uxth.w	r3, sl
 8007080:	4619      	mov	r1, r3
 8007082:	b283      	uxth	r3, r0
 8007084:	1acb      	subs	r3, r1, r3
 8007086:	0c00      	lsrs	r0, r0, #16
 8007088:	4463      	add	r3, ip
 800708a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800708e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007092:	b29b      	uxth	r3, r3
 8007094:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007098:	4576      	cmp	r6, lr
 800709a:	f849 3b04 	str.w	r3, [r9], #4
 800709e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80070a2:	d8e5      	bhi.n	8007070 <__mdiff+0x88>
 80070a4:	1b33      	subs	r3, r6, r4
 80070a6:	3b15      	subs	r3, #21
 80070a8:	f023 0303 	bic.w	r3, r3, #3
 80070ac:	3415      	adds	r4, #21
 80070ae:	3304      	adds	r3, #4
 80070b0:	42a6      	cmp	r6, r4
 80070b2:	bf38      	it	cc
 80070b4:	2304      	movcc	r3, #4
 80070b6:	441d      	add	r5, r3
 80070b8:	445b      	add	r3, fp
 80070ba:	461e      	mov	r6, r3
 80070bc:	462c      	mov	r4, r5
 80070be:	4544      	cmp	r4, r8
 80070c0:	d30e      	bcc.n	80070e0 <__mdiff+0xf8>
 80070c2:	f108 0103 	add.w	r1, r8, #3
 80070c6:	1b49      	subs	r1, r1, r5
 80070c8:	f021 0103 	bic.w	r1, r1, #3
 80070cc:	3d03      	subs	r5, #3
 80070ce:	45a8      	cmp	r8, r5
 80070d0:	bf38      	it	cc
 80070d2:	2100      	movcc	r1, #0
 80070d4:	440b      	add	r3, r1
 80070d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80070da:	b191      	cbz	r1, 8007102 <__mdiff+0x11a>
 80070dc:	6117      	str	r7, [r2, #16]
 80070de:	e79d      	b.n	800701c <__mdiff+0x34>
 80070e0:	f854 1b04 	ldr.w	r1, [r4], #4
 80070e4:	46e6      	mov	lr, ip
 80070e6:	0c08      	lsrs	r0, r1, #16
 80070e8:	fa1c fc81 	uxtah	ip, ip, r1
 80070ec:	4471      	add	r1, lr
 80070ee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80070f2:	b289      	uxth	r1, r1
 80070f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80070f8:	f846 1b04 	str.w	r1, [r6], #4
 80070fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007100:	e7dd      	b.n	80070be <__mdiff+0xd6>
 8007102:	3f01      	subs	r7, #1
 8007104:	e7e7      	b.n	80070d6 <__mdiff+0xee>
 8007106:	bf00      	nop
 8007108:	08009385 	.word	0x08009385
 800710c:	08009396 	.word	0x08009396

08007110 <__ulp>:
 8007110:	b082      	sub	sp, #8
 8007112:	ed8d 0b00 	vstr	d0, [sp]
 8007116:	9a01      	ldr	r2, [sp, #4]
 8007118:	4b0f      	ldr	r3, [pc, #60]	@ (8007158 <__ulp+0x48>)
 800711a:	4013      	ands	r3, r2
 800711c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007120:	2b00      	cmp	r3, #0
 8007122:	dc08      	bgt.n	8007136 <__ulp+0x26>
 8007124:	425b      	negs	r3, r3
 8007126:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800712a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800712e:	da04      	bge.n	800713a <__ulp+0x2a>
 8007130:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007134:	4113      	asrs	r3, r2
 8007136:	2200      	movs	r2, #0
 8007138:	e008      	b.n	800714c <__ulp+0x3c>
 800713a:	f1a2 0314 	sub.w	r3, r2, #20
 800713e:	2b1e      	cmp	r3, #30
 8007140:	bfda      	itte	le
 8007142:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007146:	40da      	lsrle	r2, r3
 8007148:	2201      	movgt	r2, #1
 800714a:	2300      	movs	r3, #0
 800714c:	4619      	mov	r1, r3
 800714e:	4610      	mov	r0, r2
 8007150:	ec41 0b10 	vmov	d0, r0, r1
 8007154:	b002      	add	sp, #8
 8007156:	4770      	bx	lr
 8007158:	7ff00000 	.word	0x7ff00000

0800715c <__b2d>:
 800715c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007160:	6906      	ldr	r6, [r0, #16]
 8007162:	f100 0814 	add.w	r8, r0, #20
 8007166:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800716a:	1f37      	subs	r7, r6, #4
 800716c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007170:	4610      	mov	r0, r2
 8007172:	f7ff fd4b 	bl	8006c0c <__hi0bits>
 8007176:	f1c0 0320 	rsb	r3, r0, #32
 800717a:	280a      	cmp	r0, #10
 800717c:	600b      	str	r3, [r1, #0]
 800717e:	491b      	ldr	r1, [pc, #108]	@ (80071ec <__b2d+0x90>)
 8007180:	dc15      	bgt.n	80071ae <__b2d+0x52>
 8007182:	f1c0 0c0b 	rsb	ip, r0, #11
 8007186:	fa22 f30c 	lsr.w	r3, r2, ip
 800718a:	45b8      	cmp	r8, r7
 800718c:	ea43 0501 	orr.w	r5, r3, r1
 8007190:	bf34      	ite	cc
 8007192:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007196:	2300      	movcs	r3, #0
 8007198:	3015      	adds	r0, #21
 800719a:	fa02 f000 	lsl.w	r0, r2, r0
 800719e:	fa23 f30c 	lsr.w	r3, r3, ip
 80071a2:	4303      	orrs	r3, r0
 80071a4:	461c      	mov	r4, r3
 80071a6:	ec45 4b10 	vmov	d0, r4, r5
 80071aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071ae:	45b8      	cmp	r8, r7
 80071b0:	bf3a      	itte	cc
 80071b2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80071b6:	f1a6 0708 	subcc.w	r7, r6, #8
 80071ba:	2300      	movcs	r3, #0
 80071bc:	380b      	subs	r0, #11
 80071be:	d012      	beq.n	80071e6 <__b2d+0x8a>
 80071c0:	f1c0 0120 	rsb	r1, r0, #32
 80071c4:	fa23 f401 	lsr.w	r4, r3, r1
 80071c8:	4082      	lsls	r2, r0
 80071ca:	4322      	orrs	r2, r4
 80071cc:	4547      	cmp	r7, r8
 80071ce:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80071d2:	bf8c      	ite	hi
 80071d4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80071d8:	2200      	movls	r2, #0
 80071da:	4083      	lsls	r3, r0
 80071dc:	40ca      	lsrs	r2, r1
 80071de:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80071e2:	4313      	orrs	r3, r2
 80071e4:	e7de      	b.n	80071a4 <__b2d+0x48>
 80071e6:	ea42 0501 	orr.w	r5, r2, r1
 80071ea:	e7db      	b.n	80071a4 <__b2d+0x48>
 80071ec:	3ff00000 	.word	0x3ff00000

080071f0 <__d2b>:
 80071f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80071f4:	460f      	mov	r7, r1
 80071f6:	2101      	movs	r1, #1
 80071f8:	ec59 8b10 	vmov	r8, r9, d0
 80071fc:	4616      	mov	r6, r2
 80071fe:	f7ff fc13 	bl	8006a28 <_Balloc>
 8007202:	4604      	mov	r4, r0
 8007204:	b930      	cbnz	r0, 8007214 <__d2b+0x24>
 8007206:	4602      	mov	r2, r0
 8007208:	4b23      	ldr	r3, [pc, #140]	@ (8007298 <__d2b+0xa8>)
 800720a:	4824      	ldr	r0, [pc, #144]	@ (800729c <__d2b+0xac>)
 800720c:	f240 310f 	movw	r1, #783	@ 0x30f
 8007210:	f001 f996 	bl	8008540 <__assert_func>
 8007214:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007218:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800721c:	b10d      	cbz	r5, 8007222 <__d2b+0x32>
 800721e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007222:	9301      	str	r3, [sp, #4]
 8007224:	f1b8 0300 	subs.w	r3, r8, #0
 8007228:	d023      	beq.n	8007272 <__d2b+0x82>
 800722a:	4668      	mov	r0, sp
 800722c:	9300      	str	r3, [sp, #0]
 800722e:	f7ff fd0c 	bl	8006c4a <__lo0bits>
 8007232:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007236:	b1d0      	cbz	r0, 800726e <__d2b+0x7e>
 8007238:	f1c0 0320 	rsb	r3, r0, #32
 800723c:	fa02 f303 	lsl.w	r3, r2, r3
 8007240:	430b      	orrs	r3, r1
 8007242:	40c2      	lsrs	r2, r0
 8007244:	6163      	str	r3, [r4, #20]
 8007246:	9201      	str	r2, [sp, #4]
 8007248:	9b01      	ldr	r3, [sp, #4]
 800724a:	61a3      	str	r3, [r4, #24]
 800724c:	2b00      	cmp	r3, #0
 800724e:	bf0c      	ite	eq
 8007250:	2201      	moveq	r2, #1
 8007252:	2202      	movne	r2, #2
 8007254:	6122      	str	r2, [r4, #16]
 8007256:	b1a5      	cbz	r5, 8007282 <__d2b+0x92>
 8007258:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800725c:	4405      	add	r5, r0
 800725e:	603d      	str	r5, [r7, #0]
 8007260:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007264:	6030      	str	r0, [r6, #0]
 8007266:	4620      	mov	r0, r4
 8007268:	b003      	add	sp, #12
 800726a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800726e:	6161      	str	r1, [r4, #20]
 8007270:	e7ea      	b.n	8007248 <__d2b+0x58>
 8007272:	a801      	add	r0, sp, #4
 8007274:	f7ff fce9 	bl	8006c4a <__lo0bits>
 8007278:	9b01      	ldr	r3, [sp, #4]
 800727a:	6163      	str	r3, [r4, #20]
 800727c:	3020      	adds	r0, #32
 800727e:	2201      	movs	r2, #1
 8007280:	e7e8      	b.n	8007254 <__d2b+0x64>
 8007282:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007286:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800728a:	6038      	str	r0, [r7, #0]
 800728c:	6918      	ldr	r0, [r3, #16]
 800728e:	f7ff fcbd 	bl	8006c0c <__hi0bits>
 8007292:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007296:	e7e5      	b.n	8007264 <__d2b+0x74>
 8007298:	08009385 	.word	0x08009385
 800729c:	08009396 	.word	0x08009396

080072a0 <__ratio>:
 80072a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a4:	b085      	sub	sp, #20
 80072a6:	e9cd 1000 	strd	r1, r0, [sp]
 80072aa:	a902      	add	r1, sp, #8
 80072ac:	f7ff ff56 	bl	800715c <__b2d>
 80072b0:	9800      	ldr	r0, [sp, #0]
 80072b2:	a903      	add	r1, sp, #12
 80072b4:	ec55 4b10 	vmov	r4, r5, d0
 80072b8:	f7ff ff50 	bl	800715c <__b2d>
 80072bc:	9b01      	ldr	r3, [sp, #4]
 80072be:	6919      	ldr	r1, [r3, #16]
 80072c0:	9b00      	ldr	r3, [sp, #0]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	1ac9      	subs	r1, r1, r3
 80072c6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80072ca:	1a9b      	subs	r3, r3, r2
 80072cc:	ec5b ab10 	vmov	sl, fp, d0
 80072d0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	bfce      	itee	gt
 80072d8:	462a      	movgt	r2, r5
 80072da:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80072de:	465a      	movle	r2, fp
 80072e0:	462f      	mov	r7, r5
 80072e2:	46d9      	mov	r9, fp
 80072e4:	bfcc      	ite	gt
 80072e6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80072ea:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80072ee:	464b      	mov	r3, r9
 80072f0:	4652      	mov	r2, sl
 80072f2:	4620      	mov	r0, r4
 80072f4:	4639      	mov	r1, r7
 80072f6:	f7f9 faa9 	bl	800084c <__aeabi_ddiv>
 80072fa:	ec41 0b10 	vmov	d0, r0, r1
 80072fe:	b005      	add	sp, #20
 8007300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007304 <__copybits>:
 8007304:	3901      	subs	r1, #1
 8007306:	b570      	push	{r4, r5, r6, lr}
 8007308:	1149      	asrs	r1, r1, #5
 800730a:	6914      	ldr	r4, [r2, #16]
 800730c:	3101      	adds	r1, #1
 800730e:	f102 0314 	add.w	r3, r2, #20
 8007312:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007316:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800731a:	1f05      	subs	r5, r0, #4
 800731c:	42a3      	cmp	r3, r4
 800731e:	d30c      	bcc.n	800733a <__copybits+0x36>
 8007320:	1aa3      	subs	r3, r4, r2
 8007322:	3b11      	subs	r3, #17
 8007324:	f023 0303 	bic.w	r3, r3, #3
 8007328:	3211      	adds	r2, #17
 800732a:	42a2      	cmp	r2, r4
 800732c:	bf88      	it	hi
 800732e:	2300      	movhi	r3, #0
 8007330:	4418      	add	r0, r3
 8007332:	2300      	movs	r3, #0
 8007334:	4288      	cmp	r0, r1
 8007336:	d305      	bcc.n	8007344 <__copybits+0x40>
 8007338:	bd70      	pop	{r4, r5, r6, pc}
 800733a:	f853 6b04 	ldr.w	r6, [r3], #4
 800733e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007342:	e7eb      	b.n	800731c <__copybits+0x18>
 8007344:	f840 3b04 	str.w	r3, [r0], #4
 8007348:	e7f4      	b.n	8007334 <__copybits+0x30>

0800734a <__any_on>:
 800734a:	f100 0214 	add.w	r2, r0, #20
 800734e:	6900      	ldr	r0, [r0, #16]
 8007350:	114b      	asrs	r3, r1, #5
 8007352:	4298      	cmp	r0, r3
 8007354:	b510      	push	{r4, lr}
 8007356:	db11      	blt.n	800737c <__any_on+0x32>
 8007358:	dd0a      	ble.n	8007370 <__any_on+0x26>
 800735a:	f011 011f 	ands.w	r1, r1, #31
 800735e:	d007      	beq.n	8007370 <__any_on+0x26>
 8007360:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007364:	fa24 f001 	lsr.w	r0, r4, r1
 8007368:	fa00 f101 	lsl.w	r1, r0, r1
 800736c:	428c      	cmp	r4, r1
 800736e:	d10b      	bne.n	8007388 <__any_on+0x3e>
 8007370:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007374:	4293      	cmp	r3, r2
 8007376:	d803      	bhi.n	8007380 <__any_on+0x36>
 8007378:	2000      	movs	r0, #0
 800737a:	bd10      	pop	{r4, pc}
 800737c:	4603      	mov	r3, r0
 800737e:	e7f7      	b.n	8007370 <__any_on+0x26>
 8007380:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007384:	2900      	cmp	r1, #0
 8007386:	d0f5      	beq.n	8007374 <__any_on+0x2a>
 8007388:	2001      	movs	r0, #1
 800738a:	e7f6      	b.n	800737a <__any_on+0x30>

0800738c <sulp>:
 800738c:	b570      	push	{r4, r5, r6, lr}
 800738e:	4604      	mov	r4, r0
 8007390:	460d      	mov	r5, r1
 8007392:	ec45 4b10 	vmov	d0, r4, r5
 8007396:	4616      	mov	r6, r2
 8007398:	f7ff feba 	bl	8007110 <__ulp>
 800739c:	ec51 0b10 	vmov	r0, r1, d0
 80073a0:	b17e      	cbz	r6, 80073c2 <sulp+0x36>
 80073a2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80073a6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	dd09      	ble.n	80073c2 <sulp+0x36>
 80073ae:	051b      	lsls	r3, r3, #20
 80073b0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80073b4:	2400      	movs	r4, #0
 80073b6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80073ba:	4622      	mov	r2, r4
 80073bc:	462b      	mov	r3, r5
 80073be:	f7f9 f91b 	bl	80005f8 <__aeabi_dmul>
 80073c2:	ec41 0b10 	vmov	d0, r0, r1
 80073c6:	bd70      	pop	{r4, r5, r6, pc}

080073c8 <_strtod_l>:
 80073c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073cc:	b09f      	sub	sp, #124	@ 0x7c
 80073ce:	460c      	mov	r4, r1
 80073d0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80073d2:	2200      	movs	r2, #0
 80073d4:	921a      	str	r2, [sp, #104]	@ 0x68
 80073d6:	9005      	str	r0, [sp, #20]
 80073d8:	f04f 0a00 	mov.w	sl, #0
 80073dc:	f04f 0b00 	mov.w	fp, #0
 80073e0:	460a      	mov	r2, r1
 80073e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80073e4:	7811      	ldrb	r1, [r2, #0]
 80073e6:	292b      	cmp	r1, #43	@ 0x2b
 80073e8:	d04a      	beq.n	8007480 <_strtod_l+0xb8>
 80073ea:	d838      	bhi.n	800745e <_strtod_l+0x96>
 80073ec:	290d      	cmp	r1, #13
 80073ee:	d832      	bhi.n	8007456 <_strtod_l+0x8e>
 80073f0:	2908      	cmp	r1, #8
 80073f2:	d832      	bhi.n	800745a <_strtod_l+0x92>
 80073f4:	2900      	cmp	r1, #0
 80073f6:	d03b      	beq.n	8007470 <_strtod_l+0xa8>
 80073f8:	2200      	movs	r2, #0
 80073fa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80073fc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80073fe:	782a      	ldrb	r2, [r5, #0]
 8007400:	2a30      	cmp	r2, #48	@ 0x30
 8007402:	f040 80b3 	bne.w	800756c <_strtod_l+0x1a4>
 8007406:	786a      	ldrb	r2, [r5, #1]
 8007408:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800740c:	2a58      	cmp	r2, #88	@ 0x58
 800740e:	d16e      	bne.n	80074ee <_strtod_l+0x126>
 8007410:	9302      	str	r3, [sp, #8]
 8007412:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007414:	9301      	str	r3, [sp, #4]
 8007416:	ab1a      	add	r3, sp, #104	@ 0x68
 8007418:	9300      	str	r3, [sp, #0]
 800741a:	4a8e      	ldr	r2, [pc, #568]	@ (8007654 <_strtod_l+0x28c>)
 800741c:	9805      	ldr	r0, [sp, #20]
 800741e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007420:	a919      	add	r1, sp, #100	@ 0x64
 8007422:	f001 f927 	bl	8008674 <__gethex>
 8007426:	f010 060f 	ands.w	r6, r0, #15
 800742a:	4604      	mov	r4, r0
 800742c:	d005      	beq.n	800743a <_strtod_l+0x72>
 800742e:	2e06      	cmp	r6, #6
 8007430:	d128      	bne.n	8007484 <_strtod_l+0xbc>
 8007432:	3501      	adds	r5, #1
 8007434:	2300      	movs	r3, #0
 8007436:	9519      	str	r5, [sp, #100]	@ 0x64
 8007438:	930b      	str	r3, [sp, #44]	@ 0x2c
 800743a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800743c:	2b00      	cmp	r3, #0
 800743e:	f040 858e 	bne.w	8007f5e <_strtod_l+0xb96>
 8007442:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007444:	b1cb      	cbz	r3, 800747a <_strtod_l+0xb2>
 8007446:	4652      	mov	r2, sl
 8007448:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800744c:	ec43 2b10 	vmov	d0, r2, r3
 8007450:	b01f      	add	sp, #124	@ 0x7c
 8007452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007456:	2920      	cmp	r1, #32
 8007458:	d1ce      	bne.n	80073f8 <_strtod_l+0x30>
 800745a:	3201      	adds	r2, #1
 800745c:	e7c1      	b.n	80073e2 <_strtod_l+0x1a>
 800745e:	292d      	cmp	r1, #45	@ 0x2d
 8007460:	d1ca      	bne.n	80073f8 <_strtod_l+0x30>
 8007462:	2101      	movs	r1, #1
 8007464:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007466:	1c51      	adds	r1, r2, #1
 8007468:	9119      	str	r1, [sp, #100]	@ 0x64
 800746a:	7852      	ldrb	r2, [r2, #1]
 800746c:	2a00      	cmp	r2, #0
 800746e:	d1c5      	bne.n	80073fc <_strtod_l+0x34>
 8007470:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007472:	9419      	str	r4, [sp, #100]	@ 0x64
 8007474:	2b00      	cmp	r3, #0
 8007476:	f040 8570 	bne.w	8007f5a <_strtod_l+0xb92>
 800747a:	4652      	mov	r2, sl
 800747c:	465b      	mov	r3, fp
 800747e:	e7e5      	b.n	800744c <_strtod_l+0x84>
 8007480:	2100      	movs	r1, #0
 8007482:	e7ef      	b.n	8007464 <_strtod_l+0x9c>
 8007484:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007486:	b13a      	cbz	r2, 8007498 <_strtod_l+0xd0>
 8007488:	2135      	movs	r1, #53	@ 0x35
 800748a:	a81c      	add	r0, sp, #112	@ 0x70
 800748c:	f7ff ff3a 	bl	8007304 <__copybits>
 8007490:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007492:	9805      	ldr	r0, [sp, #20]
 8007494:	f7ff fb08 	bl	8006aa8 <_Bfree>
 8007498:	3e01      	subs	r6, #1
 800749a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800749c:	2e04      	cmp	r6, #4
 800749e:	d806      	bhi.n	80074ae <_strtod_l+0xe6>
 80074a0:	e8df f006 	tbb	[pc, r6]
 80074a4:	201d0314 	.word	0x201d0314
 80074a8:	14          	.byte	0x14
 80074a9:	00          	.byte	0x00
 80074aa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80074ae:	05e1      	lsls	r1, r4, #23
 80074b0:	bf48      	it	mi
 80074b2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80074b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80074ba:	0d1b      	lsrs	r3, r3, #20
 80074bc:	051b      	lsls	r3, r3, #20
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1bb      	bne.n	800743a <_strtod_l+0x72>
 80074c2:	f7fe fb2f 	bl	8005b24 <__errno>
 80074c6:	2322      	movs	r3, #34	@ 0x22
 80074c8:	6003      	str	r3, [r0, #0]
 80074ca:	e7b6      	b.n	800743a <_strtod_l+0x72>
 80074cc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80074d0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80074d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80074d8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80074dc:	e7e7      	b.n	80074ae <_strtod_l+0xe6>
 80074de:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800765c <_strtod_l+0x294>
 80074e2:	e7e4      	b.n	80074ae <_strtod_l+0xe6>
 80074e4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80074e8:	f04f 3aff 	mov.w	sl, #4294967295
 80074ec:	e7df      	b.n	80074ae <_strtod_l+0xe6>
 80074ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80074f0:	1c5a      	adds	r2, r3, #1
 80074f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80074f4:	785b      	ldrb	r3, [r3, #1]
 80074f6:	2b30      	cmp	r3, #48	@ 0x30
 80074f8:	d0f9      	beq.n	80074ee <_strtod_l+0x126>
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d09d      	beq.n	800743a <_strtod_l+0x72>
 80074fe:	2301      	movs	r3, #1
 8007500:	9309      	str	r3, [sp, #36]	@ 0x24
 8007502:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007504:	930c      	str	r3, [sp, #48]	@ 0x30
 8007506:	2300      	movs	r3, #0
 8007508:	9308      	str	r3, [sp, #32]
 800750a:	930a      	str	r3, [sp, #40]	@ 0x28
 800750c:	461f      	mov	r7, r3
 800750e:	220a      	movs	r2, #10
 8007510:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007512:	7805      	ldrb	r5, [r0, #0]
 8007514:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007518:	b2d9      	uxtb	r1, r3
 800751a:	2909      	cmp	r1, #9
 800751c:	d928      	bls.n	8007570 <_strtod_l+0x1a8>
 800751e:	494e      	ldr	r1, [pc, #312]	@ (8007658 <_strtod_l+0x290>)
 8007520:	2201      	movs	r2, #1
 8007522:	f000 ffd5 	bl	80084d0 <strncmp>
 8007526:	2800      	cmp	r0, #0
 8007528:	d032      	beq.n	8007590 <_strtod_l+0x1c8>
 800752a:	2000      	movs	r0, #0
 800752c:	462a      	mov	r2, r5
 800752e:	4681      	mov	r9, r0
 8007530:	463d      	mov	r5, r7
 8007532:	4603      	mov	r3, r0
 8007534:	2a65      	cmp	r2, #101	@ 0x65
 8007536:	d001      	beq.n	800753c <_strtod_l+0x174>
 8007538:	2a45      	cmp	r2, #69	@ 0x45
 800753a:	d114      	bne.n	8007566 <_strtod_l+0x19e>
 800753c:	b91d      	cbnz	r5, 8007546 <_strtod_l+0x17e>
 800753e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007540:	4302      	orrs	r2, r0
 8007542:	d095      	beq.n	8007470 <_strtod_l+0xa8>
 8007544:	2500      	movs	r5, #0
 8007546:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007548:	1c62      	adds	r2, r4, #1
 800754a:	9219      	str	r2, [sp, #100]	@ 0x64
 800754c:	7862      	ldrb	r2, [r4, #1]
 800754e:	2a2b      	cmp	r2, #43	@ 0x2b
 8007550:	d077      	beq.n	8007642 <_strtod_l+0x27a>
 8007552:	2a2d      	cmp	r2, #45	@ 0x2d
 8007554:	d07b      	beq.n	800764e <_strtod_l+0x286>
 8007556:	f04f 0c00 	mov.w	ip, #0
 800755a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800755e:	2909      	cmp	r1, #9
 8007560:	f240 8082 	bls.w	8007668 <_strtod_l+0x2a0>
 8007564:	9419      	str	r4, [sp, #100]	@ 0x64
 8007566:	f04f 0800 	mov.w	r8, #0
 800756a:	e0a2      	b.n	80076b2 <_strtod_l+0x2ea>
 800756c:	2300      	movs	r3, #0
 800756e:	e7c7      	b.n	8007500 <_strtod_l+0x138>
 8007570:	2f08      	cmp	r7, #8
 8007572:	bfd5      	itete	le
 8007574:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007576:	9908      	ldrgt	r1, [sp, #32]
 8007578:	fb02 3301 	mlale	r3, r2, r1, r3
 800757c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007580:	f100 0001 	add.w	r0, r0, #1
 8007584:	bfd4      	ite	le
 8007586:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007588:	9308      	strgt	r3, [sp, #32]
 800758a:	3701      	adds	r7, #1
 800758c:	9019      	str	r0, [sp, #100]	@ 0x64
 800758e:	e7bf      	b.n	8007510 <_strtod_l+0x148>
 8007590:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007592:	1c5a      	adds	r2, r3, #1
 8007594:	9219      	str	r2, [sp, #100]	@ 0x64
 8007596:	785a      	ldrb	r2, [r3, #1]
 8007598:	b37f      	cbz	r7, 80075fa <_strtod_l+0x232>
 800759a:	4681      	mov	r9, r0
 800759c:	463d      	mov	r5, r7
 800759e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80075a2:	2b09      	cmp	r3, #9
 80075a4:	d912      	bls.n	80075cc <_strtod_l+0x204>
 80075a6:	2301      	movs	r3, #1
 80075a8:	e7c4      	b.n	8007534 <_strtod_l+0x16c>
 80075aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80075ac:	1c5a      	adds	r2, r3, #1
 80075ae:	9219      	str	r2, [sp, #100]	@ 0x64
 80075b0:	785a      	ldrb	r2, [r3, #1]
 80075b2:	3001      	adds	r0, #1
 80075b4:	2a30      	cmp	r2, #48	@ 0x30
 80075b6:	d0f8      	beq.n	80075aa <_strtod_l+0x1e2>
 80075b8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80075bc:	2b08      	cmp	r3, #8
 80075be:	f200 84d3 	bhi.w	8007f68 <_strtod_l+0xba0>
 80075c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80075c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80075c6:	4681      	mov	r9, r0
 80075c8:	2000      	movs	r0, #0
 80075ca:	4605      	mov	r5, r0
 80075cc:	3a30      	subs	r2, #48	@ 0x30
 80075ce:	f100 0301 	add.w	r3, r0, #1
 80075d2:	d02a      	beq.n	800762a <_strtod_l+0x262>
 80075d4:	4499      	add	r9, r3
 80075d6:	eb00 0c05 	add.w	ip, r0, r5
 80075da:	462b      	mov	r3, r5
 80075dc:	210a      	movs	r1, #10
 80075de:	4563      	cmp	r3, ip
 80075e0:	d10d      	bne.n	80075fe <_strtod_l+0x236>
 80075e2:	1c69      	adds	r1, r5, #1
 80075e4:	4401      	add	r1, r0
 80075e6:	4428      	add	r0, r5
 80075e8:	2808      	cmp	r0, #8
 80075ea:	dc16      	bgt.n	800761a <_strtod_l+0x252>
 80075ec:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80075ee:	230a      	movs	r3, #10
 80075f0:	fb03 2300 	mla	r3, r3, r0, r2
 80075f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80075f6:	2300      	movs	r3, #0
 80075f8:	e018      	b.n	800762c <_strtod_l+0x264>
 80075fa:	4638      	mov	r0, r7
 80075fc:	e7da      	b.n	80075b4 <_strtod_l+0x1ec>
 80075fe:	2b08      	cmp	r3, #8
 8007600:	f103 0301 	add.w	r3, r3, #1
 8007604:	dc03      	bgt.n	800760e <_strtod_l+0x246>
 8007606:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007608:	434e      	muls	r6, r1
 800760a:	960a      	str	r6, [sp, #40]	@ 0x28
 800760c:	e7e7      	b.n	80075de <_strtod_l+0x216>
 800760e:	2b10      	cmp	r3, #16
 8007610:	bfde      	ittt	le
 8007612:	9e08      	ldrle	r6, [sp, #32]
 8007614:	434e      	mulle	r6, r1
 8007616:	9608      	strle	r6, [sp, #32]
 8007618:	e7e1      	b.n	80075de <_strtod_l+0x216>
 800761a:	280f      	cmp	r0, #15
 800761c:	dceb      	bgt.n	80075f6 <_strtod_l+0x22e>
 800761e:	9808      	ldr	r0, [sp, #32]
 8007620:	230a      	movs	r3, #10
 8007622:	fb03 2300 	mla	r3, r3, r0, r2
 8007626:	9308      	str	r3, [sp, #32]
 8007628:	e7e5      	b.n	80075f6 <_strtod_l+0x22e>
 800762a:	4629      	mov	r1, r5
 800762c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800762e:	1c50      	adds	r0, r2, #1
 8007630:	9019      	str	r0, [sp, #100]	@ 0x64
 8007632:	7852      	ldrb	r2, [r2, #1]
 8007634:	4618      	mov	r0, r3
 8007636:	460d      	mov	r5, r1
 8007638:	e7b1      	b.n	800759e <_strtod_l+0x1d6>
 800763a:	f04f 0900 	mov.w	r9, #0
 800763e:	2301      	movs	r3, #1
 8007640:	e77d      	b.n	800753e <_strtod_l+0x176>
 8007642:	f04f 0c00 	mov.w	ip, #0
 8007646:	1ca2      	adds	r2, r4, #2
 8007648:	9219      	str	r2, [sp, #100]	@ 0x64
 800764a:	78a2      	ldrb	r2, [r4, #2]
 800764c:	e785      	b.n	800755a <_strtod_l+0x192>
 800764e:	f04f 0c01 	mov.w	ip, #1
 8007652:	e7f8      	b.n	8007646 <_strtod_l+0x27e>
 8007654:	08009508 	.word	0x08009508
 8007658:	080094f0 	.word	0x080094f0
 800765c:	7ff00000 	.word	0x7ff00000
 8007660:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007662:	1c51      	adds	r1, r2, #1
 8007664:	9119      	str	r1, [sp, #100]	@ 0x64
 8007666:	7852      	ldrb	r2, [r2, #1]
 8007668:	2a30      	cmp	r2, #48	@ 0x30
 800766a:	d0f9      	beq.n	8007660 <_strtod_l+0x298>
 800766c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007670:	2908      	cmp	r1, #8
 8007672:	f63f af78 	bhi.w	8007566 <_strtod_l+0x19e>
 8007676:	3a30      	subs	r2, #48	@ 0x30
 8007678:	920e      	str	r2, [sp, #56]	@ 0x38
 800767a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800767c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800767e:	f04f 080a 	mov.w	r8, #10
 8007682:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007684:	1c56      	adds	r6, r2, #1
 8007686:	9619      	str	r6, [sp, #100]	@ 0x64
 8007688:	7852      	ldrb	r2, [r2, #1]
 800768a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800768e:	f1be 0f09 	cmp.w	lr, #9
 8007692:	d939      	bls.n	8007708 <_strtod_l+0x340>
 8007694:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007696:	1a76      	subs	r6, r6, r1
 8007698:	2e08      	cmp	r6, #8
 800769a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800769e:	dc03      	bgt.n	80076a8 <_strtod_l+0x2e0>
 80076a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80076a2:	4588      	cmp	r8, r1
 80076a4:	bfa8      	it	ge
 80076a6:	4688      	movge	r8, r1
 80076a8:	f1bc 0f00 	cmp.w	ip, #0
 80076ac:	d001      	beq.n	80076b2 <_strtod_l+0x2ea>
 80076ae:	f1c8 0800 	rsb	r8, r8, #0
 80076b2:	2d00      	cmp	r5, #0
 80076b4:	d14e      	bne.n	8007754 <_strtod_l+0x38c>
 80076b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80076b8:	4308      	orrs	r0, r1
 80076ba:	f47f aebe 	bne.w	800743a <_strtod_l+0x72>
 80076be:	2b00      	cmp	r3, #0
 80076c0:	f47f aed6 	bne.w	8007470 <_strtod_l+0xa8>
 80076c4:	2a69      	cmp	r2, #105	@ 0x69
 80076c6:	d028      	beq.n	800771a <_strtod_l+0x352>
 80076c8:	dc25      	bgt.n	8007716 <_strtod_l+0x34e>
 80076ca:	2a49      	cmp	r2, #73	@ 0x49
 80076cc:	d025      	beq.n	800771a <_strtod_l+0x352>
 80076ce:	2a4e      	cmp	r2, #78	@ 0x4e
 80076d0:	f47f aece 	bne.w	8007470 <_strtod_l+0xa8>
 80076d4:	499b      	ldr	r1, [pc, #620]	@ (8007944 <_strtod_l+0x57c>)
 80076d6:	a819      	add	r0, sp, #100	@ 0x64
 80076d8:	f001 f9ee 	bl	8008ab8 <__match>
 80076dc:	2800      	cmp	r0, #0
 80076de:	f43f aec7 	beq.w	8007470 <_strtod_l+0xa8>
 80076e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	2b28      	cmp	r3, #40	@ 0x28
 80076e8:	d12e      	bne.n	8007748 <_strtod_l+0x380>
 80076ea:	4997      	ldr	r1, [pc, #604]	@ (8007948 <_strtod_l+0x580>)
 80076ec:	aa1c      	add	r2, sp, #112	@ 0x70
 80076ee:	a819      	add	r0, sp, #100	@ 0x64
 80076f0:	f001 f9f6 	bl	8008ae0 <__hexnan>
 80076f4:	2805      	cmp	r0, #5
 80076f6:	d127      	bne.n	8007748 <_strtod_l+0x380>
 80076f8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80076fa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80076fe:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007702:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007706:	e698      	b.n	800743a <_strtod_l+0x72>
 8007708:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800770a:	fb08 2101 	mla	r1, r8, r1, r2
 800770e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007712:	920e      	str	r2, [sp, #56]	@ 0x38
 8007714:	e7b5      	b.n	8007682 <_strtod_l+0x2ba>
 8007716:	2a6e      	cmp	r2, #110	@ 0x6e
 8007718:	e7da      	b.n	80076d0 <_strtod_l+0x308>
 800771a:	498c      	ldr	r1, [pc, #560]	@ (800794c <_strtod_l+0x584>)
 800771c:	a819      	add	r0, sp, #100	@ 0x64
 800771e:	f001 f9cb 	bl	8008ab8 <__match>
 8007722:	2800      	cmp	r0, #0
 8007724:	f43f aea4 	beq.w	8007470 <_strtod_l+0xa8>
 8007728:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800772a:	4989      	ldr	r1, [pc, #548]	@ (8007950 <_strtod_l+0x588>)
 800772c:	3b01      	subs	r3, #1
 800772e:	a819      	add	r0, sp, #100	@ 0x64
 8007730:	9319      	str	r3, [sp, #100]	@ 0x64
 8007732:	f001 f9c1 	bl	8008ab8 <__match>
 8007736:	b910      	cbnz	r0, 800773e <_strtod_l+0x376>
 8007738:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800773a:	3301      	adds	r3, #1
 800773c:	9319      	str	r3, [sp, #100]	@ 0x64
 800773e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007960 <_strtod_l+0x598>
 8007742:	f04f 0a00 	mov.w	sl, #0
 8007746:	e678      	b.n	800743a <_strtod_l+0x72>
 8007748:	4882      	ldr	r0, [pc, #520]	@ (8007954 <_strtod_l+0x58c>)
 800774a:	f000 fef1 	bl	8008530 <nan>
 800774e:	ec5b ab10 	vmov	sl, fp, d0
 8007752:	e672      	b.n	800743a <_strtod_l+0x72>
 8007754:	eba8 0309 	sub.w	r3, r8, r9
 8007758:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800775a:	9309      	str	r3, [sp, #36]	@ 0x24
 800775c:	2f00      	cmp	r7, #0
 800775e:	bf08      	it	eq
 8007760:	462f      	moveq	r7, r5
 8007762:	2d10      	cmp	r5, #16
 8007764:	462c      	mov	r4, r5
 8007766:	bfa8      	it	ge
 8007768:	2410      	movge	r4, #16
 800776a:	f7f8 fecb 	bl	8000504 <__aeabi_ui2d>
 800776e:	2d09      	cmp	r5, #9
 8007770:	4682      	mov	sl, r0
 8007772:	468b      	mov	fp, r1
 8007774:	dc13      	bgt.n	800779e <_strtod_l+0x3d6>
 8007776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007778:	2b00      	cmp	r3, #0
 800777a:	f43f ae5e 	beq.w	800743a <_strtod_l+0x72>
 800777e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007780:	dd78      	ble.n	8007874 <_strtod_l+0x4ac>
 8007782:	2b16      	cmp	r3, #22
 8007784:	dc5f      	bgt.n	8007846 <_strtod_l+0x47e>
 8007786:	4974      	ldr	r1, [pc, #464]	@ (8007958 <_strtod_l+0x590>)
 8007788:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800778c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007790:	4652      	mov	r2, sl
 8007792:	465b      	mov	r3, fp
 8007794:	f7f8 ff30 	bl	80005f8 <__aeabi_dmul>
 8007798:	4682      	mov	sl, r0
 800779a:	468b      	mov	fp, r1
 800779c:	e64d      	b.n	800743a <_strtod_l+0x72>
 800779e:	4b6e      	ldr	r3, [pc, #440]	@ (8007958 <_strtod_l+0x590>)
 80077a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80077a4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80077a8:	f7f8 ff26 	bl	80005f8 <__aeabi_dmul>
 80077ac:	4682      	mov	sl, r0
 80077ae:	9808      	ldr	r0, [sp, #32]
 80077b0:	468b      	mov	fp, r1
 80077b2:	f7f8 fea7 	bl	8000504 <__aeabi_ui2d>
 80077b6:	4602      	mov	r2, r0
 80077b8:	460b      	mov	r3, r1
 80077ba:	4650      	mov	r0, sl
 80077bc:	4659      	mov	r1, fp
 80077be:	f7f8 fd65 	bl	800028c <__adddf3>
 80077c2:	2d0f      	cmp	r5, #15
 80077c4:	4682      	mov	sl, r0
 80077c6:	468b      	mov	fp, r1
 80077c8:	ddd5      	ble.n	8007776 <_strtod_l+0x3ae>
 80077ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077cc:	1b2c      	subs	r4, r5, r4
 80077ce:	441c      	add	r4, r3
 80077d0:	2c00      	cmp	r4, #0
 80077d2:	f340 8096 	ble.w	8007902 <_strtod_l+0x53a>
 80077d6:	f014 030f 	ands.w	r3, r4, #15
 80077da:	d00a      	beq.n	80077f2 <_strtod_l+0x42a>
 80077dc:	495e      	ldr	r1, [pc, #376]	@ (8007958 <_strtod_l+0x590>)
 80077de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80077e2:	4652      	mov	r2, sl
 80077e4:	465b      	mov	r3, fp
 80077e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077ea:	f7f8 ff05 	bl	80005f8 <__aeabi_dmul>
 80077ee:	4682      	mov	sl, r0
 80077f0:	468b      	mov	fp, r1
 80077f2:	f034 040f 	bics.w	r4, r4, #15
 80077f6:	d073      	beq.n	80078e0 <_strtod_l+0x518>
 80077f8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80077fc:	dd48      	ble.n	8007890 <_strtod_l+0x4c8>
 80077fe:	2400      	movs	r4, #0
 8007800:	46a0      	mov	r8, r4
 8007802:	940a      	str	r4, [sp, #40]	@ 0x28
 8007804:	46a1      	mov	r9, r4
 8007806:	9a05      	ldr	r2, [sp, #20]
 8007808:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007960 <_strtod_l+0x598>
 800780c:	2322      	movs	r3, #34	@ 0x22
 800780e:	6013      	str	r3, [r2, #0]
 8007810:	f04f 0a00 	mov.w	sl, #0
 8007814:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007816:	2b00      	cmp	r3, #0
 8007818:	f43f ae0f 	beq.w	800743a <_strtod_l+0x72>
 800781c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800781e:	9805      	ldr	r0, [sp, #20]
 8007820:	f7ff f942 	bl	8006aa8 <_Bfree>
 8007824:	9805      	ldr	r0, [sp, #20]
 8007826:	4649      	mov	r1, r9
 8007828:	f7ff f93e 	bl	8006aa8 <_Bfree>
 800782c:	9805      	ldr	r0, [sp, #20]
 800782e:	4641      	mov	r1, r8
 8007830:	f7ff f93a 	bl	8006aa8 <_Bfree>
 8007834:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007836:	9805      	ldr	r0, [sp, #20]
 8007838:	f7ff f936 	bl	8006aa8 <_Bfree>
 800783c:	9805      	ldr	r0, [sp, #20]
 800783e:	4621      	mov	r1, r4
 8007840:	f7ff f932 	bl	8006aa8 <_Bfree>
 8007844:	e5f9      	b.n	800743a <_strtod_l+0x72>
 8007846:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007848:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800784c:	4293      	cmp	r3, r2
 800784e:	dbbc      	blt.n	80077ca <_strtod_l+0x402>
 8007850:	4c41      	ldr	r4, [pc, #260]	@ (8007958 <_strtod_l+0x590>)
 8007852:	f1c5 050f 	rsb	r5, r5, #15
 8007856:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800785a:	4652      	mov	r2, sl
 800785c:	465b      	mov	r3, fp
 800785e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007862:	f7f8 fec9 	bl	80005f8 <__aeabi_dmul>
 8007866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007868:	1b5d      	subs	r5, r3, r5
 800786a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800786e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007872:	e78f      	b.n	8007794 <_strtod_l+0x3cc>
 8007874:	3316      	adds	r3, #22
 8007876:	dba8      	blt.n	80077ca <_strtod_l+0x402>
 8007878:	4b37      	ldr	r3, [pc, #220]	@ (8007958 <_strtod_l+0x590>)
 800787a:	eba9 0808 	sub.w	r8, r9, r8
 800787e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007882:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007886:	4650      	mov	r0, sl
 8007888:	4659      	mov	r1, fp
 800788a:	f7f8 ffdf 	bl	800084c <__aeabi_ddiv>
 800788e:	e783      	b.n	8007798 <_strtod_l+0x3d0>
 8007890:	4b32      	ldr	r3, [pc, #200]	@ (800795c <_strtod_l+0x594>)
 8007892:	9308      	str	r3, [sp, #32]
 8007894:	2300      	movs	r3, #0
 8007896:	1124      	asrs	r4, r4, #4
 8007898:	4650      	mov	r0, sl
 800789a:	4659      	mov	r1, fp
 800789c:	461e      	mov	r6, r3
 800789e:	2c01      	cmp	r4, #1
 80078a0:	dc21      	bgt.n	80078e6 <_strtod_l+0x51e>
 80078a2:	b10b      	cbz	r3, 80078a8 <_strtod_l+0x4e0>
 80078a4:	4682      	mov	sl, r0
 80078a6:	468b      	mov	fp, r1
 80078a8:	492c      	ldr	r1, [pc, #176]	@ (800795c <_strtod_l+0x594>)
 80078aa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80078ae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80078b2:	4652      	mov	r2, sl
 80078b4:	465b      	mov	r3, fp
 80078b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078ba:	f7f8 fe9d 	bl	80005f8 <__aeabi_dmul>
 80078be:	4b28      	ldr	r3, [pc, #160]	@ (8007960 <_strtod_l+0x598>)
 80078c0:	460a      	mov	r2, r1
 80078c2:	400b      	ands	r3, r1
 80078c4:	4927      	ldr	r1, [pc, #156]	@ (8007964 <_strtod_l+0x59c>)
 80078c6:	428b      	cmp	r3, r1
 80078c8:	4682      	mov	sl, r0
 80078ca:	d898      	bhi.n	80077fe <_strtod_l+0x436>
 80078cc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80078d0:	428b      	cmp	r3, r1
 80078d2:	bf86      	itte	hi
 80078d4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007968 <_strtod_l+0x5a0>
 80078d8:	f04f 3aff 	movhi.w	sl, #4294967295
 80078dc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80078e0:	2300      	movs	r3, #0
 80078e2:	9308      	str	r3, [sp, #32]
 80078e4:	e07a      	b.n	80079dc <_strtod_l+0x614>
 80078e6:	07e2      	lsls	r2, r4, #31
 80078e8:	d505      	bpl.n	80078f6 <_strtod_l+0x52e>
 80078ea:	9b08      	ldr	r3, [sp, #32]
 80078ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f0:	f7f8 fe82 	bl	80005f8 <__aeabi_dmul>
 80078f4:	2301      	movs	r3, #1
 80078f6:	9a08      	ldr	r2, [sp, #32]
 80078f8:	3208      	adds	r2, #8
 80078fa:	3601      	adds	r6, #1
 80078fc:	1064      	asrs	r4, r4, #1
 80078fe:	9208      	str	r2, [sp, #32]
 8007900:	e7cd      	b.n	800789e <_strtod_l+0x4d6>
 8007902:	d0ed      	beq.n	80078e0 <_strtod_l+0x518>
 8007904:	4264      	negs	r4, r4
 8007906:	f014 020f 	ands.w	r2, r4, #15
 800790a:	d00a      	beq.n	8007922 <_strtod_l+0x55a>
 800790c:	4b12      	ldr	r3, [pc, #72]	@ (8007958 <_strtod_l+0x590>)
 800790e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007912:	4650      	mov	r0, sl
 8007914:	4659      	mov	r1, fp
 8007916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791a:	f7f8 ff97 	bl	800084c <__aeabi_ddiv>
 800791e:	4682      	mov	sl, r0
 8007920:	468b      	mov	fp, r1
 8007922:	1124      	asrs	r4, r4, #4
 8007924:	d0dc      	beq.n	80078e0 <_strtod_l+0x518>
 8007926:	2c1f      	cmp	r4, #31
 8007928:	dd20      	ble.n	800796c <_strtod_l+0x5a4>
 800792a:	2400      	movs	r4, #0
 800792c:	46a0      	mov	r8, r4
 800792e:	940a      	str	r4, [sp, #40]	@ 0x28
 8007930:	46a1      	mov	r9, r4
 8007932:	9a05      	ldr	r2, [sp, #20]
 8007934:	2322      	movs	r3, #34	@ 0x22
 8007936:	f04f 0a00 	mov.w	sl, #0
 800793a:	f04f 0b00 	mov.w	fp, #0
 800793e:	6013      	str	r3, [r2, #0]
 8007940:	e768      	b.n	8007814 <_strtod_l+0x44c>
 8007942:	bf00      	nop
 8007944:	080092dd 	.word	0x080092dd
 8007948:	080094f4 	.word	0x080094f4
 800794c:	080092d5 	.word	0x080092d5
 8007950:	0800930c 	.word	0x0800930c
 8007954:	0800969d 	.word	0x0800969d
 8007958:	08009428 	.word	0x08009428
 800795c:	08009400 	.word	0x08009400
 8007960:	7ff00000 	.word	0x7ff00000
 8007964:	7ca00000 	.word	0x7ca00000
 8007968:	7fefffff 	.word	0x7fefffff
 800796c:	f014 0310 	ands.w	r3, r4, #16
 8007970:	bf18      	it	ne
 8007972:	236a      	movne	r3, #106	@ 0x6a
 8007974:	4ea9      	ldr	r6, [pc, #676]	@ (8007c1c <_strtod_l+0x854>)
 8007976:	9308      	str	r3, [sp, #32]
 8007978:	4650      	mov	r0, sl
 800797a:	4659      	mov	r1, fp
 800797c:	2300      	movs	r3, #0
 800797e:	07e2      	lsls	r2, r4, #31
 8007980:	d504      	bpl.n	800798c <_strtod_l+0x5c4>
 8007982:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007986:	f7f8 fe37 	bl	80005f8 <__aeabi_dmul>
 800798a:	2301      	movs	r3, #1
 800798c:	1064      	asrs	r4, r4, #1
 800798e:	f106 0608 	add.w	r6, r6, #8
 8007992:	d1f4      	bne.n	800797e <_strtod_l+0x5b6>
 8007994:	b10b      	cbz	r3, 800799a <_strtod_l+0x5d2>
 8007996:	4682      	mov	sl, r0
 8007998:	468b      	mov	fp, r1
 800799a:	9b08      	ldr	r3, [sp, #32]
 800799c:	b1b3      	cbz	r3, 80079cc <_strtod_l+0x604>
 800799e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80079a2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	4659      	mov	r1, fp
 80079aa:	dd0f      	ble.n	80079cc <_strtod_l+0x604>
 80079ac:	2b1f      	cmp	r3, #31
 80079ae:	dd55      	ble.n	8007a5c <_strtod_l+0x694>
 80079b0:	2b34      	cmp	r3, #52	@ 0x34
 80079b2:	bfde      	ittt	le
 80079b4:	f04f 33ff 	movle.w	r3, #4294967295
 80079b8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80079bc:	4093      	lslle	r3, r2
 80079be:	f04f 0a00 	mov.w	sl, #0
 80079c2:	bfcc      	ite	gt
 80079c4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80079c8:	ea03 0b01 	andle.w	fp, r3, r1
 80079cc:	2200      	movs	r2, #0
 80079ce:	2300      	movs	r3, #0
 80079d0:	4650      	mov	r0, sl
 80079d2:	4659      	mov	r1, fp
 80079d4:	f7f9 f878 	bl	8000ac8 <__aeabi_dcmpeq>
 80079d8:	2800      	cmp	r0, #0
 80079da:	d1a6      	bne.n	800792a <_strtod_l+0x562>
 80079dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079de:	9300      	str	r3, [sp, #0]
 80079e0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80079e2:	9805      	ldr	r0, [sp, #20]
 80079e4:	462b      	mov	r3, r5
 80079e6:	463a      	mov	r2, r7
 80079e8:	f7ff f8c6 	bl	8006b78 <__s2b>
 80079ec:	900a      	str	r0, [sp, #40]	@ 0x28
 80079ee:	2800      	cmp	r0, #0
 80079f0:	f43f af05 	beq.w	80077fe <_strtod_l+0x436>
 80079f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079f6:	2a00      	cmp	r2, #0
 80079f8:	eba9 0308 	sub.w	r3, r9, r8
 80079fc:	bfa8      	it	ge
 80079fe:	2300      	movge	r3, #0
 8007a00:	9312      	str	r3, [sp, #72]	@ 0x48
 8007a02:	2400      	movs	r4, #0
 8007a04:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007a08:	9316      	str	r3, [sp, #88]	@ 0x58
 8007a0a:	46a0      	mov	r8, r4
 8007a0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a0e:	9805      	ldr	r0, [sp, #20]
 8007a10:	6859      	ldr	r1, [r3, #4]
 8007a12:	f7ff f809 	bl	8006a28 <_Balloc>
 8007a16:	4681      	mov	r9, r0
 8007a18:	2800      	cmp	r0, #0
 8007a1a:	f43f aef4 	beq.w	8007806 <_strtod_l+0x43e>
 8007a1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a20:	691a      	ldr	r2, [r3, #16]
 8007a22:	3202      	adds	r2, #2
 8007a24:	f103 010c 	add.w	r1, r3, #12
 8007a28:	0092      	lsls	r2, r2, #2
 8007a2a:	300c      	adds	r0, #12
 8007a2c:	f000 fd72 	bl	8008514 <memcpy>
 8007a30:	ec4b ab10 	vmov	d0, sl, fp
 8007a34:	9805      	ldr	r0, [sp, #20]
 8007a36:	aa1c      	add	r2, sp, #112	@ 0x70
 8007a38:	a91b      	add	r1, sp, #108	@ 0x6c
 8007a3a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007a3e:	f7ff fbd7 	bl	80071f0 <__d2b>
 8007a42:	901a      	str	r0, [sp, #104]	@ 0x68
 8007a44:	2800      	cmp	r0, #0
 8007a46:	f43f aede 	beq.w	8007806 <_strtod_l+0x43e>
 8007a4a:	9805      	ldr	r0, [sp, #20]
 8007a4c:	2101      	movs	r1, #1
 8007a4e:	f7ff f929 	bl	8006ca4 <__i2b>
 8007a52:	4680      	mov	r8, r0
 8007a54:	b948      	cbnz	r0, 8007a6a <_strtod_l+0x6a2>
 8007a56:	f04f 0800 	mov.w	r8, #0
 8007a5a:	e6d4      	b.n	8007806 <_strtod_l+0x43e>
 8007a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a60:	fa02 f303 	lsl.w	r3, r2, r3
 8007a64:	ea03 0a0a 	and.w	sl, r3, sl
 8007a68:	e7b0      	b.n	80079cc <_strtod_l+0x604>
 8007a6a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007a6c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007a6e:	2d00      	cmp	r5, #0
 8007a70:	bfab      	itete	ge
 8007a72:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007a74:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007a76:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007a78:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007a7a:	bfac      	ite	ge
 8007a7c:	18ef      	addge	r7, r5, r3
 8007a7e:	1b5e      	sublt	r6, r3, r5
 8007a80:	9b08      	ldr	r3, [sp, #32]
 8007a82:	1aed      	subs	r5, r5, r3
 8007a84:	4415      	add	r5, r2
 8007a86:	4b66      	ldr	r3, [pc, #408]	@ (8007c20 <_strtod_l+0x858>)
 8007a88:	3d01      	subs	r5, #1
 8007a8a:	429d      	cmp	r5, r3
 8007a8c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007a90:	da50      	bge.n	8007b34 <_strtod_l+0x76c>
 8007a92:	1b5b      	subs	r3, r3, r5
 8007a94:	2b1f      	cmp	r3, #31
 8007a96:	eba2 0203 	sub.w	r2, r2, r3
 8007a9a:	f04f 0101 	mov.w	r1, #1
 8007a9e:	dc3d      	bgt.n	8007b1c <_strtod_l+0x754>
 8007aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8007aa4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	9310      	str	r3, [sp, #64]	@ 0x40
 8007aaa:	18bd      	adds	r5, r7, r2
 8007aac:	9b08      	ldr	r3, [sp, #32]
 8007aae:	42af      	cmp	r7, r5
 8007ab0:	4416      	add	r6, r2
 8007ab2:	441e      	add	r6, r3
 8007ab4:	463b      	mov	r3, r7
 8007ab6:	bfa8      	it	ge
 8007ab8:	462b      	movge	r3, r5
 8007aba:	42b3      	cmp	r3, r6
 8007abc:	bfa8      	it	ge
 8007abe:	4633      	movge	r3, r6
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	bfc2      	ittt	gt
 8007ac4:	1aed      	subgt	r5, r5, r3
 8007ac6:	1af6      	subgt	r6, r6, r3
 8007ac8:	1aff      	subgt	r7, r7, r3
 8007aca:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	dd16      	ble.n	8007afe <_strtod_l+0x736>
 8007ad0:	4641      	mov	r1, r8
 8007ad2:	9805      	ldr	r0, [sp, #20]
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	f7ff f9a5 	bl	8006e24 <__pow5mult>
 8007ada:	4680      	mov	r8, r0
 8007adc:	2800      	cmp	r0, #0
 8007ade:	d0ba      	beq.n	8007a56 <_strtod_l+0x68e>
 8007ae0:	4601      	mov	r1, r0
 8007ae2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007ae4:	9805      	ldr	r0, [sp, #20]
 8007ae6:	f7ff f8f3 	bl	8006cd0 <__multiply>
 8007aea:	900e      	str	r0, [sp, #56]	@ 0x38
 8007aec:	2800      	cmp	r0, #0
 8007aee:	f43f ae8a 	beq.w	8007806 <_strtod_l+0x43e>
 8007af2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007af4:	9805      	ldr	r0, [sp, #20]
 8007af6:	f7fe ffd7 	bl	8006aa8 <_Bfree>
 8007afa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007afc:	931a      	str	r3, [sp, #104]	@ 0x68
 8007afe:	2d00      	cmp	r5, #0
 8007b00:	dc1d      	bgt.n	8007b3e <_strtod_l+0x776>
 8007b02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	dd23      	ble.n	8007b50 <_strtod_l+0x788>
 8007b08:	4649      	mov	r1, r9
 8007b0a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007b0c:	9805      	ldr	r0, [sp, #20]
 8007b0e:	f7ff f989 	bl	8006e24 <__pow5mult>
 8007b12:	4681      	mov	r9, r0
 8007b14:	b9e0      	cbnz	r0, 8007b50 <_strtod_l+0x788>
 8007b16:	f04f 0900 	mov.w	r9, #0
 8007b1a:	e674      	b.n	8007806 <_strtod_l+0x43e>
 8007b1c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007b20:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007b24:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007b28:	35e2      	adds	r5, #226	@ 0xe2
 8007b2a:	fa01 f305 	lsl.w	r3, r1, r5
 8007b2e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007b30:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007b32:	e7ba      	b.n	8007aaa <_strtod_l+0x6e2>
 8007b34:	2300      	movs	r3, #0
 8007b36:	9310      	str	r3, [sp, #64]	@ 0x40
 8007b38:	2301      	movs	r3, #1
 8007b3a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007b3c:	e7b5      	b.n	8007aaa <_strtod_l+0x6e2>
 8007b3e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b40:	9805      	ldr	r0, [sp, #20]
 8007b42:	462a      	mov	r2, r5
 8007b44:	f7ff f9c8 	bl	8006ed8 <__lshift>
 8007b48:	901a      	str	r0, [sp, #104]	@ 0x68
 8007b4a:	2800      	cmp	r0, #0
 8007b4c:	d1d9      	bne.n	8007b02 <_strtod_l+0x73a>
 8007b4e:	e65a      	b.n	8007806 <_strtod_l+0x43e>
 8007b50:	2e00      	cmp	r6, #0
 8007b52:	dd07      	ble.n	8007b64 <_strtod_l+0x79c>
 8007b54:	4649      	mov	r1, r9
 8007b56:	9805      	ldr	r0, [sp, #20]
 8007b58:	4632      	mov	r2, r6
 8007b5a:	f7ff f9bd 	bl	8006ed8 <__lshift>
 8007b5e:	4681      	mov	r9, r0
 8007b60:	2800      	cmp	r0, #0
 8007b62:	d0d8      	beq.n	8007b16 <_strtod_l+0x74e>
 8007b64:	2f00      	cmp	r7, #0
 8007b66:	dd08      	ble.n	8007b7a <_strtod_l+0x7b2>
 8007b68:	4641      	mov	r1, r8
 8007b6a:	9805      	ldr	r0, [sp, #20]
 8007b6c:	463a      	mov	r2, r7
 8007b6e:	f7ff f9b3 	bl	8006ed8 <__lshift>
 8007b72:	4680      	mov	r8, r0
 8007b74:	2800      	cmp	r0, #0
 8007b76:	f43f ae46 	beq.w	8007806 <_strtod_l+0x43e>
 8007b7a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b7c:	9805      	ldr	r0, [sp, #20]
 8007b7e:	464a      	mov	r2, r9
 8007b80:	f7ff fa32 	bl	8006fe8 <__mdiff>
 8007b84:	4604      	mov	r4, r0
 8007b86:	2800      	cmp	r0, #0
 8007b88:	f43f ae3d 	beq.w	8007806 <_strtod_l+0x43e>
 8007b8c:	68c3      	ldr	r3, [r0, #12]
 8007b8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007b90:	2300      	movs	r3, #0
 8007b92:	60c3      	str	r3, [r0, #12]
 8007b94:	4641      	mov	r1, r8
 8007b96:	f7ff fa0b 	bl	8006fb0 <__mcmp>
 8007b9a:	2800      	cmp	r0, #0
 8007b9c:	da46      	bge.n	8007c2c <_strtod_l+0x864>
 8007b9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ba0:	ea53 030a 	orrs.w	r3, r3, sl
 8007ba4:	d16c      	bne.n	8007c80 <_strtod_l+0x8b8>
 8007ba6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d168      	bne.n	8007c80 <_strtod_l+0x8b8>
 8007bae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007bb2:	0d1b      	lsrs	r3, r3, #20
 8007bb4:	051b      	lsls	r3, r3, #20
 8007bb6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007bba:	d961      	bls.n	8007c80 <_strtod_l+0x8b8>
 8007bbc:	6963      	ldr	r3, [r4, #20]
 8007bbe:	b913      	cbnz	r3, 8007bc6 <_strtod_l+0x7fe>
 8007bc0:	6923      	ldr	r3, [r4, #16]
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	dd5c      	ble.n	8007c80 <_strtod_l+0x8b8>
 8007bc6:	4621      	mov	r1, r4
 8007bc8:	2201      	movs	r2, #1
 8007bca:	9805      	ldr	r0, [sp, #20]
 8007bcc:	f7ff f984 	bl	8006ed8 <__lshift>
 8007bd0:	4641      	mov	r1, r8
 8007bd2:	4604      	mov	r4, r0
 8007bd4:	f7ff f9ec 	bl	8006fb0 <__mcmp>
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	dd51      	ble.n	8007c80 <_strtod_l+0x8b8>
 8007bdc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007be0:	9a08      	ldr	r2, [sp, #32]
 8007be2:	0d1b      	lsrs	r3, r3, #20
 8007be4:	051b      	lsls	r3, r3, #20
 8007be6:	2a00      	cmp	r2, #0
 8007be8:	d06b      	beq.n	8007cc2 <_strtod_l+0x8fa>
 8007bea:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007bee:	d868      	bhi.n	8007cc2 <_strtod_l+0x8fa>
 8007bf0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007bf4:	f67f ae9d 	bls.w	8007932 <_strtod_l+0x56a>
 8007bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8007c24 <_strtod_l+0x85c>)
 8007bfa:	4650      	mov	r0, sl
 8007bfc:	4659      	mov	r1, fp
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f7f8 fcfa 	bl	80005f8 <__aeabi_dmul>
 8007c04:	4b08      	ldr	r3, [pc, #32]	@ (8007c28 <_strtod_l+0x860>)
 8007c06:	400b      	ands	r3, r1
 8007c08:	4682      	mov	sl, r0
 8007c0a:	468b      	mov	fp, r1
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f47f ae05 	bne.w	800781c <_strtod_l+0x454>
 8007c12:	9a05      	ldr	r2, [sp, #20]
 8007c14:	2322      	movs	r3, #34	@ 0x22
 8007c16:	6013      	str	r3, [r2, #0]
 8007c18:	e600      	b.n	800781c <_strtod_l+0x454>
 8007c1a:	bf00      	nop
 8007c1c:	08009520 	.word	0x08009520
 8007c20:	fffffc02 	.word	0xfffffc02
 8007c24:	39500000 	.word	0x39500000
 8007c28:	7ff00000 	.word	0x7ff00000
 8007c2c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007c30:	d165      	bne.n	8007cfe <_strtod_l+0x936>
 8007c32:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007c34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c38:	b35a      	cbz	r2, 8007c92 <_strtod_l+0x8ca>
 8007c3a:	4a9f      	ldr	r2, [pc, #636]	@ (8007eb8 <_strtod_l+0xaf0>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d12b      	bne.n	8007c98 <_strtod_l+0x8d0>
 8007c40:	9b08      	ldr	r3, [sp, #32]
 8007c42:	4651      	mov	r1, sl
 8007c44:	b303      	cbz	r3, 8007c88 <_strtod_l+0x8c0>
 8007c46:	4b9d      	ldr	r3, [pc, #628]	@ (8007ebc <_strtod_l+0xaf4>)
 8007c48:	465a      	mov	r2, fp
 8007c4a:	4013      	ands	r3, r2
 8007c4c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007c50:	f04f 32ff 	mov.w	r2, #4294967295
 8007c54:	d81b      	bhi.n	8007c8e <_strtod_l+0x8c6>
 8007c56:	0d1b      	lsrs	r3, r3, #20
 8007c58:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c60:	4299      	cmp	r1, r3
 8007c62:	d119      	bne.n	8007c98 <_strtod_l+0x8d0>
 8007c64:	4b96      	ldr	r3, [pc, #600]	@ (8007ec0 <_strtod_l+0xaf8>)
 8007c66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d102      	bne.n	8007c72 <_strtod_l+0x8aa>
 8007c6c:	3101      	adds	r1, #1
 8007c6e:	f43f adca 	beq.w	8007806 <_strtod_l+0x43e>
 8007c72:	4b92      	ldr	r3, [pc, #584]	@ (8007ebc <_strtod_l+0xaf4>)
 8007c74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c76:	401a      	ands	r2, r3
 8007c78:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007c7c:	f04f 0a00 	mov.w	sl, #0
 8007c80:	9b08      	ldr	r3, [sp, #32]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1b8      	bne.n	8007bf8 <_strtod_l+0x830>
 8007c86:	e5c9      	b.n	800781c <_strtod_l+0x454>
 8007c88:	f04f 33ff 	mov.w	r3, #4294967295
 8007c8c:	e7e8      	b.n	8007c60 <_strtod_l+0x898>
 8007c8e:	4613      	mov	r3, r2
 8007c90:	e7e6      	b.n	8007c60 <_strtod_l+0x898>
 8007c92:	ea53 030a 	orrs.w	r3, r3, sl
 8007c96:	d0a1      	beq.n	8007bdc <_strtod_l+0x814>
 8007c98:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007c9a:	b1db      	cbz	r3, 8007cd4 <_strtod_l+0x90c>
 8007c9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c9e:	4213      	tst	r3, r2
 8007ca0:	d0ee      	beq.n	8007c80 <_strtod_l+0x8b8>
 8007ca2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ca4:	9a08      	ldr	r2, [sp, #32]
 8007ca6:	4650      	mov	r0, sl
 8007ca8:	4659      	mov	r1, fp
 8007caa:	b1bb      	cbz	r3, 8007cdc <_strtod_l+0x914>
 8007cac:	f7ff fb6e 	bl	800738c <sulp>
 8007cb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007cb4:	ec53 2b10 	vmov	r2, r3, d0
 8007cb8:	f7f8 fae8 	bl	800028c <__adddf3>
 8007cbc:	4682      	mov	sl, r0
 8007cbe:	468b      	mov	fp, r1
 8007cc0:	e7de      	b.n	8007c80 <_strtod_l+0x8b8>
 8007cc2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007cc6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007cca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007cce:	f04f 3aff 	mov.w	sl, #4294967295
 8007cd2:	e7d5      	b.n	8007c80 <_strtod_l+0x8b8>
 8007cd4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007cd6:	ea13 0f0a 	tst.w	r3, sl
 8007cda:	e7e1      	b.n	8007ca0 <_strtod_l+0x8d8>
 8007cdc:	f7ff fb56 	bl	800738c <sulp>
 8007ce0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ce4:	ec53 2b10 	vmov	r2, r3, d0
 8007ce8:	f7f8 face 	bl	8000288 <__aeabi_dsub>
 8007cec:	2200      	movs	r2, #0
 8007cee:	2300      	movs	r3, #0
 8007cf0:	4682      	mov	sl, r0
 8007cf2:	468b      	mov	fp, r1
 8007cf4:	f7f8 fee8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	d0c1      	beq.n	8007c80 <_strtod_l+0x8b8>
 8007cfc:	e619      	b.n	8007932 <_strtod_l+0x56a>
 8007cfe:	4641      	mov	r1, r8
 8007d00:	4620      	mov	r0, r4
 8007d02:	f7ff facd 	bl	80072a0 <__ratio>
 8007d06:	ec57 6b10 	vmov	r6, r7, d0
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007d10:	4630      	mov	r0, r6
 8007d12:	4639      	mov	r1, r7
 8007d14:	f7f8 feec 	bl	8000af0 <__aeabi_dcmple>
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	d06f      	beq.n	8007dfc <_strtod_l+0xa34>
 8007d1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d17a      	bne.n	8007e18 <_strtod_l+0xa50>
 8007d22:	f1ba 0f00 	cmp.w	sl, #0
 8007d26:	d158      	bne.n	8007dda <_strtod_l+0xa12>
 8007d28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d15a      	bne.n	8007de8 <_strtod_l+0xa20>
 8007d32:	4b64      	ldr	r3, [pc, #400]	@ (8007ec4 <_strtod_l+0xafc>)
 8007d34:	2200      	movs	r2, #0
 8007d36:	4630      	mov	r0, r6
 8007d38:	4639      	mov	r1, r7
 8007d3a:	f7f8 fecf 	bl	8000adc <__aeabi_dcmplt>
 8007d3e:	2800      	cmp	r0, #0
 8007d40:	d159      	bne.n	8007df6 <_strtod_l+0xa2e>
 8007d42:	4630      	mov	r0, r6
 8007d44:	4639      	mov	r1, r7
 8007d46:	4b60      	ldr	r3, [pc, #384]	@ (8007ec8 <_strtod_l+0xb00>)
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f7f8 fc55 	bl	80005f8 <__aeabi_dmul>
 8007d4e:	4606      	mov	r6, r0
 8007d50:	460f      	mov	r7, r1
 8007d52:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007d56:	9606      	str	r6, [sp, #24]
 8007d58:	9307      	str	r3, [sp, #28]
 8007d5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d5e:	4d57      	ldr	r5, [pc, #348]	@ (8007ebc <_strtod_l+0xaf4>)
 8007d60:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007d64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d66:	401d      	ands	r5, r3
 8007d68:	4b58      	ldr	r3, [pc, #352]	@ (8007ecc <_strtod_l+0xb04>)
 8007d6a:	429d      	cmp	r5, r3
 8007d6c:	f040 80b2 	bne.w	8007ed4 <_strtod_l+0xb0c>
 8007d70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d72:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007d76:	ec4b ab10 	vmov	d0, sl, fp
 8007d7a:	f7ff f9c9 	bl	8007110 <__ulp>
 8007d7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d82:	ec51 0b10 	vmov	r0, r1, d0
 8007d86:	f7f8 fc37 	bl	80005f8 <__aeabi_dmul>
 8007d8a:	4652      	mov	r2, sl
 8007d8c:	465b      	mov	r3, fp
 8007d8e:	f7f8 fa7d 	bl	800028c <__adddf3>
 8007d92:	460b      	mov	r3, r1
 8007d94:	4949      	ldr	r1, [pc, #292]	@ (8007ebc <_strtod_l+0xaf4>)
 8007d96:	4a4e      	ldr	r2, [pc, #312]	@ (8007ed0 <_strtod_l+0xb08>)
 8007d98:	4019      	ands	r1, r3
 8007d9a:	4291      	cmp	r1, r2
 8007d9c:	4682      	mov	sl, r0
 8007d9e:	d942      	bls.n	8007e26 <_strtod_l+0xa5e>
 8007da0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007da2:	4b47      	ldr	r3, [pc, #284]	@ (8007ec0 <_strtod_l+0xaf8>)
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d103      	bne.n	8007db0 <_strtod_l+0x9e8>
 8007da8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007daa:	3301      	adds	r3, #1
 8007dac:	f43f ad2b 	beq.w	8007806 <_strtod_l+0x43e>
 8007db0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007ec0 <_strtod_l+0xaf8>
 8007db4:	f04f 3aff 	mov.w	sl, #4294967295
 8007db8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007dba:	9805      	ldr	r0, [sp, #20]
 8007dbc:	f7fe fe74 	bl	8006aa8 <_Bfree>
 8007dc0:	9805      	ldr	r0, [sp, #20]
 8007dc2:	4649      	mov	r1, r9
 8007dc4:	f7fe fe70 	bl	8006aa8 <_Bfree>
 8007dc8:	9805      	ldr	r0, [sp, #20]
 8007dca:	4641      	mov	r1, r8
 8007dcc:	f7fe fe6c 	bl	8006aa8 <_Bfree>
 8007dd0:	9805      	ldr	r0, [sp, #20]
 8007dd2:	4621      	mov	r1, r4
 8007dd4:	f7fe fe68 	bl	8006aa8 <_Bfree>
 8007dd8:	e618      	b.n	8007a0c <_strtod_l+0x644>
 8007dda:	f1ba 0f01 	cmp.w	sl, #1
 8007dde:	d103      	bne.n	8007de8 <_strtod_l+0xa20>
 8007de0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	f43f ada5 	beq.w	8007932 <_strtod_l+0x56a>
 8007de8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007e98 <_strtod_l+0xad0>
 8007dec:	4f35      	ldr	r7, [pc, #212]	@ (8007ec4 <_strtod_l+0xafc>)
 8007dee:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007df2:	2600      	movs	r6, #0
 8007df4:	e7b1      	b.n	8007d5a <_strtod_l+0x992>
 8007df6:	4f34      	ldr	r7, [pc, #208]	@ (8007ec8 <_strtod_l+0xb00>)
 8007df8:	2600      	movs	r6, #0
 8007dfa:	e7aa      	b.n	8007d52 <_strtod_l+0x98a>
 8007dfc:	4b32      	ldr	r3, [pc, #200]	@ (8007ec8 <_strtod_l+0xb00>)
 8007dfe:	4630      	mov	r0, r6
 8007e00:	4639      	mov	r1, r7
 8007e02:	2200      	movs	r2, #0
 8007e04:	f7f8 fbf8 	bl	80005f8 <__aeabi_dmul>
 8007e08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e0a:	4606      	mov	r6, r0
 8007e0c:	460f      	mov	r7, r1
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d09f      	beq.n	8007d52 <_strtod_l+0x98a>
 8007e12:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007e16:	e7a0      	b.n	8007d5a <_strtod_l+0x992>
 8007e18:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007ea0 <_strtod_l+0xad8>
 8007e1c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007e20:	ec57 6b17 	vmov	r6, r7, d7
 8007e24:	e799      	b.n	8007d5a <_strtod_l+0x992>
 8007e26:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007e2a:	9b08      	ldr	r3, [sp, #32]
 8007e2c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d1c1      	bne.n	8007db8 <_strtod_l+0x9f0>
 8007e34:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007e38:	0d1b      	lsrs	r3, r3, #20
 8007e3a:	051b      	lsls	r3, r3, #20
 8007e3c:	429d      	cmp	r5, r3
 8007e3e:	d1bb      	bne.n	8007db8 <_strtod_l+0x9f0>
 8007e40:	4630      	mov	r0, r6
 8007e42:	4639      	mov	r1, r7
 8007e44:	f7f8 ff20 	bl	8000c88 <__aeabi_d2lz>
 8007e48:	f7f8 fba8 	bl	800059c <__aeabi_l2d>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	460b      	mov	r3, r1
 8007e50:	4630      	mov	r0, r6
 8007e52:	4639      	mov	r1, r7
 8007e54:	f7f8 fa18 	bl	8000288 <__aeabi_dsub>
 8007e58:	460b      	mov	r3, r1
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007e60:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007e64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e66:	ea46 060a 	orr.w	r6, r6, sl
 8007e6a:	431e      	orrs	r6, r3
 8007e6c:	d06f      	beq.n	8007f4e <_strtod_l+0xb86>
 8007e6e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007ea8 <_strtod_l+0xae0>)
 8007e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e74:	f7f8 fe32 	bl	8000adc <__aeabi_dcmplt>
 8007e78:	2800      	cmp	r0, #0
 8007e7a:	f47f accf 	bne.w	800781c <_strtod_l+0x454>
 8007e7e:	a30c      	add	r3, pc, #48	@ (adr r3, 8007eb0 <_strtod_l+0xae8>)
 8007e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e88:	f7f8 fe46 	bl	8000b18 <__aeabi_dcmpgt>
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	d093      	beq.n	8007db8 <_strtod_l+0x9f0>
 8007e90:	e4c4      	b.n	800781c <_strtod_l+0x454>
 8007e92:	bf00      	nop
 8007e94:	f3af 8000 	nop.w
 8007e98:	00000000 	.word	0x00000000
 8007e9c:	bff00000 	.word	0xbff00000
 8007ea0:	00000000 	.word	0x00000000
 8007ea4:	3ff00000 	.word	0x3ff00000
 8007ea8:	94a03595 	.word	0x94a03595
 8007eac:	3fdfffff 	.word	0x3fdfffff
 8007eb0:	35afe535 	.word	0x35afe535
 8007eb4:	3fe00000 	.word	0x3fe00000
 8007eb8:	000fffff 	.word	0x000fffff
 8007ebc:	7ff00000 	.word	0x7ff00000
 8007ec0:	7fefffff 	.word	0x7fefffff
 8007ec4:	3ff00000 	.word	0x3ff00000
 8007ec8:	3fe00000 	.word	0x3fe00000
 8007ecc:	7fe00000 	.word	0x7fe00000
 8007ed0:	7c9fffff 	.word	0x7c9fffff
 8007ed4:	9b08      	ldr	r3, [sp, #32]
 8007ed6:	b323      	cbz	r3, 8007f22 <_strtod_l+0xb5a>
 8007ed8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007edc:	d821      	bhi.n	8007f22 <_strtod_l+0xb5a>
 8007ede:	a328      	add	r3, pc, #160	@ (adr r3, 8007f80 <_strtod_l+0xbb8>)
 8007ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee4:	4630      	mov	r0, r6
 8007ee6:	4639      	mov	r1, r7
 8007ee8:	f7f8 fe02 	bl	8000af0 <__aeabi_dcmple>
 8007eec:	b1a0      	cbz	r0, 8007f18 <_strtod_l+0xb50>
 8007eee:	4639      	mov	r1, r7
 8007ef0:	4630      	mov	r0, r6
 8007ef2:	f7f8 fe59 	bl	8000ba8 <__aeabi_d2uiz>
 8007ef6:	2801      	cmp	r0, #1
 8007ef8:	bf38      	it	cc
 8007efa:	2001      	movcc	r0, #1
 8007efc:	f7f8 fb02 	bl	8000504 <__aeabi_ui2d>
 8007f00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f02:	4606      	mov	r6, r0
 8007f04:	460f      	mov	r7, r1
 8007f06:	b9fb      	cbnz	r3, 8007f48 <_strtod_l+0xb80>
 8007f08:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007f0c:	9014      	str	r0, [sp, #80]	@ 0x50
 8007f0e:	9315      	str	r3, [sp, #84]	@ 0x54
 8007f10:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007f14:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007f18:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007f1a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007f1e:	1b5b      	subs	r3, r3, r5
 8007f20:	9311      	str	r3, [sp, #68]	@ 0x44
 8007f22:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007f26:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007f2a:	f7ff f8f1 	bl	8007110 <__ulp>
 8007f2e:	4650      	mov	r0, sl
 8007f30:	ec53 2b10 	vmov	r2, r3, d0
 8007f34:	4659      	mov	r1, fp
 8007f36:	f7f8 fb5f 	bl	80005f8 <__aeabi_dmul>
 8007f3a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007f3e:	f7f8 f9a5 	bl	800028c <__adddf3>
 8007f42:	4682      	mov	sl, r0
 8007f44:	468b      	mov	fp, r1
 8007f46:	e770      	b.n	8007e2a <_strtod_l+0xa62>
 8007f48:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007f4c:	e7e0      	b.n	8007f10 <_strtod_l+0xb48>
 8007f4e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007f88 <_strtod_l+0xbc0>)
 8007f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f54:	f7f8 fdc2 	bl	8000adc <__aeabi_dcmplt>
 8007f58:	e798      	b.n	8007e8c <_strtod_l+0xac4>
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f5e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007f60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f62:	6013      	str	r3, [r2, #0]
 8007f64:	f7ff ba6d 	b.w	8007442 <_strtod_l+0x7a>
 8007f68:	2a65      	cmp	r2, #101	@ 0x65
 8007f6a:	f43f ab66 	beq.w	800763a <_strtod_l+0x272>
 8007f6e:	2a45      	cmp	r2, #69	@ 0x45
 8007f70:	f43f ab63 	beq.w	800763a <_strtod_l+0x272>
 8007f74:	2301      	movs	r3, #1
 8007f76:	f7ff bb9e 	b.w	80076b6 <_strtod_l+0x2ee>
 8007f7a:	bf00      	nop
 8007f7c:	f3af 8000 	nop.w
 8007f80:	ffc00000 	.word	0xffc00000
 8007f84:	41dfffff 	.word	0x41dfffff
 8007f88:	94a03595 	.word	0x94a03595
 8007f8c:	3fcfffff 	.word	0x3fcfffff

08007f90 <_strtod_r>:
 8007f90:	4b01      	ldr	r3, [pc, #4]	@ (8007f98 <_strtod_r+0x8>)
 8007f92:	f7ff ba19 	b.w	80073c8 <_strtod_l>
 8007f96:	bf00      	nop
 8007f98:	20000080 	.word	0x20000080

08007f9c <_strtol_l.constprop.0>:
 8007f9c:	2b24      	cmp	r3, #36	@ 0x24
 8007f9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fa2:	4686      	mov	lr, r0
 8007fa4:	4690      	mov	r8, r2
 8007fa6:	d801      	bhi.n	8007fac <_strtol_l.constprop.0+0x10>
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d106      	bne.n	8007fba <_strtol_l.constprop.0+0x1e>
 8007fac:	f7fd fdba 	bl	8005b24 <__errno>
 8007fb0:	2316      	movs	r3, #22
 8007fb2:	6003      	str	r3, [r0, #0]
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fba:	4834      	ldr	r0, [pc, #208]	@ (800808c <_strtol_l.constprop.0+0xf0>)
 8007fbc:	460d      	mov	r5, r1
 8007fbe:	462a      	mov	r2, r5
 8007fc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007fc4:	5d06      	ldrb	r6, [r0, r4]
 8007fc6:	f016 0608 	ands.w	r6, r6, #8
 8007fca:	d1f8      	bne.n	8007fbe <_strtol_l.constprop.0+0x22>
 8007fcc:	2c2d      	cmp	r4, #45	@ 0x2d
 8007fce:	d12d      	bne.n	800802c <_strtol_l.constprop.0+0x90>
 8007fd0:	782c      	ldrb	r4, [r5, #0]
 8007fd2:	2601      	movs	r6, #1
 8007fd4:	1c95      	adds	r5, r2, #2
 8007fd6:	f033 0210 	bics.w	r2, r3, #16
 8007fda:	d109      	bne.n	8007ff0 <_strtol_l.constprop.0+0x54>
 8007fdc:	2c30      	cmp	r4, #48	@ 0x30
 8007fde:	d12a      	bne.n	8008036 <_strtol_l.constprop.0+0x9a>
 8007fe0:	782a      	ldrb	r2, [r5, #0]
 8007fe2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007fe6:	2a58      	cmp	r2, #88	@ 0x58
 8007fe8:	d125      	bne.n	8008036 <_strtol_l.constprop.0+0x9a>
 8007fea:	786c      	ldrb	r4, [r5, #1]
 8007fec:	2310      	movs	r3, #16
 8007fee:	3502      	adds	r5, #2
 8007ff0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007ff4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	fbbc f9f3 	udiv	r9, ip, r3
 8007ffe:	4610      	mov	r0, r2
 8008000:	fb03 ca19 	mls	sl, r3, r9, ip
 8008004:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008008:	2f09      	cmp	r7, #9
 800800a:	d81b      	bhi.n	8008044 <_strtol_l.constprop.0+0xa8>
 800800c:	463c      	mov	r4, r7
 800800e:	42a3      	cmp	r3, r4
 8008010:	dd27      	ble.n	8008062 <_strtol_l.constprop.0+0xc6>
 8008012:	1c57      	adds	r7, r2, #1
 8008014:	d007      	beq.n	8008026 <_strtol_l.constprop.0+0x8a>
 8008016:	4581      	cmp	r9, r0
 8008018:	d320      	bcc.n	800805c <_strtol_l.constprop.0+0xc0>
 800801a:	d101      	bne.n	8008020 <_strtol_l.constprop.0+0x84>
 800801c:	45a2      	cmp	sl, r4
 800801e:	db1d      	blt.n	800805c <_strtol_l.constprop.0+0xc0>
 8008020:	fb00 4003 	mla	r0, r0, r3, r4
 8008024:	2201      	movs	r2, #1
 8008026:	f815 4b01 	ldrb.w	r4, [r5], #1
 800802a:	e7eb      	b.n	8008004 <_strtol_l.constprop.0+0x68>
 800802c:	2c2b      	cmp	r4, #43	@ 0x2b
 800802e:	bf04      	itt	eq
 8008030:	782c      	ldrbeq	r4, [r5, #0]
 8008032:	1c95      	addeq	r5, r2, #2
 8008034:	e7cf      	b.n	8007fd6 <_strtol_l.constprop.0+0x3a>
 8008036:	2b00      	cmp	r3, #0
 8008038:	d1da      	bne.n	8007ff0 <_strtol_l.constprop.0+0x54>
 800803a:	2c30      	cmp	r4, #48	@ 0x30
 800803c:	bf0c      	ite	eq
 800803e:	2308      	moveq	r3, #8
 8008040:	230a      	movne	r3, #10
 8008042:	e7d5      	b.n	8007ff0 <_strtol_l.constprop.0+0x54>
 8008044:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008048:	2f19      	cmp	r7, #25
 800804a:	d801      	bhi.n	8008050 <_strtol_l.constprop.0+0xb4>
 800804c:	3c37      	subs	r4, #55	@ 0x37
 800804e:	e7de      	b.n	800800e <_strtol_l.constprop.0+0x72>
 8008050:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008054:	2f19      	cmp	r7, #25
 8008056:	d804      	bhi.n	8008062 <_strtol_l.constprop.0+0xc6>
 8008058:	3c57      	subs	r4, #87	@ 0x57
 800805a:	e7d8      	b.n	800800e <_strtol_l.constprop.0+0x72>
 800805c:	f04f 32ff 	mov.w	r2, #4294967295
 8008060:	e7e1      	b.n	8008026 <_strtol_l.constprop.0+0x8a>
 8008062:	1c53      	adds	r3, r2, #1
 8008064:	d108      	bne.n	8008078 <_strtol_l.constprop.0+0xdc>
 8008066:	2322      	movs	r3, #34	@ 0x22
 8008068:	f8ce 3000 	str.w	r3, [lr]
 800806c:	4660      	mov	r0, ip
 800806e:	f1b8 0f00 	cmp.w	r8, #0
 8008072:	d0a0      	beq.n	8007fb6 <_strtol_l.constprop.0+0x1a>
 8008074:	1e69      	subs	r1, r5, #1
 8008076:	e006      	b.n	8008086 <_strtol_l.constprop.0+0xea>
 8008078:	b106      	cbz	r6, 800807c <_strtol_l.constprop.0+0xe0>
 800807a:	4240      	negs	r0, r0
 800807c:	f1b8 0f00 	cmp.w	r8, #0
 8008080:	d099      	beq.n	8007fb6 <_strtol_l.constprop.0+0x1a>
 8008082:	2a00      	cmp	r2, #0
 8008084:	d1f6      	bne.n	8008074 <_strtol_l.constprop.0+0xd8>
 8008086:	f8c8 1000 	str.w	r1, [r8]
 800808a:	e794      	b.n	8007fb6 <_strtol_l.constprop.0+0x1a>
 800808c:	08009549 	.word	0x08009549

08008090 <_strtol_r>:
 8008090:	f7ff bf84 	b.w	8007f9c <_strtol_l.constprop.0>

08008094 <__ssputs_r>:
 8008094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008098:	688e      	ldr	r6, [r1, #8]
 800809a:	461f      	mov	r7, r3
 800809c:	42be      	cmp	r6, r7
 800809e:	680b      	ldr	r3, [r1, #0]
 80080a0:	4682      	mov	sl, r0
 80080a2:	460c      	mov	r4, r1
 80080a4:	4690      	mov	r8, r2
 80080a6:	d82d      	bhi.n	8008104 <__ssputs_r+0x70>
 80080a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80080ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80080b0:	d026      	beq.n	8008100 <__ssputs_r+0x6c>
 80080b2:	6965      	ldr	r5, [r4, #20]
 80080b4:	6909      	ldr	r1, [r1, #16]
 80080b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080ba:	eba3 0901 	sub.w	r9, r3, r1
 80080be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080c2:	1c7b      	adds	r3, r7, #1
 80080c4:	444b      	add	r3, r9
 80080c6:	106d      	asrs	r5, r5, #1
 80080c8:	429d      	cmp	r5, r3
 80080ca:	bf38      	it	cc
 80080cc:	461d      	movcc	r5, r3
 80080ce:	0553      	lsls	r3, r2, #21
 80080d0:	d527      	bpl.n	8008122 <__ssputs_r+0x8e>
 80080d2:	4629      	mov	r1, r5
 80080d4:	f7fe fc1c 	bl	8006910 <_malloc_r>
 80080d8:	4606      	mov	r6, r0
 80080da:	b360      	cbz	r0, 8008136 <__ssputs_r+0xa2>
 80080dc:	6921      	ldr	r1, [r4, #16]
 80080de:	464a      	mov	r2, r9
 80080e0:	f000 fa18 	bl	8008514 <memcpy>
 80080e4:	89a3      	ldrh	r3, [r4, #12]
 80080e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80080ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080ee:	81a3      	strh	r3, [r4, #12]
 80080f0:	6126      	str	r6, [r4, #16]
 80080f2:	6165      	str	r5, [r4, #20]
 80080f4:	444e      	add	r6, r9
 80080f6:	eba5 0509 	sub.w	r5, r5, r9
 80080fa:	6026      	str	r6, [r4, #0]
 80080fc:	60a5      	str	r5, [r4, #8]
 80080fe:	463e      	mov	r6, r7
 8008100:	42be      	cmp	r6, r7
 8008102:	d900      	bls.n	8008106 <__ssputs_r+0x72>
 8008104:	463e      	mov	r6, r7
 8008106:	6820      	ldr	r0, [r4, #0]
 8008108:	4632      	mov	r2, r6
 800810a:	4641      	mov	r1, r8
 800810c:	f000 f9c6 	bl	800849c <memmove>
 8008110:	68a3      	ldr	r3, [r4, #8]
 8008112:	1b9b      	subs	r3, r3, r6
 8008114:	60a3      	str	r3, [r4, #8]
 8008116:	6823      	ldr	r3, [r4, #0]
 8008118:	4433      	add	r3, r6
 800811a:	6023      	str	r3, [r4, #0]
 800811c:	2000      	movs	r0, #0
 800811e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008122:	462a      	mov	r2, r5
 8008124:	f000 fd89 	bl	8008c3a <_realloc_r>
 8008128:	4606      	mov	r6, r0
 800812a:	2800      	cmp	r0, #0
 800812c:	d1e0      	bne.n	80080f0 <__ssputs_r+0x5c>
 800812e:	6921      	ldr	r1, [r4, #16]
 8008130:	4650      	mov	r0, sl
 8008132:	f7fe fb79 	bl	8006828 <_free_r>
 8008136:	230c      	movs	r3, #12
 8008138:	f8ca 3000 	str.w	r3, [sl]
 800813c:	89a3      	ldrh	r3, [r4, #12]
 800813e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008142:	81a3      	strh	r3, [r4, #12]
 8008144:	f04f 30ff 	mov.w	r0, #4294967295
 8008148:	e7e9      	b.n	800811e <__ssputs_r+0x8a>
	...

0800814c <_svfiprintf_r>:
 800814c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008150:	4698      	mov	r8, r3
 8008152:	898b      	ldrh	r3, [r1, #12]
 8008154:	061b      	lsls	r3, r3, #24
 8008156:	b09d      	sub	sp, #116	@ 0x74
 8008158:	4607      	mov	r7, r0
 800815a:	460d      	mov	r5, r1
 800815c:	4614      	mov	r4, r2
 800815e:	d510      	bpl.n	8008182 <_svfiprintf_r+0x36>
 8008160:	690b      	ldr	r3, [r1, #16]
 8008162:	b973      	cbnz	r3, 8008182 <_svfiprintf_r+0x36>
 8008164:	2140      	movs	r1, #64	@ 0x40
 8008166:	f7fe fbd3 	bl	8006910 <_malloc_r>
 800816a:	6028      	str	r0, [r5, #0]
 800816c:	6128      	str	r0, [r5, #16]
 800816e:	b930      	cbnz	r0, 800817e <_svfiprintf_r+0x32>
 8008170:	230c      	movs	r3, #12
 8008172:	603b      	str	r3, [r7, #0]
 8008174:	f04f 30ff 	mov.w	r0, #4294967295
 8008178:	b01d      	add	sp, #116	@ 0x74
 800817a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800817e:	2340      	movs	r3, #64	@ 0x40
 8008180:	616b      	str	r3, [r5, #20]
 8008182:	2300      	movs	r3, #0
 8008184:	9309      	str	r3, [sp, #36]	@ 0x24
 8008186:	2320      	movs	r3, #32
 8008188:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800818c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008190:	2330      	movs	r3, #48	@ 0x30
 8008192:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008330 <_svfiprintf_r+0x1e4>
 8008196:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800819a:	f04f 0901 	mov.w	r9, #1
 800819e:	4623      	mov	r3, r4
 80081a0:	469a      	mov	sl, r3
 80081a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081a6:	b10a      	cbz	r2, 80081ac <_svfiprintf_r+0x60>
 80081a8:	2a25      	cmp	r2, #37	@ 0x25
 80081aa:	d1f9      	bne.n	80081a0 <_svfiprintf_r+0x54>
 80081ac:	ebba 0b04 	subs.w	fp, sl, r4
 80081b0:	d00b      	beq.n	80081ca <_svfiprintf_r+0x7e>
 80081b2:	465b      	mov	r3, fp
 80081b4:	4622      	mov	r2, r4
 80081b6:	4629      	mov	r1, r5
 80081b8:	4638      	mov	r0, r7
 80081ba:	f7ff ff6b 	bl	8008094 <__ssputs_r>
 80081be:	3001      	adds	r0, #1
 80081c0:	f000 80a7 	beq.w	8008312 <_svfiprintf_r+0x1c6>
 80081c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081c6:	445a      	add	r2, fp
 80081c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80081ca:	f89a 3000 	ldrb.w	r3, [sl]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	f000 809f 	beq.w	8008312 <_svfiprintf_r+0x1c6>
 80081d4:	2300      	movs	r3, #0
 80081d6:	f04f 32ff 	mov.w	r2, #4294967295
 80081da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081de:	f10a 0a01 	add.w	sl, sl, #1
 80081e2:	9304      	str	r3, [sp, #16]
 80081e4:	9307      	str	r3, [sp, #28]
 80081e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80081ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80081ec:	4654      	mov	r4, sl
 80081ee:	2205      	movs	r2, #5
 80081f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081f4:	484e      	ldr	r0, [pc, #312]	@ (8008330 <_svfiprintf_r+0x1e4>)
 80081f6:	f7f7 ffeb 	bl	80001d0 <memchr>
 80081fa:	9a04      	ldr	r2, [sp, #16]
 80081fc:	b9d8      	cbnz	r0, 8008236 <_svfiprintf_r+0xea>
 80081fe:	06d0      	lsls	r0, r2, #27
 8008200:	bf44      	itt	mi
 8008202:	2320      	movmi	r3, #32
 8008204:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008208:	0711      	lsls	r1, r2, #28
 800820a:	bf44      	itt	mi
 800820c:	232b      	movmi	r3, #43	@ 0x2b
 800820e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008212:	f89a 3000 	ldrb.w	r3, [sl]
 8008216:	2b2a      	cmp	r3, #42	@ 0x2a
 8008218:	d015      	beq.n	8008246 <_svfiprintf_r+0xfa>
 800821a:	9a07      	ldr	r2, [sp, #28]
 800821c:	4654      	mov	r4, sl
 800821e:	2000      	movs	r0, #0
 8008220:	f04f 0c0a 	mov.w	ip, #10
 8008224:	4621      	mov	r1, r4
 8008226:	f811 3b01 	ldrb.w	r3, [r1], #1
 800822a:	3b30      	subs	r3, #48	@ 0x30
 800822c:	2b09      	cmp	r3, #9
 800822e:	d94b      	bls.n	80082c8 <_svfiprintf_r+0x17c>
 8008230:	b1b0      	cbz	r0, 8008260 <_svfiprintf_r+0x114>
 8008232:	9207      	str	r2, [sp, #28]
 8008234:	e014      	b.n	8008260 <_svfiprintf_r+0x114>
 8008236:	eba0 0308 	sub.w	r3, r0, r8
 800823a:	fa09 f303 	lsl.w	r3, r9, r3
 800823e:	4313      	orrs	r3, r2
 8008240:	9304      	str	r3, [sp, #16]
 8008242:	46a2      	mov	sl, r4
 8008244:	e7d2      	b.n	80081ec <_svfiprintf_r+0xa0>
 8008246:	9b03      	ldr	r3, [sp, #12]
 8008248:	1d19      	adds	r1, r3, #4
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	9103      	str	r1, [sp, #12]
 800824e:	2b00      	cmp	r3, #0
 8008250:	bfbb      	ittet	lt
 8008252:	425b      	neglt	r3, r3
 8008254:	f042 0202 	orrlt.w	r2, r2, #2
 8008258:	9307      	strge	r3, [sp, #28]
 800825a:	9307      	strlt	r3, [sp, #28]
 800825c:	bfb8      	it	lt
 800825e:	9204      	strlt	r2, [sp, #16]
 8008260:	7823      	ldrb	r3, [r4, #0]
 8008262:	2b2e      	cmp	r3, #46	@ 0x2e
 8008264:	d10a      	bne.n	800827c <_svfiprintf_r+0x130>
 8008266:	7863      	ldrb	r3, [r4, #1]
 8008268:	2b2a      	cmp	r3, #42	@ 0x2a
 800826a:	d132      	bne.n	80082d2 <_svfiprintf_r+0x186>
 800826c:	9b03      	ldr	r3, [sp, #12]
 800826e:	1d1a      	adds	r2, r3, #4
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	9203      	str	r2, [sp, #12]
 8008274:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008278:	3402      	adds	r4, #2
 800827a:	9305      	str	r3, [sp, #20]
 800827c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008340 <_svfiprintf_r+0x1f4>
 8008280:	7821      	ldrb	r1, [r4, #0]
 8008282:	2203      	movs	r2, #3
 8008284:	4650      	mov	r0, sl
 8008286:	f7f7 ffa3 	bl	80001d0 <memchr>
 800828a:	b138      	cbz	r0, 800829c <_svfiprintf_r+0x150>
 800828c:	9b04      	ldr	r3, [sp, #16]
 800828e:	eba0 000a 	sub.w	r0, r0, sl
 8008292:	2240      	movs	r2, #64	@ 0x40
 8008294:	4082      	lsls	r2, r0
 8008296:	4313      	orrs	r3, r2
 8008298:	3401      	adds	r4, #1
 800829a:	9304      	str	r3, [sp, #16]
 800829c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082a0:	4824      	ldr	r0, [pc, #144]	@ (8008334 <_svfiprintf_r+0x1e8>)
 80082a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80082a6:	2206      	movs	r2, #6
 80082a8:	f7f7 ff92 	bl	80001d0 <memchr>
 80082ac:	2800      	cmp	r0, #0
 80082ae:	d036      	beq.n	800831e <_svfiprintf_r+0x1d2>
 80082b0:	4b21      	ldr	r3, [pc, #132]	@ (8008338 <_svfiprintf_r+0x1ec>)
 80082b2:	bb1b      	cbnz	r3, 80082fc <_svfiprintf_r+0x1b0>
 80082b4:	9b03      	ldr	r3, [sp, #12]
 80082b6:	3307      	adds	r3, #7
 80082b8:	f023 0307 	bic.w	r3, r3, #7
 80082bc:	3308      	adds	r3, #8
 80082be:	9303      	str	r3, [sp, #12]
 80082c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082c2:	4433      	add	r3, r6
 80082c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80082c6:	e76a      	b.n	800819e <_svfiprintf_r+0x52>
 80082c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80082cc:	460c      	mov	r4, r1
 80082ce:	2001      	movs	r0, #1
 80082d0:	e7a8      	b.n	8008224 <_svfiprintf_r+0xd8>
 80082d2:	2300      	movs	r3, #0
 80082d4:	3401      	adds	r4, #1
 80082d6:	9305      	str	r3, [sp, #20]
 80082d8:	4619      	mov	r1, r3
 80082da:	f04f 0c0a 	mov.w	ip, #10
 80082de:	4620      	mov	r0, r4
 80082e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082e4:	3a30      	subs	r2, #48	@ 0x30
 80082e6:	2a09      	cmp	r2, #9
 80082e8:	d903      	bls.n	80082f2 <_svfiprintf_r+0x1a6>
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d0c6      	beq.n	800827c <_svfiprintf_r+0x130>
 80082ee:	9105      	str	r1, [sp, #20]
 80082f0:	e7c4      	b.n	800827c <_svfiprintf_r+0x130>
 80082f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80082f6:	4604      	mov	r4, r0
 80082f8:	2301      	movs	r3, #1
 80082fa:	e7f0      	b.n	80082de <_svfiprintf_r+0x192>
 80082fc:	ab03      	add	r3, sp, #12
 80082fe:	9300      	str	r3, [sp, #0]
 8008300:	462a      	mov	r2, r5
 8008302:	4b0e      	ldr	r3, [pc, #56]	@ (800833c <_svfiprintf_r+0x1f0>)
 8008304:	a904      	add	r1, sp, #16
 8008306:	4638      	mov	r0, r7
 8008308:	f7fc fcc8 	bl	8004c9c <_printf_float>
 800830c:	1c42      	adds	r2, r0, #1
 800830e:	4606      	mov	r6, r0
 8008310:	d1d6      	bne.n	80082c0 <_svfiprintf_r+0x174>
 8008312:	89ab      	ldrh	r3, [r5, #12]
 8008314:	065b      	lsls	r3, r3, #25
 8008316:	f53f af2d 	bmi.w	8008174 <_svfiprintf_r+0x28>
 800831a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800831c:	e72c      	b.n	8008178 <_svfiprintf_r+0x2c>
 800831e:	ab03      	add	r3, sp, #12
 8008320:	9300      	str	r3, [sp, #0]
 8008322:	462a      	mov	r2, r5
 8008324:	4b05      	ldr	r3, [pc, #20]	@ (800833c <_svfiprintf_r+0x1f0>)
 8008326:	a904      	add	r1, sp, #16
 8008328:	4638      	mov	r0, r7
 800832a:	f7fc ff4f 	bl	80051cc <_printf_i>
 800832e:	e7ed      	b.n	800830c <_svfiprintf_r+0x1c0>
 8008330:	08009649 	.word	0x08009649
 8008334:	08009653 	.word	0x08009653
 8008338:	08004c9d 	.word	0x08004c9d
 800833c:	08008095 	.word	0x08008095
 8008340:	0800964f 	.word	0x0800964f

08008344 <__sflush_r>:
 8008344:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800834c:	0716      	lsls	r6, r2, #28
 800834e:	4605      	mov	r5, r0
 8008350:	460c      	mov	r4, r1
 8008352:	d454      	bmi.n	80083fe <__sflush_r+0xba>
 8008354:	684b      	ldr	r3, [r1, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	dc02      	bgt.n	8008360 <__sflush_r+0x1c>
 800835a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800835c:	2b00      	cmp	r3, #0
 800835e:	dd48      	ble.n	80083f2 <__sflush_r+0xae>
 8008360:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008362:	2e00      	cmp	r6, #0
 8008364:	d045      	beq.n	80083f2 <__sflush_r+0xae>
 8008366:	2300      	movs	r3, #0
 8008368:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800836c:	682f      	ldr	r7, [r5, #0]
 800836e:	6a21      	ldr	r1, [r4, #32]
 8008370:	602b      	str	r3, [r5, #0]
 8008372:	d030      	beq.n	80083d6 <__sflush_r+0x92>
 8008374:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008376:	89a3      	ldrh	r3, [r4, #12]
 8008378:	0759      	lsls	r1, r3, #29
 800837a:	d505      	bpl.n	8008388 <__sflush_r+0x44>
 800837c:	6863      	ldr	r3, [r4, #4]
 800837e:	1ad2      	subs	r2, r2, r3
 8008380:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008382:	b10b      	cbz	r3, 8008388 <__sflush_r+0x44>
 8008384:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008386:	1ad2      	subs	r2, r2, r3
 8008388:	2300      	movs	r3, #0
 800838a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800838c:	6a21      	ldr	r1, [r4, #32]
 800838e:	4628      	mov	r0, r5
 8008390:	47b0      	blx	r6
 8008392:	1c43      	adds	r3, r0, #1
 8008394:	89a3      	ldrh	r3, [r4, #12]
 8008396:	d106      	bne.n	80083a6 <__sflush_r+0x62>
 8008398:	6829      	ldr	r1, [r5, #0]
 800839a:	291d      	cmp	r1, #29
 800839c:	d82b      	bhi.n	80083f6 <__sflush_r+0xb2>
 800839e:	4a2a      	ldr	r2, [pc, #168]	@ (8008448 <__sflush_r+0x104>)
 80083a0:	410a      	asrs	r2, r1
 80083a2:	07d6      	lsls	r6, r2, #31
 80083a4:	d427      	bmi.n	80083f6 <__sflush_r+0xb2>
 80083a6:	2200      	movs	r2, #0
 80083a8:	6062      	str	r2, [r4, #4]
 80083aa:	04d9      	lsls	r1, r3, #19
 80083ac:	6922      	ldr	r2, [r4, #16]
 80083ae:	6022      	str	r2, [r4, #0]
 80083b0:	d504      	bpl.n	80083bc <__sflush_r+0x78>
 80083b2:	1c42      	adds	r2, r0, #1
 80083b4:	d101      	bne.n	80083ba <__sflush_r+0x76>
 80083b6:	682b      	ldr	r3, [r5, #0]
 80083b8:	b903      	cbnz	r3, 80083bc <__sflush_r+0x78>
 80083ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80083bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083be:	602f      	str	r7, [r5, #0]
 80083c0:	b1b9      	cbz	r1, 80083f2 <__sflush_r+0xae>
 80083c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083c6:	4299      	cmp	r1, r3
 80083c8:	d002      	beq.n	80083d0 <__sflush_r+0x8c>
 80083ca:	4628      	mov	r0, r5
 80083cc:	f7fe fa2c 	bl	8006828 <_free_r>
 80083d0:	2300      	movs	r3, #0
 80083d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80083d4:	e00d      	b.n	80083f2 <__sflush_r+0xae>
 80083d6:	2301      	movs	r3, #1
 80083d8:	4628      	mov	r0, r5
 80083da:	47b0      	blx	r6
 80083dc:	4602      	mov	r2, r0
 80083de:	1c50      	adds	r0, r2, #1
 80083e0:	d1c9      	bne.n	8008376 <__sflush_r+0x32>
 80083e2:	682b      	ldr	r3, [r5, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d0c6      	beq.n	8008376 <__sflush_r+0x32>
 80083e8:	2b1d      	cmp	r3, #29
 80083ea:	d001      	beq.n	80083f0 <__sflush_r+0xac>
 80083ec:	2b16      	cmp	r3, #22
 80083ee:	d11e      	bne.n	800842e <__sflush_r+0xea>
 80083f0:	602f      	str	r7, [r5, #0]
 80083f2:	2000      	movs	r0, #0
 80083f4:	e022      	b.n	800843c <__sflush_r+0xf8>
 80083f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083fa:	b21b      	sxth	r3, r3
 80083fc:	e01b      	b.n	8008436 <__sflush_r+0xf2>
 80083fe:	690f      	ldr	r7, [r1, #16]
 8008400:	2f00      	cmp	r7, #0
 8008402:	d0f6      	beq.n	80083f2 <__sflush_r+0xae>
 8008404:	0793      	lsls	r3, r2, #30
 8008406:	680e      	ldr	r6, [r1, #0]
 8008408:	bf08      	it	eq
 800840a:	694b      	ldreq	r3, [r1, #20]
 800840c:	600f      	str	r7, [r1, #0]
 800840e:	bf18      	it	ne
 8008410:	2300      	movne	r3, #0
 8008412:	eba6 0807 	sub.w	r8, r6, r7
 8008416:	608b      	str	r3, [r1, #8]
 8008418:	f1b8 0f00 	cmp.w	r8, #0
 800841c:	dde9      	ble.n	80083f2 <__sflush_r+0xae>
 800841e:	6a21      	ldr	r1, [r4, #32]
 8008420:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008422:	4643      	mov	r3, r8
 8008424:	463a      	mov	r2, r7
 8008426:	4628      	mov	r0, r5
 8008428:	47b0      	blx	r6
 800842a:	2800      	cmp	r0, #0
 800842c:	dc08      	bgt.n	8008440 <__sflush_r+0xfc>
 800842e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008432:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008436:	81a3      	strh	r3, [r4, #12]
 8008438:	f04f 30ff 	mov.w	r0, #4294967295
 800843c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008440:	4407      	add	r7, r0
 8008442:	eba8 0800 	sub.w	r8, r8, r0
 8008446:	e7e7      	b.n	8008418 <__sflush_r+0xd4>
 8008448:	dfbffffe 	.word	0xdfbffffe

0800844c <_fflush_r>:
 800844c:	b538      	push	{r3, r4, r5, lr}
 800844e:	690b      	ldr	r3, [r1, #16]
 8008450:	4605      	mov	r5, r0
 8008452:	460c      	mov	r4, r1
 8008454:	b913      	cbnz	r3, 800845c <_fflush_r+0x10>
 8008456:	2500      	movs	r5, #0
 8008458:	4628      	mov	r0, r5
 800845a:	bd38      	pop	{r3, r4, r5, pc}
 800845c:	b118      	cbz	r0, 8008466 <_fflush_r+0x1a>
 800845e:	6a03      	ldr	r3, [r0, #32]
 8008460:	b90b      	cbnz	r3, 8008466 <_fflush_r+0x1a>
 8008462:	f7fd fa73 	bl	800594c <__sinit>
 8008466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d0f3      	beq.n	8008456 <_fflush_r+0xa>
 800846e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008470:	07d0      	lsls	r0, r2, #31
 8008472:	d404      	bmi.n	800847e <_fflush_r+0x32>
 8008474:	0599      	lsls	r1, r3, #22
 8008476:	d402      	bmi.n	800847e <_fflush_r+0x32>
 8008478:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800847a:	f7fd fb7e 	bl	8005b7a <__retarget_lock_acquire_recursive>
 800847e:	4628      	mov	r0, r5
 8008480:	4621      	mov	r1, r4
 8008482:	f7ff ff5f 	bl	8008344 <__sflush_r>
 8008486:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008488:	07da      	lsls	r2, r3, #31
 800848a:	4605      	mov	r5, r0
 800848c:	d4e4      	bmi.n	8008458 <_fflush_r+0xc>
 800848e:	89a3      	ldrh	r3, [r4, #12]
 8008490:	059b      	lsls	r3, r3, #22
 8008492:	d4e1      	bmi.n	8008458 <_fflush_r+0xc>
 8008494:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008496:	f7fd fb71 	bl	8005b7c <__retarget_lock_release_recursive>
 800849a:	e7dd      	b.n	8008458 <_fflush_r+0xc>

0800849c <memmove>:
 800849c:	4288      	cmp	r0, r1
 800849e:	b510      	push	{r4, lr}
 80084a0:	eb01 0402 	add.w	r4, r1, r2
 80084a4:	d902      	bls.n	80084ac <memmove+0x10>
 80084a6:	4284      	cmp	r4, r0
 80084a8:	4623      	mov	r3, r4
 80084aa:	d807      	bhi.n	80084bc <memmove+0x20>
 80084ac:	1e43      	subs	r3, r0, #1
 80084ae:	42a1      	cmp	r1, r4
 80084b0:	d008      	beq.n	80084c4 <memmove+0x28>
 80084b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084ba:	e7f8      	b.n	80084ae <memmove+0x12>
 80084bc:	4402      	add	r2, r0
 80084be:	4601      	mov	r1, r0
 80084c0:	428a      	cmp	r2, r1
 80084c2:	d100      	bne.n	80084c6 <memmove+0x2a>
 80084c4:	bd10      	pop	{r4, pc}
 80084c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80084ce:	e7f7      	b.n	80084c0 <memmove+0x24>

080084d0 <strncmp>:
 80084d0:	b510      	push	{r4, lr}
 80084d2:	b16a      	cbz	r2, 80084f0 <strncmp+0x20>
 80084d4:	3901      	subs	r1, #1
 80084d6:	1884      	adds	r4, r0, r2
 80084d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d103      	bne.n	80084ec <strncmp+0x1c>
 80084e4:	42a0      	cmp	r0, r4
 80084e6:	d001      	beq.n	80084ec <strncmp+0x1c>
 80084e8:	2a00      	cmp	r2, #0
 80084ea:	d1f5      	bne.n	80084d8 <strncmp+0x8>
 80084ec:	1ad0      	subs	r0, r2, r3
 80084ee:	bd10      	pop	{r4, pc}
 80084f0:	4610      	mov	r0, r2
 80084f2:	e7fc      	b.n	80084ee <strncmp+0x1e>

080084f4 <_sbrk_r>:
 80084f4:	b538      	push	{r3, r4, r5, lr}
 80084f6:	4d06      	ldr	r5, [pc, #24]	@ (8008510 <_sbrk_r+0x1c>)
 80084f8:	2300      	movs	r3, #0
 80084fa:	4604      	mov	r4, r0
 80084fc:	4608      	mov	r0, r1
 80084fe:	602b      	str	r3, [r5, #0]
 8008500:	f7f9 f94e 	bl	80017a0 <_sbrk>
 8008504:	1c43      	adds	r3, r0, #1
 8008506:	d102      	bne.n	800850e <_sbrk_r+0x1a>
 8008508:	682b      	ldr	r3, [r5, #0]
 800850a:	b103      	cbz	r3, 800850e <_sbrk_r+0x1a>
 800850c:	6023      	str	r3, [r4, #0]
 800850e:	bd38      	pop	{r3, r4, r5, pc}
 8008510:	20000478 	.word	0x20000478

08008514 <memcpy>:
 8008514:	440a      	add	r2, r1
 8008516:	4291      	cmp	r1, r2
 8008518:	f100 33ff 	add.w	r3, r0, #4294967295
 800851c:	d100      	bne.n	8008520 <memcpy+0xc>
 800851e:	4770      	bx	lr
 8008520:	b510      	push	{r4, lr}
 8008522:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008526:	f803 4f01 	strb.w	r4, [r3, #1]!
 800852a:	4291      	cmp	r1, r2
 800852c:	d1f9      	bne.n	8008522 <memcpy+0xe>
 800852e:	bd10      	pop	{r4, pc}

08008530 <nan>:
 8008530:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008538 <nan+0x8>
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop
 8008538:	00000000 	.word	0x00000000
 800853c:	7ff80000 	.word	0x7ff80000

08008540 <__assert_func>:
 8008540:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008542:	4614      	mov	r4, r2
 8008544:	461a      	mov	r2, r3
 8008546:	4b09      	ldr	r3, [pc, #36]	@ (800856c <__assert_func+0x2c>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4605      	mov	r5, r0
 800854c:	68d8      	ldr	r0, [r3, #12]
 800854e:	b954      	cbnz	r4, 8008566 <__assert_func+0x26>
 8008550:	4b07      	ldr	r3, [pc, #28]	@ (8008570 <__assert_func+0x30>)
 8008552:	461c      	mov	r4, r3
 8008554:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008558:	9100      	str	r1, [sp, #0]
 800855a:	462b      	mov	r3, r5
 800855c:	4905      	ldr	r1, [pc, #20]	@ (8008574 <__assert_func+0x34>)
 800855e:	f000 fba7 	bl	8008cb0 <fiprintf>
 8008562:	f000 fbb7 	bl	8008cd4 <abort>
 8008566:	4b04      	ldr	r3, [pc, #16]	@ (8008578 <__assert_func+0x38>)
 8008568:	e7f4      	b.n	8008554 <__assert_func+0x14>
 800856a:	bf00      	nop
 800856c:	20000030 	.word	0x20000030
 8008570:	0800969d 	.word	0x0800969d
 8008574:	0800966f 	.word	0x0800966f
 8008578:	08009662 	.word	0x08009662

0800857c <_calloc_r>:
 800857c:	b570      	push	{r4, r5, r6, lr}
 800857e:	fba1 5402 	umull	r5, r4, r1, r2
 8008582:	b93c      	cbnz	r4, 8008594 <_calloc_r+0x18>
 8008584:	4629      	mov	r1, r5
 8008586:	f7fe f9c3 	bl	8006910 <_malloc_r>
 800858a:	4606      	mov	r6, r0
 800858c:	b928      	cbnz	r0, 800859a <_calloc_r+0x1e>
 800858e:	2600      	movs	r6, #0
 8008590:	4630      	mov	r0, r6
 8008592:	bd70      	pop	{r4, r5, r6, pc}
 8008594:	220c      	movs	r2, #12
 8008596:	6002      	str	r2, [r0, #0]
 8008598:	e7f9      	b.n	800858e <_calloc_r+0x12>
 800859a:	462a      	mov	r2, r5
 800859c:	4621      	mov	r1, r4
 800859e:	f7fd fa6e 	bl	8005a7e <memset>
 80085a2:	e7f5      	b.n	8008590 <_calloc_r+0x14>

080085a4 <rshift>:
 80085a4:	6903      	ldr	r3, [r0, #16]
 80085a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80085aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80085ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 80085b2:	f100 0414 	add.w	r4, r0, #20
 80085b6:	dd45      	ble.n	8008644 <rshift+0xa0>
 80085b8:	f011 011f 	ands.w	r1, r1, #31
 80085bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80085c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80085c4:	d10c      	bne.n	80085e0 <rshift+0x3c>
 80085c6:	f100 0710 	add.w	r7, r0, #16
 80085ca:	4629      	mov	r1, r5
 80085cc:	42b1      	cmp	r1, r6
 80085ce:	d334      	bcc.n	800863a <rshift+0x96>
 80085d0:	1a9b      	subs	r3, r3, r2
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	1eea      	subs	r2, r5, #3
 80085d6:	4296      	cmp	r6, r2
 80085d8:	bf38      	it	cc
 80085da:	2300      	movcc	r3, #0
 80085dc:	4423      	add	r3, r4
 80085de:	e015      	b.n	800860c <rshift+0x68>
 80085e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80085e4:	f1c1 0820 	rsb	r8, r1, #32
 80085e8:	40cf      	lsrs	r7, r1
 80085ea:	f105 0e04 	add.w	lr, r5, #4
 80085ee:	46a1      	mov	r9, r4
 80085f0:	4576      	cmp	r6, lr
 80085f2:	46f4      	mov	ip, lr
 80085f4:	d815      	bhi.n	8008622 <rshift+0x7e>
 80085f6:	1a9a      	subs	r2, r3, r2
 80085f8:	0092      	lsls	r2, r2, #2
 80085fa:	3a04      	subs	r2, #4
 80085fc:	3501      	adds	r5, #1
 80085fe:	42ae      	cmp	r6, r5
 8008600:	bf38      	it	cc
 8008602:	2200      	movcc	r2, #0
 8008604:	18a3      	adds	r3, r4, r2
 8008606:	50a7      	str	r7, [r4, r2]
 8008608:	b107      	cbz	r7, 800860c <rshift+0x68>
 800860a:	3304      	adds	r3, #4
 800860c:	1b1a      	subs	r2, r3, r4
 800860e:	42a3      	cmp	r3, r4
 8008610:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008614:	bf08      	it	eq
 8008616:	2300      	moveq	r3, #0
 8008618:	6102      	str	r2, [r0, #16]
 800861a:	bf08      	it	eq
 800861c:	6143      	streq	r3, [r0, #20]
 800861e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008622:	f8dc c000 	ldr.w	ip, [ip]
 8008626:	fa0c fc08 	lsl.w	ip, ip, r8
 800862a:	ea4c 0707 	orr.w	r7, ip, r7
 800862e:	f849 7b04 	str.w	r7, [r9], #4
 8008632:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008636:	40cf      	lsrs	r7, r1
 8008638:	e7da      	b.n	80085f0 <rshift+0x4c>
 800863a:	f851 cb04 	ldr.w	ip, [r1], #4
 800863e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008642:	e7c3      	b.n	80085cc <rshift+0x28>
 8008644:	4623      	mov	r3, r4
 8008646:	e7e1      	b.n	800860c <rshift+0x68>

08008648 <__hexdig_fun>:
 8008648:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800864c:	2b09      	cmp	r3, #9
 800864e:	d802      	bhi.n	8008656 <__hexdig_fun+0xe>
 8008650:	3820      	subs	r0, #32
 8008652:	b2c0      	uxtb	r0, r0
 8008654:	4770      	bx	lr
 8008656:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800865a:	2b05      	cmp	r3, #5
 800865c:	d801      	bhi.n	8008662 <__hexdig_fun+0x1a>
 800865e:	3847      	subs	r0, #71	@ 0x47
 8008660:	e7f7      	b.n	8008652 <__hexdig_fun+0xa>
 8008662:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008666:	2b05      	cmp	r3, #5
 8008668:	d801      	bhi.n	800866e <__hexdig_fun+0x26>
 800866a:	3827      	subs	r0, #39	@ 0x27
 800866c:	e7f1      	b.n	8008652 <__hexdig_fun+0xa>
 800866e:	2000      	movs	r0, #0
 8008670:	4770      	bx	lr
	...

08008674 <__gethex>:
 8008674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008678:	b085      	sub	sp, #20
 800867a:	468a      	mov	sl, r1
 800867c:	9302      	str	r3, [sp, #8]
 800867e:	680b      	ldr	r3, [r1, #0]
 8008680:	9001      	str	r0, [sp, #4]
 8008682:	4690      	mov	r8, r2
 8008684:	1c9c      	adds	r4, r3, #2
 8008686:	46a1      	mov	r9, r4
 8008688:	f814 0b01 	ldrb.w	r0, [r4], #1
 800868c:	2830      	cmp	r0, #48	@ 0x30
 800868e:	d0fa      	beq.n	8008686 <__gethex+0x12>
 8008690:	eba9 0303 	sub.w	r3, r9, r3
 8008694:	f1a3 0b02 	sub.w	fp, r3, #2
 8008698:	f7ff ffd6 	bl	8008648 <__hexdig_fun>
 800869c:	4605      	mov	r5, r0
 800869e:	2800      	cmp	r0, #0
 80086a0:	d168      	bne.n	8008774 <__gethex+0x100>
 80086a2:	49a0      	ldr	r1, [pc, #640]	@ (8008924 <__gethex+0x2b0>)
 80086a4:	2201      	movs	r2, #1
 80086a6:	4648      	mov	r0, r9
 80086a8:	f7ff ff12 	bl	80084d0 <strncmp>
 80086ac:	4607      	mov	r7, r0
 80086ae:	2800      	cmp	r0, #0
 80086b0:	d167      	bne.n	8008782 <__gethex+0x10e>
 80086b2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80086b6:	4626      	mov	r6, r4
 80086b8:	f7ff ffc6 	bl	8008648 <__hexdig_fun>
 80086bc:	2800      	cmp	r0, #0
 80086be:	d062      	beq.n	8008786 <__gethex+0x112>
 80086c0:	4623      	mov	r3, r4
 80086c2:	7818      	ldrb	r0, [r3, #0]
 80086c4:	2830      	cmp	r0, #48	@ 0x30
 80086c6:	4699      	mov	r9, r3
 80086c8:	f103 0301 	add.w	r3, r3, #1
 80086cc:	d0f9      	beq.n	80086c2 <__gethex+0x4e>
 80086ce:	f7ff ffbb 	bl	8008648 <__hexdig_fun>
 80086d2:	fab0 f580 	clz	r5, r0
 80086d6:	096d      	lsrs	r5, r5, #5
 80086d8:	f04f 0b01 	mov.w	fp, #1
 80086dc:	464a      	mov	r2, r9
 80086de:	4616      	mov	r6, r2
 80086e0:	3201      	adds	r2, #1
 80086e2:	7830      	ldrb	r0, [r6, #0]
 80086e4:	f7ff ffb0 	bl	8008648 <__hexdig_fun>
 80086e8:	2800      	cmp	r0, #0
 80086ea:	d1f8      	bne.n	80086de <__gethex+0x6a>
 80086ec:	498d      	ldr	r1, [pc, #564]	@ (8008924 <__gethex+0x2b0>)
 80086ee:	2201      	movs	r2, #1
 80086f0:	4630      	mov	r0, r6
 80086f2:	f7ff feed 	bl	80084d0 <strncmp>
 80086f6:	2800      	cmp	r0, #0
 80086f8:	d13f      	bne.n	800877a <__gethex+0x106>
 80086fa:	b944      	cbnz	r4, 800870e <__gethex+0x9a>
 80086fc:	1c74      	adds	r4, r6, #1
 80086fe:	4622      	mov	r2, r4
 8008700:	4616      	mov	r6, r2
 8008702:	3201      	adds	r2, #1
 8008704:	7830      	ldrb	r0, [r6, #0]
 8008706:	f7ff ff9f 	bl	8008648 <__hexdig_fun>
 800870a:	2800      	cmp	r0, #0
 800870c:	d1f8      	bne.n	8008700 <__gethex+0x8c>
 800870e:	1ba4      	subs	r4, r4, r6
 8008710:	00a7      	lsls	r7, r4, #2
 8008712:	7833      	ldrb	r3, [r6, #0]
 8008714:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008718:	2b50      	cmp	r3, #80	@ 0x50
 800871a:	d13e      	bne.n	800879a <__gethex+0x126>
 800871c:	7873      	ldrb	r3, [r6, #1]
 800871e:	2b2b      	cmp	r3, #43	@ 0x2b
 8008720:	d033      	beq.n	800878a <__gethex+0x116>
 8008722:	2b2d      	cmp	r3, #45	@ 0x2d
 8008724:	d034      	beq.n	8008790 <__gethex+0x11c>
 8008726:	1c71      	adds	r1, r6, #1
 8008728:	2400      	movs	r4, #0
 800872a:	7808      	ldrb	r0, [r1, #0]
 800872c:	f7ff ff8c 	bl	8008648 <__hexdig_fun>
 8008730:	1e43      	subs	r3, r0, #1
 8008732:	b2db      	uxtb	r3, r3
 8008734:	2b18      	cmp	r3, #24
 8008736:	d830      	bhi.n	800879a <__gethex+0x126>
 8008738:	f1a0 0210 	sub.w	r2, r0, #16
 800873c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008740:	f7ff ff82 	bl	8008648 <__hexdig_fun>
 8008744:	f100 3cff 	add.w	ip, r0, #4294967295
 8008748:	fa5f fc8c 	uxtb.w	ip, ip
 800874c:	f1bc 0f18 	cmp.w	ip, #24
 8008750:	f04f 030a 	mov.w	r3, #10
 8008754:	d91e      	bls.n	8008794 <__gethex+0x120>
 8008756:	b104      	cbz	r4, 800875a <__gethex+0xe6>
 8008758:	4252      	negs	r2, r2
 800875a:	4417      	add	r7, r2
 800875c:	f8ca 1000 	str.w	r1, [sl]
 8008760:	b1ed      	cbz	r5, 800879e <__gethex+0x12a>
 8008762:	f1bb 0f00 	cmp.w	fp, #0
 8008766:	bf0c      	ite	eq
 8008768:	2506      	moveq	r5, #6
 800876a:	2500      	movne	r5, #0
 800876c:	4628      	mov	r0, r5
 800876e:	b005      	add	sp, #20
 8008770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008774:	2500      	movs	r5, #0
 8008776:	462c      	mov	r4, r5
 8008778:	e7b0      	b.n	80086dc <__gethex+0x68>
 800877a:	2c00      	cmp	r4, #0
 800877c:	d1c7      	bne.n	800870e <__gethex+0x9a>
 800877e:	4627      	mov	r7, r4
 8008780:	e7c7      	b.n	8008712 <__gethex+0x9e>
 8008782:	464e      	mov	r6, r9
 8008784:	462f      	mov	r7, r5
 8008786:	2501      	movs	r5, #1
 8008788:	e7c3      	b.n	8008712 <__gethex+0x9e>
 800878a:	2400      	movs	r4, #0
 800878c:	1cb1      	adds	r1, r6, #2
 800878e:	e7cc      	b.n	800872a <__gethex+0xb6>
 8008790:	2401      	movs	r4, #1
 8008792:	e7fb      	b.n	800878c <__gethex+0x118>
 8008794:	fb03 0002 	mla	r0, r3, r2, r0
 8008798:	e7ce      	b.n	8008738 <__gethex+0xc4>
 800879a:	4631      	mov	r1, r6
 800879c:	e7de      	b.n	800875c <__gethex+0xe8>
 800879e:	eba6 0309 	sub.w	r3, r6, r9
 80087a2:	3b01      	subs	r3, #1
 80087a4:	4629      	mov	r1, r5
 80087a6:	2b07      	cmp	r3, #7
 80087a8:	dc0a      	bgt.n	80087c0 <__gethex+0x14c>
 80087aa:	9801      	ldr	r0, [sp, #4]
 80087ac:	f7fe f93c 	bl	8006a28 <_Balloc>
 80087b0:	4604      	mov	r4, r0
 80087b2:	b940      	cbnz	r0, 80087c6 <__gethex+0x152>
 80087b4:	4b5c      	ldr	r3, [pc, #368]	@ (8008928 <__gethex+0x2b4>)
 80087b6:	4602      	mov	r2, r0
 80087b8:	21e4      	movs	r1, #228	@ 0xe4
 80087ba:	485c      	ldr	r0, [pc, #368]	@ (800892c <__gethex+0x2b8>)
 80087bc:	f7ff fec0 	bl	8008540 <__assert_func>
 80087c0:	3101      	adds	r1, #1
 80087c2:	105b      	asrs	r3, r3, #1
 80087c4:	e7ef      	b.n	80087a6 <__gethex+0x132>
 80087c6:	f100 0a14 	add.w	sl, r0, #20
 80087ca:	2300      	movs	r3, #0
 80087cc:	4655      	mov	r5, sl
 80087ce:	469b      	mov	fp, r3
 80087d0:	45b1      	cmp	r9, r6
 80087d2:	d337      	bcc.n	8008844 <__gethex+0x1d0>
 80087d4:	f845 bb04 	str.w	fp, [r5], #4
 80087d8:	eba5 050a 	sub.w	r5, r5, sl
 80087dc:	10ad      	asrs	r5, r5, #2
 80087de:	6125      	str	r5, [r4, #16]
 80087e0:	4658      	mov	r0, fp
 80087e2:	f7fe fa13 	bl	8006c0c <__hi0bits>
 80087e6:	016d      	lsls	r5, r5, #5
 80087e8:	f8d8 6000 	ldr.w	r6, [r8]
 80087ec:	1a2d      	subs	r5, r5, r0
 80087ee:	42b5      	cmp	r5, r6
 80087f0:	dd54      	ble.n	800889c <__gethex+0x228>
 80087f2:	1bad      	subs	r5, r5, r6
 80087f4:	4629      	mov	r1, r5
 80087f6:	4620      	mov	r0, r4
 80087f8:	f7fe fda7 	bl	800734a <__any_on>
 80087fc:	4681      	mov	r9, r0
 80087fe:	b178      	cbz	r0, 8008820 <__gethex+0x1ac>
 8008800:	1e6b      	subs	r3, r5, #1
 8008802:	1159      	asrs	r1, r3, #5
 8008804:	f003 021f 	and.w	r2, r3, #31
 8008808:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800880c:	f04f 0901 	mov.w	r9, #1
 8008810:	fa09 f202 	lsl.w	r2, r9, r2
 8008814:	420a      	tst	r2, r1
 8008816:	d003      	beq.n	8008820 <__gethex+0x1ac>
 8008818:	454b      	cmp	r3, r9
 800881a:	dc36      	bgt.n	800888a <__gethex+0x216>
 800881c:	f04f 0902 	mov.w	r9, #2
 8008820:	4629      	mov	r1, r5
 8008822:	4620      	mov	r0, r4
 8008824:	f7ff febe 	bl	80085a4 <rshift>
 8008828:	442f      	add	r7, r5
 800882a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800882e:	42bb      	cmp	r3, r7
 8008830:	da42      	bge.n	80088b8 <__gethex+0x244>
 8008832:	9801      	ldr	r0, [sp, #4]
 8008834:	4621      	mov	r1, r4
 8008836:	f7fe f937 	bl	8006aa8 <_Bfree>
 800883a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800883c:	2300      	movs	r3, #0
 800883e:	6013      	str	r3, [r2, #0]
 8008840:	25a3      	movs	r5, #163	@ 0xa3
 8008842:	e793      	b.n	800876c <__gethex+0xf8>
 8008844:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008848:	2a2e      	cmp	r2, #46	@ 0x2e
 800884a:	d012      	beq.n	8008872 <__gethex+0x1fe>
 800884c:	2b20      	cmp	r3, #32
 800884e:	d104      	bne.n	800885a <__gethex+0x1e6>
 8008850:	f845 bb04 	str.w	fp, [r5], #4
 8008854:	f04f 0b00 	mov.w	fp, #0
 8008858:	465b      	mov	r3, fp
 800885a:	7830      	ldrb	r0, [r6, #0]
 800885c:	9303      	str	r3, [sp, #12]
 800885e:	f7ff fef3 	bl	8008648 <__hexdig_fun>
 8008862:	9b03      	ldr	r3, [sp, #12]
 8008864:	f000 000f 	and.w	r0, r0, #15
 8008868:	4098      	lsls	r0, r3
 800886a:	ea4b 0b00 	orr.w	fp, fp, r0
 800886e:	3304      	adds	r3, #4
 8008870:	e7ae      	b.n	80087d0 <__gethex+0x15c>
 8008872:	45b1      	cmp	r9, r6
 8008874:	d8ea      	bhi.n	800884c <__gethex+0x1d8>
 8008876:	492b      	ldr	r1, [pc, #172]	@ (8008924 <__gethex+0x2b0>)
 8008878:	9303      	str	r3, [sp, #12]
 800887a:	2201      	movs	r2, #1
 800887c:	4630      	mov	r0, r6
 800887e:	f7ff fe27 	bl	80084d0 <strncmp>
 8008882:	9b03      	ldr	r3, [sp, #12]
 8008884:	2800      	cmp	r0, #0
 8008886:	d1e1      	bne.n	800884c <__gethex+0x1d8>
 8008888:	e7a2      	b.n	80087d0 <__gethex+0x15c>
 800888a:	1ea9      	subs	r1, r5, #2
 800888c:	4620      	mov	r0, r4
 800888e:	f7fe fd5c 	bl	800734a <__any_on>
 8008892:	2800      	cmp	r0, #0
 8008894:	d0c2      	beq.n	800881c <__gethex+0x1a8>
 8008896:	f04f 0903 	mov.w	r9, #3
 800889a:	e7c1      	b.n	8008820 <__gethex+0x1ac>
 800889c:	da09      	bge.n	80088b2 <__gethex+0x23e>
 800889e:	1b75      	subs	r5, r6, r5
 80088a0:	4621      	mov	r1, r4
 80088a2:	9801      	ldr	r0, [sp, #4]
 80088a4:	462a      	mov	r2, r5
 80088a6:	f7fe fb17 	bl	8006ed8 <__lshift>
 80088aa:	1b7f      	subs	r7, r7, r5
 80088ac:	4604      	mov	r4, r0
 80088ae:	f100 0a14 	add.w	sl, r0, #20
 80088b2:	f04f 0900 	mov.w	r9, #0
 80088b6:	e7b8      	b.n	800882a <__gethex+0x1b6>
 80088b8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80088bc:	42bd      	cmp	r5, r7
 80088be:	dd6f      	ble.n	80089a0 <__gethex+0x32c>
 80088c0:	1bed      	subs	r5, r5, r7
 80088c2:	42ae      	cmp	r6, r5
 80088c4:	dc34      	bgt.n	8008930 <__gethex+0x2bc>
 80088c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80088ca:	2b02      	cmp	r3, #2
 80088cc:	d022      	beq.n	8008914 <__gethex+0x2a0>
 80088ce:	2b03      	cmp	r3, #3
 80088d0:	d024      	beq.n	800891c <__gethex+0x2a8>
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d115      	bne.n	8008902 <__gethex+0x28e>
 80088d6:	42ae      	cmp	r6, r5
 80088d8:	d113      	bne.n	8008902 <__gethex+0x28e>
 80088da:	2e01      	cmp	r6, #1
 80088dc:	d10b      	bne.n	80088f6 <__gethex+0x282>
 80088de:	9a02      	ldr	r2, [sp, #8]
 80088e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80088e4:	6013      	str	r3, [r2, #0]
 80088e6:	2301      	movs	r3, #1
 80088e8:	6123      	str	r3, [r4, #16]
 80088ea:	f8ca 3000 	str.w	r3, [sl]
 80088ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088f0:	2562      	movs	r5, #98	@ 0x62
 80088f2:	601c      	str	r4, [r3, #0]
 80088f4:	e73a      	b.n	800876c <__gethex+0xf8>
 80088f6:	1e71      	subs	r1, r6, #1
 80088f8:	4620      	mov	r0, r4
 80088fa:	f7fe fd26 	bl	800734a <__any_on>
 80088fe:	2800      	cmp	r0, #0
 8008900:	d1ed      	bne.n	80088de <__gethex+0x26a>
 8008902:	9801      	ldr	r0, [sp, #4]
 8008904:	4621      	mov	r1, r4
 8008906:	f7fe f8cf 	bl	8006aa8 <_Bfree>
 800890a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800890c:	2300      	movs	r3, #0
 800890e:	6013      	str	r3, [r2, #0]
 8008910:	2550      	movs	r5, #80	@ 0x50
 8008912:	e72b      	b.n	800876c <__gethex+0xf8>
 8008914:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008916:	2b00      	cmp	r3, #0
 8008918:	d1f3      	bne.n	8008902 <__gethex+0x28e>
 800891a:	e7e0      	b.n	80088de <__gethex+0x26a>
 800891c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1dd      	bne.n	80088de <__gethex+0x26a>
 8008922:	e7ee      	b.n	8008902 <__gethex+0x28e>
 8008924:	080094f0 	.word	0x080094f0
 8008928:	08009385 	.word	0x08009385
 800892c:	0800969e 	.word	0x0800969e
 8008930:	1e6f      	subs	r7, r5, #1
 8008932:	f1b9 0f00 	cmp.w	r9, #0
 8008936:	d130      	bne.n	800899a <__gethex+0x326>
 8008938:	b127      	cbz	r7, 8008944 <__gethex+0x2d0>
 800893a:	4639      	mov	r1, r7
 800893c:	4620      	mov	r0, r4
 800893e:	f7fe fd04 	bl	800734a <__any_on>
 8008942:	4681      	mov	r9, r0
 8008944:	117a      	asrs	r2, r7, #5
 8008946:	2301      	movs	r3, #1
 8008948:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800894c:	f007 071f 	and.w	r7, r7, #31
 8008950:	40bb      	lsls	r3, r7
 8008952:	4213      	tst	r3, r2
 8008954:	4629      	mov	r1, r5
 8008956:	4620      	mov	r0, r4
 8008958:	bf18      	it	ne
 800895a:	f049 0902 	orrne.w	r9, r9, #2
 800895e:	f7ff fe21 	bl	80085a4 <rshift>
 8008962:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008966:	1b76      	subs	r6, r6, r5
 8008968:	2502      	movs	r5, #2
 800896a:	f1b9 0f00 	cmp.w	r9, #0
 800896e:	d047      	beq.n	8008a00 <__gethex+0x38c>
 8008970:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008974:	2b02      	cmp	r3, #2
 8008976:	d015      	beq.n	80089a4 <__gethex+0x330>
 8008978:	2b03      	cmp	r3, #3
 800897a:	d017      	beq.n	80089ac <__gethex+0x338>
 800897c:	2b01      	cmp	r3, #1
 800897e:	d109      	bne.n	8008994 <__gethex+0x320>
 8008980:	f019 0f02 	tst.w	r9, #2
 8008984:	d006      	beq.n	8008994 <__gethex+0x320>
 8008986:	f8da 3000 	ldr.w	r3, [sl]
 800898a:	ea49 0903 	orr.w	r9, r9, r3
 800898e:	f019 0f01 	tst.w	r9, #1
 8008992:	d10e      	bne.n	80089b2 <__gethex+0x33e>
 8008994:	f045 0510 	orr.w	r5, r5, #16
 8008998:	e032      	b.n	8008a00 <__gethex+0x38c>
 800899a:	f04f 0901 	mov.w	r9, #1
 800899e:	e7d1      	b.n	8008944 <__gethex+0x2d0>
 80089a0:	2501      	movs	r5, #1
 80089a2:	e7e2      	b.n	800896a <__gethex+0x2f6>
 80089a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089a6:	f1c3 0301 	rsb	r3, r3, #1
 80089aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80089ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d0f0      	beq.n	8008994 <__gethex+0x320>
 80089b2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80089b6:	f104 0314 	add.w	r3, r4, #20
 80089ba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80089be:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80089c2:	f04f 0c00 	mov.w	ip, #0
 80089c6:	4618      	mov	r0, r3
 80089c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80089cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80089d0:	d01b      	beq.n	8008a0a <__gethex+0x396>
 80089d2:	3201      	adds	r2, #1
 80089d4:	6002      	str	r2, [r0, #0]
 80089d6:	2d02      	cmp	r5, #2
 80089d8:	f104 0314 	add.w	r3, r4, #20
 80089dc:	d13c      	bne.n	8008a58 <__gethex+0x3e4>
 80089de:	f8d8 2000 	ldr.w	r2, [r8]
 80089e2:	3a01      	subs	r2, #1
 80089e4:	42b2      	cmp	r2, r6
 80089e6:	d109      	bne.n	80089fc <__gethex+0x388>
 80089e8:	1171      	asrs	r1, r6, #5
 80089ea:	2201      	movs	r2, #1
 80089ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80089f0:	f006 061f 	and.w	r6, r6, #31
 80089f4:	fa02 f606 	lsl.w	r6, r2, r6
 80089f8:	421e      	tst	r6, r3
 80089fa:	d13a      	bne.n	8008a72 <__gethex+0x3fe>
 80089fc:	f045 0520 	orr.w	r5, r5, #32
 8008a00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a02:	601c      	str	r4, [r3, #0]
 8008a04:	9b02      	ldr	r3, [sp, #8]
 8008a06:	601f      	str	r7, [r3, #0]
 8008a08:	e6b0      	b.n	800876c <__gethex+0xf8>
 8008a0a:	4299      	cmp	r1, r3
 8008a0c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008a10:	d8d9      	bhi.n	80089c6 <__gethex+0x352>
 8008a12:	68a3      	ldr	r3, [r4, #8]
 8008a14:	459b      	cmp	fp, r3
 8008a16:	db17      	blt.n	8008a48 <__gethex+0x3d4>
 8008a18:	6861      	ldr	r1, [r4, #4]
 8008a1a:	9801      	ldr	r0, [sp, #4]
 8008a1c:	3101      	adds	r1, #1
 8008a1e:	f7fe f803 	bl	8006a28 <_Balloc>
 8008a22:	4681      	mov	r9, r0
 8008a24:	b918      	cbnz	r0, 8008a2e <__gethex+0x3ba>
 8008a26:	4b1a      	ldr	r3, [pc, #104]	@ (8008a90 <__gethex+0x41c>)
 8008a28:	4602      	mov	r2, r0
 8008a2a:	2184      	movs	r1, #132	@ 0x84
 8008a2c:	e6c5      	b.n	80087ba <__gethex+0x146>
 8008a2e:	6922      	ldr	r2, [r4, #16]
 8008a30:	3202      	adds	r2, #2
 8008a32:	f104 010c 	add.w	r1, r4, #12
 8008a36:	0092      	lsls	r2, r2, #2
 8008a38:	300c      	adds	r0, #12
 8008a3a:	f7ff fd6b 	bl	8008514 <memcpy>
 8008a3e:	4621      	mov	r1, r4
 8008a40:	9801      	ldr	r0, [sp, #4]
 8008a42:	f7fe f831 	bl	8006aa8 <_Bfree>
 8008a46:	464c      	mov	r4, r9
 8008a48:	6923      	ldr	r3, [r4, #16]
 8008a4a:	1c5a      	adds	r2, r3, #1
 8008a4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008a50:	6122      	str	r2, [r4, #16]
 8008a52:	2201      	movs	r2, #1
 8008a54:	615a      	str	r2, [r3, #20]
 8008a56:	e7be      	b.n	80089d6 <__gethex+0x362>
 8008a58:	6922      	ldr	r2, [r4, #16]
 8008a5a:	455a      	cmp	r2, fp
 8008a5c:	dd0b      	ble.n	8008a76 <__gethex+0x402>
 8008a5e:	2101      	movs	r1, #1
 8008a60:	4620      	mov	r0, r4
 8008a62:	f7ff fd9f 	bl	80085a4 <rshift>
 8008a66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008a6a:	3701      	adds	r7, #1
 8008a6c:	42bb      	cmp	r3, r7
 8008a6e:	f6ff aee0 	blt.w	8008832 <__gethex+0x1be>
 8008a72:	2501      	movs	r5, #1
 8008a74:	e7c2      	b.n	80089fc <__gethex+0x388>
 8008a76:	f016 061f 	ands.w	r6, r6, #31
 8008a7a:	d0fa      	beq.n	8008a72 <__gethex+0x3fe>
 8008a7c:	4453      	add	r3, sl
 8008a7e:	f1c6 0620 	rsb	r6, r6, #32
 8008a82:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008a86:	f7fe f8c1 	bl	8006c0c <__hi0bits>
 8008a8a:	42b0      	cmp	r0, r6
 8008a8c:	dbe7      	blt.n	8008a5e <__gethex+0x3ea>
 8008a8e:	e7f0      	b.n	8008a72 <__gethex+0x3fe>
 8008a90:	08009385 	.word	0x08009385

08008a94 <L_shift>:
 8008a94:	f1c2 0208 	rsb	r2, r2, #8
 8008a98:	0092      	lsls	r2, r2, #2
 8008a9a:	b570      	push	{r4, r5, r6, lr}
 8008a9c:	f1c2 0620 	rsb	r6, r2, #32
 8008aa0:	6843      	ldr	r3, [r0, #4]
 8008aa2:	6804      	ldr	r4, [r0, #0]
 8008aa4:	fa03 f506 	lsl.w	r5, r3, r6
 8008aa8:	432c      	orrs	r4, r5
 8008aaa:	40d3      	lsrs	r3, r2
 8008aac:	6004      	str	r4, [r0, #0]
 8008aae:	f840 3f04 	str.w	r3, [r0, #4]!
 8008ab2:	4288      	cmp	r0, r1
 8008ab4:	d3f4      	bcc.n	8008aa0 <L_shift+0xc>
 8008ab6:	bd70      	pop	{r4, r5, r6, pc}

08008ab8 <__match>:
 8008ab8:	b530      	push	{r4, r5, lr}
 8008aba:	6803      	ldr	r3, [r0, #0]
 8008abc:	3301      	adds	r3, #1
 8008abe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ac2:	b914      	cbnz	r4, 8008aca <__match+0x12>
 8008ac4:	6003      	str	r3, [r0, #0]
 8008ac6:	2001      	movs	r0, #1
 8008ac8:	bd30      	pop	{r4, r5, pc}
 8008aca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ace:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008ad2:	2d19      	cmp	r5, #25
 8008ad4:	bf98      	it	ls
 8008ad6:	3220      	addls	r2, #32
 8008ad8:	42a2      	cmp	r2, r4
 8008ada:	d0f0      	beq.n	8008abe <__match+0x6>
 8008adc:	2000      	movs	r0, #0
 8008ade:	e7f3      	b.n	8008ac8 <__match+0x10>

08008ae0 <__hexnan>:
 8008ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae4:	680b      	ldr	r3, [r1, #0]
 8008ae6:	6801      	ldr	r1, [r0, #0]
 8008ae8:	115e      	asrs	r6, r3, #5
 8008aea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008aee:	f013 031f 	ands.w	r3, r3, #31
 8008af2:	b087      	sub	sp, #28
 8008af4:	bf18      	it	ne
 8008af6:	3604      	addne	r6, #4
 8008af8:	2500      	movs	r5, #0
 8008afa:	1f37      	subs	r7, r6, #4
 8008afc:	4682      	mov	sl, r0
 8008afe:	4690      	mov	r8, r2
 8008b00:	9301      	str	r3, [sp, #4]
 8008b02:	f846 5c04 	str.w	r5, [r6, #-4]
 8008b06:	46b9      	mov	r9, r7
 8008b08:	463c      	mov	r4, r7
 8008b0a:	9502      	str	r5, [sp, #8]
 8008b0c:	46ab      	mov	fp, r5
 8008b0e:	784a      	ldrb	r2, [r1, #1]
 8008b10:	1c4b      	adds	r3, r1, #1
 8008b12:	9303      	str	r3, [sp, #12]
 8008b14:	b342      	cbz	r2, 8008b68 <__hexnan+0x88>
 8008b16:	4610      	mov	r0, r2
 8008b18:	9105      	str	r1, [sp, #20]
 8008b1a:	9204      	str	r2, [sp, #16]
 8008b1c:	f7ff fd94 	bl	8008648 <__hexdig_fun>
 8008b20:	2800      	cmp	r0, #0
 8008b22:	d151      	bne.n	8008bc8 <__hexnan+0xe8>
 8008b24:	9a04      	ldr	r2, [sp, #16]
 8008b26:	9905      	ldr	r1, [sp, #20]
 8008b28:	2a20      	cmp	r2, #32
 8008b2a:	d818      	bhi.n	8008b5e <__hexnan+0x7e>
 8008b2c:	9b02      	ldr	r3, [sp, #8]
 8008b2e:	459b      	cmp	fp, r3
 8008b30:	dd13      	ble.n	8008b5a <__hexnan+0x7a>
 8008b32:	454c      	cmp	r4, r9
 8008b34:	d206      	bcs.n	8008b44 <__hexnan+0x64>
 8008b36:	2d07      	cmp	r5, #7
 8008b38:	dc04      	bgt.n	8008b44 <__hexnan+0x64>
 8008b3a:	462a      	mov	r2, r5
 8008b3c:	4649      	mov	r1, r9
 8008b3e:	4620      	mov	r0, r4
 8008b40:	f7ff ffa8 	bl	8008a94 <L_shift>
 8008b44:	4544      	cmp	r4, r8
 8008b46:	d952      	bls.n	8008bee <__hexnan+0x10e>
 8008b48:	2300      	movs	r3, #0
 8008b4a:	f1a4 0904 	sub.w	r9, r4, #4
 8008b4e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008b52:	f8cd b008 	str.w	fp, [sp, #8]
 8008b56:	464c      	mov	r4, r9
 8008b58:	461d      	mov	r5, r3
 8008b5a:	9903      	ldr	r1, [sp, #12]
 8008b5c:	e7d7      	b.n	8008b0e <__hexnan+0x2e>
 8008b5e:	2a29      	cmp	r2, #41	@ 0x29
 8008b60:	d157      	bne.n	8008c12 <__hexnan+0x132>
 8008b62:	3102      	adds	r1, #2
 8008b64:	f8ca 1000 	str.w	r1, [sl]
 8008b68:	f1bb 0f00 	cmp.w	fp, #0
 8008b6c:	d051      	beq.n	8008c12 <__hexnan+0x132>
 8008b6e:	454c      	cmp	r4, r9
 8008b70:	d206      	bcs.n	8008b80 <__hexnan+0xa0>
 8008b72:	2d07      	cmp	r5, #7
 8008b74:	dc04      	bgt.n	8008b80 <__hexnan+0xa0>
 8008b76:	462a      	mov	r2, r5
 8008b78:	4649      	mov	r1, r9
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	f7ff ff8a 	bl	8008a94 <L_shift>
 8008b80:	4544      	cmp	r4, r8
 8008b82:	d936      	bls.n	8008bf2 <__hexnan+0x112>
 8008b84:	f1a8 0204 	sub.w	r2, r8, #4
 8008b88:	4623      	mov	r3, r4
 8008b8a:	f853 1b04 	ldr.w	r1, [r3], #4
 8008b8e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008b92:	429f      	cmp	r7, r3
 8008b94:	d2f9      	bcs.n	8008b8a <__hexnan+0xaa>
 8008b96:	1b3b      	subs	r3, r7, r4
 8008b98:	f023 0303 	bic.w	r3, r3, #3
 8008b9c:	3304      	adds	r3, #4
 8008b9e:	3401      	adds	r4, #1
 8008ba0:	3e03      	subs	r6, #3
 8008ba2:	42b4      	cmp	r4, r6
 8008ba4:	bf88      	it	hi
 8008ba6:	2304      	movhi	r3, #4
 8008ba8:	4443      	add	r3, r8
 8008baa:	2200      	movs	r2, #0
 8008bac:	f843 2b04 	str.w	r2, [r3], #4
 8008bb0:	429f      	cmp	r7, r3
 8008bb2:	d2fb      	bcs.n	8008bac <__hexnan+0xcc>
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	b91b      	cbnz	r3, 8008bc0 <__hexnan+0xe0>
 8008bb8:	4547      	cmp	r7, r8
 8008bba:	d128      	bne.n	8008c0e <__hexnan+0x12e>
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	603b      	str	r3, [r7, #0]
 8008bc0:	2005      	movs	r0, #5
 8008bc2:	b007      	add	sp, #28
 8008bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bc8:	3501      	adds	r5, #1
 8008bca:	2d08      	cmp	r5, #8
 8008bcc:	f10b 0b01 	add.w	fp, fp, #1
 8008bd0:	dd06      	ble.n	8008be0 <__hexnan+0x100>
 8008bd2:	4544      	cmp	r4, r8
 8008bd4:	d9c1      	bls.n	8008b5a <__hexnan+0x7a>
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	f844 3c04 	str.w	r3, [r4, #-4]
 8008bdc:	2501      	movs	r5, #1
 8008bde:	3c04      	subs	r4, #4
 8008be0:	6822      	ldr	r2, [r4, #0]
 8008be2:	f000 000f 	and.w	r0, r0, #15
 8008be6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008bea:	6020      	str	r0, [r4, #0]
 8008bec:	e7b5      	b.n	8008b5a <__hexnan+0x7a>
 8008bee:	2508      	movs	r5, #8
 8008bf0:	e7b3      	b.n	8008b5a <__hexnan+0x7a>
 8008bf2:	9b01      	ldr	r3, [sp, #4]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d0dd      	beq.n	8008bb4 <__hexnan+0xd4>
 8008bf8:	f1c3 0320 	rsb	r3, r3, #32
 8008bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8008c00:	40da      	lsrs	r2, r3
 8008c02:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008c06:	4013      	ands	r3, r2
 8008c08:	f846 3c04 	str.w	r3, [r6, #-4]
 8008c0c:	e7d2      	b.n	8008bb4 <__hexnan+0xd4>
 8008c0e:	3f04      	subs	r7, #4
 8008c10:	e7d0      	b.n	8008bb4 <__hexnan+0xd4>
 8008c12:	2004      	movs	r0, #4
 8008c14:	e7d5      	b.n	8008bc2 <__hexnan+0xe2>

08008c16 <__ascii_mbtowc>:
 8008c16:	b082      	sub	sp, #8
 8008c18:	b901      	cbnz	r1, 8008c1c <__ascii_mbtowc+0x6>
 8008c1a:	a901      	add	r1, sp, #4
 8008c1c:	b142      	cbz	r2, 8008c30 <__ascii_mbtowc+0x1a>
 8008c1e:	b14b      	cbz	r3, 8008c34 <__ascii_mbtowc+0x1e>
 8008c20:	7813      	ldrb	r3, [r2, #0]
 8008c22:	600b      	str	r3, [r1, #0]
 8008c24:	7812      	ldrb	r2, [r2, #0]
 8008c26:	1e10      	subs	r0, r2, #0
 8008c28:	bf18      	it	ne
 8008c2a:	2001      	movne	r0, #1
 8008c2c:	b002      	add	sp, #8
 8008c2e:	4770      	bx	lr
 8008c30:	4610      	mov	r0, r2
 8008c32:	e7fb      	b.n	8008c2c <__ascii_mbtowc+0x16>
 8008c34:	f06f 0001 	mvn.w	r0, #1
 8008c38:	e7f8      	b.n	8008c2c <__ascii_mbtowc+0x16>

08008c3a <_realloc_r>:
 8008c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c3e:	4680      	mov	r8, r0
 8008c40:	4615      	mov	r5, r2
 8008c42:	460c      	mov	r4, r1
 8008c44:	b921      	cbnz	r1, 8008c50 <_realloc_r+0x16>
 8008c46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c4a:	4611      	mov	r1, r2
 8008c4c:	f7fd be60 	b.w	8006910 <_malloc_r>
 8008c50:	b92a      	cbnz	r2, 8008c5e <_realloc_r+0x24>
 8008c52:	f7fd fde9 	bl	8006828 <_free_r>
 8008c56:	2400      	movs	r4, #0
 8008c58:	4620      	mov	r0, r4
 8008c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c5e:	f000 f840 	bl	8008ce2 <_malloc_usable_size_r>
 8008c62:	4285      	cmp	r5, r0
 8008c64:	4606      	mov	r6, r0
 8008c66:	d802      	bhi.n	8008c6e <_realloc_r+0x34>
 8008c68:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008c6c:	d8f4      	bhi.n	8008c58 <_realloc_r+0x1e>
 8008c6e:	4629      	mov	r1, r5
 8008c70:	4640      	mov	r0, r8
 8008c72:	f7fd fe4d 	bl	8006910 <_malloc_r>
 8008c76:	4607      	mov	r7, r0
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	d0ec      	beq.n	8008c56 <_realloc_r+0x1c>
 8008c7c:	42b5      	cmp	r5, r6
 8008c7e:	462a      	mov	r2, r5
 8008c80:	4621      	mov	r1, r4
 8008c82:	bf28      	it	cs
 8008c84:	4632      	movcs	r2, r6
 8008c86:	f7ff fc45 	bl	8008514 <memcpy>
 8008c8a:	4621      	mov	r1, r4
 8008c8c:	4640      	mov	r0, r8
 8008c8e:	f7fd fdcb 	bl	8006828 <_free_r>
 8008c92:	463c      	mov	r4, r7
 8008c94:	e7e0      	b.n	8008c58 <_realloc_r+0x1e>

08008c96 <__ascii_wctomb>:
 8008c96:	4603      	mov	r3, r0
 8008c98:	4608      	mov	r0, r1
 8008c9a:	b141      	cbz	r1, 8008cae <__ascii_wctomb+0x18>
 8008c9c:	2aff      	cmp	r2, #255	@ 0xff
 8008c9e:	d904      	bls.n	8008caa <__ascii_wctomb+0x14>
 8008ca0:	228a      	movs	r2, #138	@ 0x8a
 8008ca2:	601a      	str	r2, [r3, #0]
 8008ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca8:	4770      	bx	lr
 8008caa:	700a      	strb	r2, [r1, #0]
 8008cac:	2001      	movs	r0, #1
 8008cae:	4770      	bx	lr

08008cb0 <fiprintf>:
 8008cb0:	b40e      	push	{r1, r2, r3}
 8008cb2:	b503      	push	{r0, r1, lr}
 8008cb4:	4601      	mov	r1, r0
 8008cb6:	ab03      	add	r3, sp, #12
 8008cb8:	4805      	ldr	r0, [pc, #20]	@ (8008cd0 <fiprintf+0x20>)
 8008cba:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cbe:	6800      	ldr	r0, [r0, #0]
 8008cc0:	9301      	str	r3, [sp, #4]
 8008cc2:	f000 f83f 	bl	8008d44 <_vfiprintf_r>
 8008cc6:	b002      	add	sp, #8
 8008cc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ccc:	b003      	add	sp, #12
 8008cce:	4770      	bx	lr
 8008cd0:	20000030 	.word	0x20000030

08008cd4 <abort>:
 8008cd4:	b508      	push	{r3, lr}
 8008cd6:	2006      	movs	r0, #6
 8008cd8:	f000 fa08 	bl	80090ec <raise>
 8008cdc:	2001      	movs	r0, #1
 8008cde:	f7f8 fce6 	bl	80016ae <_exit>

08008ce2 <_malloc_usable_size_r>:
 8008ce2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ce6:	1f18      	subs	r0, r3, #4
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	bfbc      	itt	lt
 8008cec:	580b      	ldrlt	r3, [r1, r0]
 8008cee:	18c0      	addlt	r0, r0, r3
 8008cf0:	4770      	bx	lr

08008cf2 <__sfputc_r>:
 8008cf2:	6893      	ldr	r3, [r2, #8]
 8008cf4:	3b01      	subs	r3, #1
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	b410      	push	{r4}
 8008cfa:	6093      	str	r3, [r2, #8]
 8008cfc:	da08      	bge.n	8008d10 <__sfputc_r+0x1e>
 8008cfe:	6994      	ldr	r4, [r2, #24]
 8008d00:	42a3      	cmp	r3, r4
 8008d02:	db01      	blt.n	8008d08 <__sfputc_r+0x16>
 8008d04:	290a      	cmp	r1, #10
 8008d06:	d103      	bne.n	8008d10 <__sfputc_r+0x1e>
 8008d08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d0c:	f000 b932 	b.w	8008f74 <__swbuf_r>
 8008d10:	6813      	ldr	r3, [r2, #0]
 8008d12:	1c58      	adds	r0, r3, #1
 8008d14:	6010      	str	r0, [r2, #0]
 8008d16:	7019      	strb	r1, [r3, #0]
 8008d18:	4608      	mov	r0, r1
 8008d1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <__sfputs_r>:
 8008d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d22:	4606      	mov	r6, r0
 8008d24:	460f      	mov	r7, r1
 8008d26:	4614      	mov	r4, r2
 8008d28:	18d5      	adds	r5, r2, r3
 8008d2a:	42ac      	cmp	r4, r5
 8008d2c:	d101      	bne.n	8008d32 <__sfputs_r+0x12>
 8008d2e:	2000      	movs	r0, #0
 8008d30:	e007      	b.n	8008d42 <__sfputs_r+0x22>
 8008d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d36:	463a      	mov	r2, r7
 8008d38:	4630      	mov	r0, r6
 8008d3a:	f7ff ffda 	bl	8008cf2 <__sfputc_r>
 8008d3e:	1c43      	adds	r3, r0, #1
 8008d40:	d1f3      	bne.n	8008d2a <__sfputs_r+0xa>
 8008d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008d44 <_vfiprintf_r>:
 8008d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d48:	460d      	mov	r5, r1
 8008d4a:	b09d      	sub	sp, #116	@ 0x74
 8008d4c:	4614      	mov	r4, r2
 8008d4e:	4698      	mov	r8, r3
 8008d50:	4606      	mov	r6, r0
 8008d52:	b118      	cbz	r0, 8008d5c <_vfiprintf_r+0x18>
 8008d54:	6a03      	ldr	r3, [r0, #32]
 8008d56:	b90b      	cbnz	r3, 8008d5c <_vfiprintf_r+0x18>
 8008d58:	f7fc fdf8 	bl	800594c <__sinit>
 8008d5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d5e:	07d9      	lsls	r1, r3, #31
 8008d60:	d405      	bmi.n	8008d6e <_vfiprintf_r+0x2a>
 8008d62:	89ab      	ldrh	r3, [r5, #12]
 8008d64:	059a      	lsls	r2, r3, #22
 8008d66:	d402      	bmi.n	8008d6e <_vfiprintf_r+0x2a>
 8008d68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d6a:	f7fc ff06 	bl	8005b7a <__retarget_lock_acquire_recursive>
 8008d6e:	89ab      	ldrh	r3, [r5, #12]
 8008d70:	071b      	lsls	r3, r3, #28
 8008d72:	d501      	bpl.n	8008d78 <_vfiprintf_r+0x34>
 8008d74:	692b      	ldr	r3, [r5, #16]
 8008d76:	b99b      	cbnz	r3, 8008da0 <_vfiprintf_r+0x5c>
 8008d78:	4629      	mov	r1, r5
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	f000 f938 	bl	8008ff0 <__swsetup_r>
 8008d80:	b170      	cbz	r0, 8008da0 <_vfiprintf_r+0x5c>
 8008d82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d84:	07dc      	lsls	r4, r3, #31
 8008d86:	d504      	bpl.n	8008d92 <_vfiprintf_r+0x4e>
 8008d88:	f04f 30ff 	mov.w	r0, #4294967295
 8008d8c:	b01d      	add	sp, #116	@ 0x74
 8008d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d92:	89ab      	ldrh	r3, [r5, #12]
 8008d94:	0598      	lsls	r0, r3, #22
 8008d96:	d4f7      	bmi.n	8008d88 <_vfiprintf_r+0x44>
 8008d98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d9a:	f7fc feef 	bl	8005b7c <__retarget_lock_release_recursive>
 8008d9e:	e7f3      	b.n	8008d88 <_vfiprintf_r+0x44>
 8008da0:	2300      	movs	r3, #0
 8008da2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008da4:	2320      	movs	r3, #32
 8008da6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008daa:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dae:	2330      	movs	r3, #48	@ 0x30
 8008db0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008f60 <_vfiprintf_r+0x21c>
 8008db4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008db8:	f04f 0901 	mov.w	r9, #1
 8008dbc:	4623      	mov	r3, r4
 8008dbe:	469a      	mov	sl, r3
 8008dc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dc4:	b10a      	cbz	r2, 8008dca <_vfiprintf_r+0x86>
 8008dc6:	2a25      	cmp	r2, #37	@ 0x25
 8008dc8:	d1f9      	bne.n	8008dbe <_vfiprintf_r+0x7a>
 8008dca:	ebba 0b04 	subs.w	fp, sl, r4
 8008dce:	d00b      	beq.n	8008de8 <_vfiprintf_r+0xa4>
 8008dd0:	465b      	mov	r3, fp
 8008dd2:	4622      	mov	r2, r4
 8008dd4:	4629      	mov	r1, r5
 8008dd6:	4630      	mov	r0, r6
 8008dd8:	f7ff ffa2 	bl	8008d20 <__sfputs_r>
 8008ddc:	3001      	adds	r0, #1
 8008dde:	f000 80a7 	beq.w	8008f30 <_vfiprintf_r+0x1ec>
 8008de2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008de4:	445a      	add	r2, fp
 8008de6:	9209      	str	r2, [sp, #36]	@ 0x24
 8008de8:	f89a 3000 	ldrb.w	r3, [sl]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f000 809f 	beq.w	8008f30 <_vfiprintf_r+0x1ec>
 8008df2:	2300      	movs	r3, #0
 8008df4:	f04f 32ff 	mov.w	r2, #4294967295
 8008df8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dfc:	f10a 0a01 	add.w	sl, sl, #1
 8008e00:	9304      	str	r3, [sp, #16]
 8008e02:	9307      	str	r3, [sp, #28]
 8008e04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e08:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e0a:	4654      	mov	r4, sl
 8008e0c:	2205      	movs	r2, #5
 8008e0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e12:	4853      	ldr	r0, [pc, #332]	@ (8008f60 <_vfiprintf_r+0x21c>)
 8008e14:	f7f7 f9dc 	bl	80001d0 <memchr>
 8008e18:	9a04      	ldr	r2, [sp, #16]
 8008e1a:	b9d8      	cbnz	r0, 8008e54 <_vfiprintf_r+0x110>
 8008e1c:	06d1      	lsls	r1, r2, #27
 8008e1e:	bf44      	itt	mi
 8008e20:	2320      	movmi	r3, #32
 8008e22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e26:	0713      	lsls	r3, r2, #28
 8008e28:	bf44      	itt	mi
 8008e2a:	232b      	movmi	r3, #43	@ 0x2b
 8008e2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e30:	f89a 3000 	ldrb.w	r3, [sl]
 8008e34:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e36:	d015      	beq.n	8008e64 <_vfiprintf_r+0x120>
 8008e38:	9a07      	ldr	r2, [sp, #28]
 8008e3a:	4654      	mov	r4, sl
 8008e3c:	2000      	movs	r0, #0
 8008e3e:	f04f 0c0a 	mov.w	ip, #10
 8008e42:	4621      	mov	r1, r4
 8008e44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e48:	3b30      	subs	r3, #48	@ 0x30
 8008e4a:	2b09      	cmp	r3, #9
 8008e4c:	d94b      	bls.n	8008ee6 <_vfiprintf_r+0x1a2>
 8008e4e:	b1b0      	cbz	r0, 8008e7e <_vfiprintf_r+0x13a>
 8008e50:	9207      	str	r2, [sp, #28]
 8008e52:	e014      	b.n	8008e7e <_vfiprintf_r+0x13a>
 8008e54:	eba0 0308 	sub.w	r3, r0, r8
 8008e58:	fa09 f303 	lsl.w	r3, r9, r3
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	9304      	str	r3, [sp, #16]
 8008e60:	46a2      	mov	sl, r4
 8008e62:	e7d2      	b.n	8008e0a <_vfiprintf_r+0xc6>
 8008e64:	9b03      	ldr	r3, [sp, #12]
 8008e66:	1d19      	adds	r1, r3, #4
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	9103      	str	r1, [sp, #12]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	bfbb      	ittet	lt
 8008e70:	425b      	neglt	r3, r3
 8008e72:	f042 0202 	orrlt.w	r2, r2, #2
 8008e76:	9307      	strge	r3, [sp, #28]
 8008e78:	9307      	strlt	r3, [sp, #28]
 8008e7a:	bfb8      	it	lt
 8008e7c:	9204      	strlt	r2, [sp, #16]
 8008e7e:	7823      	ldrb	r3, [r4, #0]
 8008e80:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e82:	d10a      	bne.n	8008e9a <_vfiprintf_r+0x156>
 8008e84:	7863      	ldrb	r3, [r4, #1]
 8008e86:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e88:	d132      	bne.n	8008ef0 <_vfiprintf_r+0x1ac>
 8008e8a:	9b03      	ldr	r3, [sp, #12]
 8008e8c:	1d1a      	adds	r2, r3, #4
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	9203      	str	r2, [sp, #12]
 8008e92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e96:	3402      	adds	r4, #2
 8008e98:	9305      	str	r3, [sp, #20]
 8008e9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008f70 <_vfiprintf_r+0x22c>
 8008e9e:	7821      	ldrb	r1, [r4, #0]
 8008ea0:	2203      	movs	r2, #3
 8008ea2:	4650      	mov	r0, sl
 8008ea4:	f7f7 f994 	bl	80001d0 <memchr>
 8008ea8:	b138      	cbz	r0, 8008eba <_vfiprintf_r+0x176>
 8008eaa:	9b04      	ldr	r3, [sp, #16]
 8008eac:	eba0 000a 	sub.w	r0, r0, sl
 8008eb0:	2240      	movs	r2, #64	@ 0x40
 8008eb2:	4082      	lsls	r2, r0
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	3401      	adds	r4, #1
 8008eb8:	9304      	str	r3, [sp, #16]
 8008eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ebe:	4829      	ldr	r0, [pc, #164]	@ (8008f64 <_vfiprintf_r+0x220>)
 8008ec0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ec4:	2206      	movs	r2, #6
 8008ec6:	f7f7 f983 	bl	80001d0 <memchr>
 8008eca:	2800      	cmp	r0, #0
 8008ecc:	d03f      	beq.n	8008f4e <_vfiprintf_r+0x20a>
 8008ece:	4b26      	ldr	r3, [pc, #152]	@ (8008f68 <_vfiprintf_r+0x224>)
 8008ed0:	bb1b      	cbnz	r3, 8008f1a <_vfiprintf_r+0x1d6>
 8008ed2:	9b03      	ldr	r3, [sp, #12]
 8008ed4:	3307      	adds	r3, #7
 8008ed6:	f023 0307 	bic.w	r3, r3, #7
 8008eda:	3308      	adds	r3, #8
 8008edc:	9303      	str	r3, [sp, #12]
 8008ede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ee0:	443b      	add	r3, r7
 8008ee2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ee4:	e76a      	b.n	8008dbc <_vfiprintf_r+0x78>
 8008ee6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008eea:	460c      	mov	r4, r1
 8008eec:	2001      	movs	r0, #1
 8008eee:	e7a8      	b.n	8008e42 <_vfiprintf_r+0xfe>
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	3401      	adds	r4, #1
 8008ef4:	9305      	str	r3, [sp, #20]
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	f04f 0c0a 	mov.w	ip, #10
 8008efc:	4620      	mov	r0, r4
 8008efe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f02:	3a30      	subs	r2, #48	@ 0x30
 8008f04:	2a09      	cmp	r2, #9
 8008f06:	d903      	bls.n	8008f10 <_vfiprintf_r+0x1cc>
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d0c6      	beq.n	8008e9a <_vfiprintf_r+0x156>
 8008f0c:	9105      	str	r1, [sp, #20]
 8008f0e:	e7c4      	b.n	8008e9a <_vfiprintf_r+0x156>
 8008f10:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f14:	4604      	mov	r4, r0
 8008f16:	2301      	movs	r3, #1
 8008f18:	e7f0      	b.n	8008efc <_vfiprintf_r+0x1b8>
 8008f1a:	ab03      	add	r3, sp, #12
 8008f1c:	9300      	str	r3, [sp, #0]
 8008f1e:	462a      	mov	r2, r5
 8008f20:	4b12      	ldr	r3, [pc, #72]	@ (8008f6c <_vfiprintf_r+0x228>)
 8008f22:	a904      	add	r1, sp, #16
 8008f24:	4630      	mov	r0, r6
 8008f26:	f7fb feb9 	bl	8004c9c <_printf_float>
 8008f2a:	4607      	mov	r7, r0
 8008f2c:	1c78      	adds	r0, r7, #1
 8008f2e:	d1d6      	bne.n	8008ede <_vfiprintf_r+0x19a>
 8008f30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f32:	07d9      	lsls	r1, r3, #31
 8008f34:	d405      	bmi.n	8008f42 <_vfiprintf_r+0x1fe>
 8008f36:	89ab      	ldrh	r3, [r5, #12]
 8008f38:	059a      	lsls	r2, r3, #22
 8008f3a:	d402      	bmi.n	8008f42 <_vfiprintf_r+0x1fe>
 8008f3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f3e:	f7fc fe1d 	bl	8005b7c <__retarget_lock_release_recursive>
 8008f42:	89ab      	ldrh	r3, [r5, #12]
 8008f44:	065b      	lsls	r3, r3, #25
 8008f46:	f53f af1f 	bmi.w	8008d88 <_vfiprintf_r+0x44>
 8008f4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f4c:	e71e      	b.n	8008d8c <_vfiprintf_r+0x48>
 8008f4e:	ab03      	add	r3, sp, #12
 8008f50:	9300      	str	r3, [sp, #0]
 8008f52:	462a      	mov	r2, r5
 8008f54:	4b05      	ldr	r3, [pc, #20]	@ (8008f6c <_vfiprintf_r+0x228>)
 8008f56:	a904      	add	r1, sp, #16
 8008f58:	4630      	mov	r0, r6
 8008f5a:	f7fc f937 	bl	80051cc <_printf_i>
 8008f5e:	e7e4      	b.n	8008f2a <_vfiprintf_r+0x1e6>
 8008f60:	08009649 	.word	0x08009649
 8008f64:	08009653 	.word	0x08009653
 8008f68:	08004c9d 	.word	0x08004c9d
 8008f6c:	08008d21 	.word	0x08008d21
 8008f70:	0800964f 	.word	0x0800964f

08008f74 <__swbuf_r>:
 8008f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f76:	460e      	mov	r6, r1
 8008f78:	4614      	mov	r4, r2
 8008f7a:	4605      	mov	r5, r0
 8008f7c:	b118      	cbz	r0, 8008f86 <__swbuf_r+0x12>
 8008f7e:	6a03      	ldr	r3, [r0, #32]
 8008f80:	b90b      	cbnz	r3, 8008f86 <__swbuf_r+0x12>
 8008f82:	f7fc fce3 	bl	800594c <__sinit>
 8008f86:	69a3      	ldr	r3, [r4, #24]
 8008f88:	60a3      	str	r3, [r4, #8]
 8008f8a:	89a3      	ldrh	r3, [r4, #12]
 8008f8c:	071a      	lsls	r2, r3, #28
 8008f8e:	d501      	bpl.n	8008f94 <__swbuf_r+0x20>
 8008f90:	6923      	ldr	r3, [r4, #16]
 8008f92:	b943      	cbnz	r3, 8008fa6 <__swbuf_r+0x32>
 8008f94:	4621      	mov	r1, r4
 8008f96:	4628      	mov	r0, r5
 8008f98:	f000 f82a 	bl	8008ff0 <__swsetup_r>
 8008f9c:	b118      	cbz	r0, 8008fa6 <__swbuf_r+0x32>
 8008f9e:	f04f 37ff 	mov.w	r7, #4294967295
 8008fa2:	4638      	mov	r0, r7
 8008fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fa6:	6823      	ldr	r3, [r4, #0]
 8008fa8:	6922      	ldr	r2, [r4, #16]
 8008faa:	1a98      	subs	r0, r3, r2
 8008fac:	6963      	ldr	r3, [r4, #20]
 8008fae:	b2f6      	uxtb	r6, r6
 8008fb0:	4283      	cmp	r3, r0
 8008fb2:	4637      	mov	r7, r6
 8008fb4:	dc05      	bgt.n	8008fc2 <__swbuf_r+0x4e>
 8008fb6:	4621      	mov	r1, r4
 8008fb8:	4628      	mov	r0, r5
 8008fba:	f7ff fa47 	bl	800844c <_fflush_r>
 8008fbe:	2800      	cmp	r0, #0
 8008fc0:	d1ed      	bne.n	8008f9e <__swbuf_r+0x2a>
 8008fc2:	68a3      	ldr	r3, [r4, #8]
 8008fc4:	3b01      	subs	r3, #1
 8008fc6:	60a3      	str	r3, [r4, #8]
 8008fc8:	6823      	ldr	r3, [r4, #0]
 8008fca:	1c5a      	adds	r2, r3, #1
 8008fcc:	6022      	str	r2, [r4, #0]
 8008fce:	701e      	strb	r6, [r3, #0]
 8008fd0:	6962      	ldr	r2, [r4, #20]
 8008fd2:	1c43      	adds	r3, r0, #1
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d004      	beq.n	8008fe2 <__swbuf_r+0x6e>
 8008fd8:	89a3      	ldrh	r3, [r4, #12]
 8008fda:	07db      	lsls	r3, r3, #31
 8008fdc:	d5e1      	bpl.n	8008fa2 <__swbuf_r+0x2e>
 8008fde:	2e0a      	cmp	r6, #10
 8008fe0:	d1df      	bne.n	8008fa2 <__swbuf_r+0x2e>
 8008fe2:	4621      	mov	r1, r4
 8008fe4:	4628      	mov	r0, r5
 8008fe6:	f7ff fa31 	bl	800844c <_fflush_r>
 8008fea:	2800      	cmp	r0, #0
 8008fec:	d0d9      	beq.n	8008fa2 <__swbuf_r+0x2e>
 8008fee:	e7d6      	b.n	8008f9e <__swbuf_r+0x2a>

08008ff0 <__swsetup_r>:
 8008ff0:	b538      	push	{r3, r4, r5, lr}
 8008ff2:	4b29      	ldr	r3, [pc, #164]	@ (8009098 <__swsetup_r+0xa8>)
 8008ff4:	4605      	mov	r5, r0
 8008ff6:	6818      	ldr	r0, [r3, #0]
 8008ff8:	460c      	mov	r4, r1
 8008ffa:	b118      	cbz	r0, 8009004 <__swsetup_r+0x14>
 8008ffc:	6a03      	ldr	r3, [r0, #32]
 8008ffe:	b90b      	cbnz	r3, 8009004 <__swsetup_r+0x14>
 8009000:	f7fc fca4 	bl	800594c <__sinit>
 8009004:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009008:	0719      	lsls	r1, r3, #28
 800900a:	d422      	bmi.n	8009052 <__swsetup_r+0x62>
 800900c:	06da      	lsls	r2, r3, #27
 800900e:	d407      	bmi.n	8009020 <__swsetup_r+0x30>
 8009010:	2209      	movs	r2, #9
 8009012:	602a      	str	r2, [r5, #0]
 8009014:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009018:	81a3      	strh	r3, [r4, #12]
 800901a:	f04f 30ff 	mov.w	r0, #4294967295
 800901e:	e033      	b.n	8009088 <__swsetup_r+0x98>
 8009020:	0758      	lsls	r0, r3, #29
 8009022:	d512      	bpl.n	800904a <__swsetup_r+0x5a>
 8009024:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009026:	b141      	cbz	r1, 800903a <__swsetup_r+0x4a>
 8009028:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800902c:	4299      	cmp	r1, r3
 800902e:	d002      	beq.n	8009036 <__swsetup_r+0x46>
 8009030:	4628      	mov	r0, r5
 8009032:	f7fd fbf9 	bl	8006828 <_free_r>
 8009036:	2300      	movs	r3, #0
 8009038:	6363      	str	r3, [r4, #52]	@ 0x34
 800903a:	89a3      	ldrh	r3, [r4, #12]
 800903c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009040:	81a3      	strh	r3, [r4, #12]
 8009042:	2300      	movs	r3, #0
 8009044:	6063      	str	r3, [r4, #4]
 8009046:	6923      	ldr	r3, [r4, #16]
 8009048:	6023      	str	r3, [r4, #0]
 800904a:	89a3      	ldrh	r3, [r4, #12]
 800904c:	f043 0308 	orr.w	r3, r3, #8
 8009050:	81a3      	strh	r3, [r4, #12]
 8009052:	6923      	ldr	r3, [r4, #16]
 8009054:	b94b      	cbnz	r3, 800906a <__swsetup_r+0x7a>
 8009056:	89a3      	ldrh	r3, [r4, #12]
 8009058:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800905c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009060:	d003      	beq.n	800906a <__swsetup_r+0x7a>
 8009062:	4621      	mov	r1, r4
 8009064:	4628      	mov	r0, r5
 8009066:	f000 f883 	bl	8009170 <__smakebuf_r>
 800906a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800906e:	f013 0201 	ands.w	r2, r3, #1
 8009072:	d00a      	beq.n	800908a <__swsetup_r+0x9a>
 8009074:	2200      	movs	r2, #0
 8009076:	60a2      	str	r2, [r4, #8]
 8009078:	6962      	ldr	r2, [r4, #20]
 800907a:	4252      	negs	r2, r2
 800907c:	61a2      	str	r2, [r4, #24]
 800907e:	6922      	ldr	r2, [r4, #16]
 8009080:	b942      	cbnz	r2, 8009094 <__swsetup_r+0xa4>
 8009082:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009086:	d1c5      	bne.n	8009014 <__swsetup_r+0x24>
 8009088:	bd38      	pop	{r3, r4, r5, pc}
 800908a:	0799      	lsls	r1, r3, #30
 800908c:	bf58      	it	pl
 800908e:	6962      	ldrpl	r2, [r4, #20]
 8009090:	60a2      	str	r2, [r4, #8]
 8009092:	e7f4      	b.n	800907e <__swsetup_r+0x8e>
 8009094:	2000      	movs	r0, #0
 8009096:	e7f7      	b.n	8009088 <__swsetup_r+0x98>
 8009098:	20000030 	.word	0x20000030

0800909c <_raise_r>:
 800909c:	291f      	cmp	r1, #31
 800909e:	b538      	push	{r3, r4, r5, lr}
 80090a0:	4605      	mov	r5, r0
 80090a2:	460c      	mov	r4, r1
 80090a4:	d904      	bls.n	80090b0 <_raise_r+0x14>
 80090a6:	2316      	movs	r3, #22
 80090a8:	6003      	str	r3, [r0, #0]
 80090aa:	f04f 30ff 	mov.w	r0, #4294967295
 80090ae:	bd38      	pop	{r3, r4, r5, pc}
 80090b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80090b2:	b112      	cbz	r2, 80090ba <_raise_r+0x1e>
 80090b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090b8:	b94b      	cbnz	r3, 80090ce <_raise_r+0x32>
 80090ba:	4628      	mov	r0, r5
 80090bc:	f000 f830 	bl	8009120 <_getpid_r>
 80090c0:	4622      	mov	r2, r4
 80090c2:	4601      	mov	r1, r0
 80090c4:	4628      	mov	r0, r5
 80090c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090ca:	f000 b817 	b.w	80090fc <_kill_r>
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d00a      	beq.n	80090e8 <_raise_r+0x4c>
 80090d2:	1c59      	adds	r1, r3, #1
 80090d4:	d103      	bne.n	80090de <_raise_r+0x42>
 80090d6:	2316      	movs	r3, #22
 80090d8:	6003      	str	r3, [r0, #0]
 80090da:	2001      	movs	r0, #1
 80090dc:	e7e7      	b.n	80090ae <_raise_r+0x12>
 80090de:	2100      	movs	r1, #0
 80090e0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80090e4:	4620      	mov	r0, r4
 80090e6:	4798      	blx	r3
 80090e8:	2000      	movs	r0, #0
 80090ea:	e7e0      	b.n	80090ae <_raise_r+0x12>

080090ec <raise>:
 80090ec:	4b02      	ldr	r3, [pc, #8]	@ (80090f8 <raise+0xc>)
 80090ee:	4601      	mov	r1, r0
 80090f0:	6818      	ldr	r0, [r3, #0]
 80090f2:	f7ff bfd3 	b.w	800909c <_raise_r>
 80090f6:	bf00      	nop
 80090f8:	20000030 	.word	0x20000030

080090fc <_kill_r>:
 80090fc:	b538      	push	{r3, r4, r5, lr}
 80090fe:	4d07      	ldr	r5, [pc, #28]	@ (800911c <_kill_r+0x20>)
 8009100:	2300      	movs	r3, #0
 8009102:	4604      	mov	r4, r0
 8009104:	4608      	mov	r0, r1
 8009106:	4611      	mov	r1, r2
 8009108:	602b      	str	r3, [r5, #0]
 800910a:	f7f8 fac0 	bl	800168e <_kill>
 800910e:	1c43      	adds	r3, r0, #1
 8009110:	d102      	bne.n	8009118 <_kill_r+0x1c>
 8009112:	682b      	ldr	r3, [r5, #0]
 8009114:	b103      	cbz	r3, 8009118 <_kill_r+0x1c>
 8009116:	6023      	str	r3, [r4, #0]
 8009118:	bd38      	pop	{r3, r4, r5, pc}
 800911a:	bf00      	nop
 800911c:	20000478 	.word	0x20000478

08009120 <_getpid_r>:
 8009120:	f7f8 baad 	b.w	800167e <_getpid>

08009124 <__swhatbuf_r>:
 8009124:	b570      	push	{r4, r5, r6, lr}
 8009126:	460c      	mov	r4, r1
 8009128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800912c:	2900      	cmp	r1, #0
 800912e:	b096      	sub	sp, #88	@ 0x58
 8009130:	4615      	mov	r5, r2
 8009132:	461e      	mov	r6, r3
 8009134:	da0d      	bge.n	8009152 <__swhatbuf_r+0x2e>
 8009136:	89a3      	ldrh	r3, [r4, #12]
 8009138:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800913c:	f04f 0100 	mov.w	r1, #0
 8009140:	bf14      	ite	ne
 8009142:	2340      	movne	r3, #64	@ 0x40
 8009144:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009148:	2000      	movs	r0, #0
 800914a:	6031      	str	r1, [r6, #0]
 800914c:	602b      	str	r3, [r5, #0]
 800914e:	b016      	add	sp, #88	@ 0x58
 8009150:	bd70      	pop	{r4, r5, r6, pc}
 8009152:	466a      	mov	r2, sp
 8009154:	f000 f848 	bl	80091e8 <_fstat_r>
 8009158:	2800      	cmp	r0, #0
 800915a:	dbec      	blt.n	8009136 <__swhatbuf_r+0x12>
 800915c:	9901      	ldr	r1, [sp, #4]
 800915e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009162:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009166:	4259      	negs	r1, r3
 8009168:	4159      	adcs	r1, r3
 800916a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800916e:	e7eb      	b.n	8009148 <__swhatbuf_r+0x24>

08009170 <__smakebuf_r>:
 8009170:	898b      	ldrh	r3, [r1, #12]
 8009172:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009174:	079d      	lsls	r5, r3, #30
 8009176:	4606      	mov	r6, r0
 8009178:	460c      	mov	r4, r1
 800917a:	d507      	bpl.n	800918c <__smakebuf_r+0x1c>
 800917c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009180:	6023      	str	r3, [r4, #0]
 8009182:	6123      	str	r3, [r4, #16]
 8009184:	2301      	movs	r3, #1
 8009186:	6163      	str	r3, [r4, #20]
 8009188:	b003      	add	sp, #12
 800918a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800918c:	ab01      	add	r3, sp, #4
 800918e:	466a      	mov	r2, sp
 8009190:	f7ff ffc8 	bl	8009124 <__swhatbuf_r>
 8009194:	9f00      	ldr	r7, [sp, #0]
 8009196:	4605      	mov	r5, r0
 8009198:	4639      	mov	r1, r7
 800919a:	4630      	mov	r0, r6
 800919c:	f7fd fbb8 	bl	8006910 <_malloc_r>
 80091a0:	b948      	cbnz	r0, 80091b6 <__smakebuf_r+0x46>
 80091a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091a6:	059a      	lsls	r2, r3, #22
 80091a8:	d4ee      	bmi.n	8009188 <__smakebuf_r+0x18>
 80091aa:	f023 0303 	bic.w	r3, r3, #3
 80091ae:	f043 0302 	orr.w	r3, r3, #2
 80091b2:	81a3      	strh	r3, [r4, #12]
 80091b4:	e7e2      	b.n	800917c <__smakebuf_r+0xc>
 80091b6:	89a3      	ldrh	r3, [r4, #12]
 80091b8:	6020      	str	r0, [r4, #0]
 80091ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091be:	81a3      	strh	r3, [r4, #12]
 80091c0:	9b01      	ldr	r3, [sp, #4]
 80091c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80091c6:	b15b      	cbz	r3, 80091e0 <__smakebuf_r+0x70>
 80091c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091cc:	4630      	mov	r0, r6
 80091ce:	f000 f81d 	bl	800920c <_isatty_r>
 80091d2:	b128      	cbz	r0, 80091e0 <__smakebuf_r+0x70>
 80091d4:	89a3      	ldrh	r3, [r4, #12]
 80091d6:	f023 0303 	bic.w	r3, r3, #3
 80091da:	f043 0301 	orr.w	r3, r3, #1
 80091de:	81a3      	strh	r3, [r4, #12]
 80091e0:	89a3      	ldrh	r3, [r4, #12]
 80091e2:	431d      	orrs	r5, r3
 80091e4:	81a5      	strh	r5, [r4, #12]
 80091e6:	e7cf      	b.n	8009188 <__smakebuf_r+0x18>

080091e8 <_fstat_r>:
 80091e8:	b538      	push	{r3, r4, r5, lr}
 80091ea:	4d07      	ldr	r5, [pc, #28]	@ (8009208 <_fstat_r+0x20>)
 80091ec:	2300      	movs	r3, #0
 80091ee:	4604      	mov	r4, r0
 80091f0:	4608      	mov	r0, r1
 80091f2:	4611      	mov	r1, r2
 80091f4:	602b      	str	r3, [r5, #0]
 80091f6:	f7f8 faaa 	bl	800174e <_fstat>
 80091fa:	1c43      	adds	r3, r0, #1
 80091fc:	d102      	bne.n	8009204 <_fstat_r+0x1c>
 80091fe:	682b      	ldr	r3, [r5, #0]
 8009200:	b103      	cbz	r3, 8009204 <_fstat_r+0x1c>
 8009202:	6023      	str	r3, [r4, #0]
 8009204:	bd38      	pop	{r3, r4, r5, pc}
 8009206:	bf00      	nop
 8009208:	20000478 	.word	0x20000478

0800920c <_isatty_r>:
 800920c:	b538      	push	{r3, r4, r5, lr}
 800920e:	4d06      	ldr	r5, [pc, #24]	@ (8009228 <_isatty_r+0x1c>)
 8009210:	2300      	movs	r3, #0
 8009212:	4604      	mov	r4, r0
 8009214:	4608      	mov	r0, r1
 8009216:	602b      	str	r3, [r5, #0]
 8009218:	f7f8 faa9 	bl	800176e <_isatty>
 800921c:	1c43      	adds	r3, r0, #1
 800921e:	d102      	bne.n	8009226 <_isatty_r+0x1a>
 8009220:	682b      	ldr	r3, [r5, #0]
 8009222:	b103      	cbz	r3, 8009226 <_isatty_r+0x1a>
 8009224:	6023      	str	r3, [r4, #0]
 8009226:	bd38      	pop	{r3, r4, r5, pc}
 8009228:	20000478 	.word	0x20000478

0800922c <_init>:
 800922c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800922e:	bf00      	nop
 8009230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009232:	bc08      	pop	{r3}
 8009234:	469e      	mov	lr, r3
 8009236:	4770      	bx	lr

08009238 <_fini>:
 8009238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800923a:	bf00      	nop
 800923c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800923e:	bc08      	pop	{r3}
 8009240:	469e      	mov	lr, r3
 8009242:	4770      	bx	lr
